{"ast":null,"code":"var _jsxFileName = \"/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/GraphsContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphsContext = /*#__PURE__*/createContext();\nexport const useGraphStates = () => {\n  _s();\n  return useContext(GraphsContext);\n};\n_s(useGraphStates, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const GraphsProvider = ({\n  children\n}) => {\n  _s2();\n  const [text, setText] = useState(\"Add Node or Generate Graph to Begin\");\n  const [nodes, setNodes] = useState([]);\n  const [nodeCount, setNodeCount] = useState(0);\n  const [edges, setEdges] = useState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isAddingEdge, setIsAddingEdge] = useState(false);\n  const [dragging, setDragging] = useState(false);\n  const [isRemovingEdge, setIsRemovingEdge] = useState(false);\n  const [visitedNodes, setVisitedNodes] = useState([]);\n  const [visitedEdges, setVisitedEdges] = useState([]);\n  const [adjList, setAdjList] = useState([]);\n  const [clickedTraversal, setClickedTraversal] = useState(false);\n  const [clickedMST, setClickedMST] = useState(false);\n  const [clickedPaths, setClickedPaths] = useState(false);\n  const [isDFS, setIsDFS] = useState(false);\n  const [isBFS, setIsBFS] = useState(false);\n  const [isPrim, setIsPrim] = useState(false);\n  const [isTSP, setIsTSP] = useState(false);\n  const [algorithmRunning, setAlgorithmRunning] = useState(false);\n  const [isShortestPath, setIsShortestPath] = useState(false);\n  const [startNode, setStartNode] = useState(null);\n  const [endNode, setEndNode] = useState(null);\n  const componentColors = [\"blue\", \"green\", \"orange\", \"purple\", \"pink\", \"yellow\", \"gold\", \"coral\", \"crimson\", \"cyan\", \"darkgreen\", \"drakblue\", \"darkorange\", \"darkorchid\", \"darkred\", \"deeppink\", \"darkviolet\", \"deepskyblue\", \"forestgreen\", \"fuchsia\"];\n  const [components, setComponents] = useState([]);\n  const [showWeights, setShowWeights] = useState(false);\n  const [sliderValue, setSliderValue] = useState(250);\n  const [currentNode, setCurrentNode] = useState(null);\n  const sliderValueRef = useRef(sliderValue);\n  const totalSliderCount = 2100;\n  const [isPaused, setIsPaused] = useState(false);\n  const isPausedRef = useRef(isPaused);\n  const [currentStep, setCurrentStep] = useState(0);\n  const currentStepRef = useRef(currentStep);\n  const [isStepMode, setIsStepMode] = useState(false);\n  const isStepModeRef = useRef(isStepMode);\n  const [disablePause, setDisablePause] = useState(false);\n  const [algorithmStarted, setAlgorithmStarted] = useState(false);\n  const [runningAlgorithm, setRunningAlgorithm] = useState(null);\n  const [isDirected, setIsDirected] = useState(false);\n\n  // Function to sleep and check for pausing\n  const sleep = duration => {\n    return new Promise(resolve => {\n      const interval = 50;\n      let elapsed = 0;\n      const checkPauseAndSleep = () => {\n        if (isPausedRef.current) {\n          const checkPause = () => {\n            if (isStepModeRef.current) {\n              setIsStepMode(true);\n              resolve();\n            } else if (!isPausedRef.current) {\n              resolve();\n            } else {\n              setTimeout(checkPause, interval);\n            }\n          };\n          checkPause();\n        } else {\n          if (elapsed < duration) {\n            elapsed += interval;\n            setTimeout(checkPauseAndSleep, interval);\n          } else {\n            resolve();\n          }\n        }\n      };\n      checkPauseAndSleep();\n    });\n  };\n  const {\n    setClickTraversal,\n    setClickPath\n  } = useGraphStates();\n  return /*#__PURE__*/_jsxDEV(GraphsContext.Provider, {\n    value: {\n      text,\n      setText,\n      nodes,\n      setNodes,\n      nodeCount,\n      setNodeCount,\n      edges,\n      setEdges,\n      selectedNode,\n      setSelectedNode,\n      isAddingEdge,\n      setIsAddingEdge,\n      dragging,\n      setDragging,\n      isRemovingEdge,\n      setIsRemovingEdge,\n      visitedNodes,\n      setVisitedNodes,\n      visitedEdges,\n      setVisitedEdges,\n      adjList,\n      setAdjList,\n      clickedTraversal,\n      setClickedTraversal,\n      clickedMST,\n      setClickedMST,\n      clickedPaths,\n      setClickedPaths,\n      isDFS,\n      setIsDFS,\n      isBFS,\n      setIsBFS,\n      isPrim,\n      setIsPrim,\n      isTSP,\n      setIsTSP,\n      algorithmRunning,\n      setAlgorithmRunning,\n      isShortestPath,\n      setIsShortestPath,\n      startNode,\n      setStartNode,\n      endNode,\n      setEndNode,\n      componentColors,\n      components,\n      setComponents,\n      showWeights,\n      setShowWeights,\n      sliderValue,\n      setSliderValue,\n      currentNode,\n      setCurrentNode,\n      sliderValueRef,\n      totalSliderCount,\n      isPaused,\n      setIsPaused,\n      isPausedRef,\n      currentStep,\n      setCurrentStep,\n      currentStepRef,\n      isStepMode,\n      setIsStepMode,\n      isStepModeRef,\n      disablePause,\n      setDisablePause,\n      algorithmStarted,\n      setAlgorithmStarted,\n      runningAlgorithm,\n      setRunningAlgorithm,\n      isDirected,\n      setIsDirected,\n      setClickTraversal\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n_s2(GraphsProvider, \"ZG+DW9hm5w9vg9n8PlU86I/O8mM=\", false, function () {\n  return [useGraphStates];\n});\n_c = GraphsProvider;\nvar _c;\n$RefreshReg$(_c, \"GraphsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useRef","jsxDEV","_jsxDEV","GraphsContext","useGraphStates","_s","GraphsProvider","children","_s2","text","setText","nodes","setNodes","nodeCount","setNodeCount","edges","setEdges","selectedNode","setSelectedNode","isAddingEdge","setIsAddingEdge","dragging","setDragging","isRemovingEdge","setIsRemovingEdge","visitedNodes","setVisitedNodes","visitedEdges","setVisitedEdges","adjList","setAdjList","clickedTraversal","setClickedTraversal","clickedMST","setClickedMST","clickedPaths","setClickedPaths","isDFS","setIsDFS","isBFS","setIsBFS","isPrim","setIsPrim","isTSP","setIsTSP","algorithmRunning","setAlgorithmRunning","isShortestPath","setIsShortestPath","startNode","setStartNode","endNode","setEndNode","componentColors","components","setComponents","showWeights","setShowWeights","sliderValue","setSliderValue","currentNode","setCurrentNode","sliderValueRef","totalSliderCount","isPaused","setIsPaused","isPausedRef","currentStep","setCurrentStep","currentStepRef","isStepMode","setIsStepMode","isStepModeRef","disablePause","setDisablePause","algorithmStarted","setAlgorithmStarted","runningAlgorithm","setRunningAlgorithm","isDirected","setIsDirected","sleep","duration","Promise","resolve","interval","elapsed","checkPauseAndSleep","current","checkPause","setTimeout","setClickTraversal","setClickPath","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/GraphsContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useRef } from 'react';\n\nconst GraphsContext = createContext();\n\nexport const useGraphStates = () => useContext(GraphsContext);\n\nexport const GraphsProvider = ({ children }) => {\n    const [text, setText] = useState(\"Add Node or Generate Graph to Begin\");\n    const [nodes, setNodes] = useState([]);\n    const [nodeCount, setNodeCount] = useState(0);\n    const [edges, setEdges] = useState([]);\n    const [selectedNode, setSelectedNode] = useState(null);\n    const [isAddingEdge, setIsAddingEdge] = useState(false);\n    const [dragging, setDragging] = useState(false);\n    const [isRemovingEdge, setIsRemovingEdge] = useState(false);\n    const [visitedNodes, setVisitedNodes] = useState([]);\n    const [visitedEdges, setVisitedEdges] = useState([]);\n    const [adjList, setAdjList] = useState([]);\n    const [clickedTraversal, setClickedTraversal] = useState(false);\n    const [clickedMST, setClickedMST] = useState(false);\n    const [clickedPaths, setClickedPaths] = useState(false);\n    const [isDFS, setIsDFS] = useState(false);\n    const [isBFS, setIsBFS] = useState(false);\n    const [isPrim, setIsPrim] = useState(false);\n    const [isTSP, setIsTSP] = useState(false);\n    const [algorithmRunning, setAlgorithmRunning] = useState(false);\n    const [isShortestPath, setIsShortestPath] = useState(false);\n    const [startNode, setStartNode] = useState(null);\n    const [endNode, setEndNode] = useState(null);\n    const componentColors = [\"blue\", \"green\", \"orange\", \"purple\", \"pink\", \"yellow\", \"gold\", \"coral\", \"crimson\", \"cyan\", \"darkgreen\", \"drakblue\", \"darkorange\", \"darkorchid\", \"darkred\", \"deeppink\", \"darkviolet\", \"deepskyblue\", \"forestgreen\", \"fuchsia\"];\n    const [components, setComponents] = useState([]);\n    const [showWeights, setShowWeights] = useState(false);\n    const [sliderValue, setSliderValue] = useState(250);\n    const [currentNode, setCurrentNode] = useState(null);\n    const sliderValueRef = useRef(sliderValue);\n    const totalSliderCount = 2100;\n    const [isPaused, setIsPaused] = useState(false);\n    const isPausedRef = useRef(isPaused);\n    const [currentStep, setCurrentStep] = useState(0);\n    const currentStepRef = useRef(currentStep);\n    const [isStepMode, setIsStepMode] = useState(false);\n    const isStepModeRef = useRef(isStepMode);\n    const [disablePause, setDisablePause] = useState(false);\n    const [algorithmStarted, setAlgorithmStarted] = useState(false);\n    const [runningAlgorithm, setRunningAlgorithm] = useState(null);\n    const [isDirected, setIsDirected] = useState(false);\n\n    // Function to sleep and check for pausing\n    const sleep = (duration) => {\n        return new Promise((resolve) => {\n            const interval = 50;\n            let elapsed = 0;\n\n            const checkPauseAndSleep = () => {\n                if (isPausedRef.current) {\n                    const checkPause = () => {\n                        if(isStepModeRef.current){\n                            setIsStepMode(true);\n                            resolve();\n                        }else if (!isPausedRef.current){\n                            resolve();\n                        }else {\n                            setTimeout(checkPause, interval);\n                        }\n                    };\n                    checkPause();\n                } else {\n                    if (elapsed < duration) {\n                        elapsed += interval;\n                        setTimeout(checkPauseAndSleep, interval);\n                    } else {\n                        resolve();\n                    }\n                }\n            };\n\n            checkPauseAndSleep();\n        });\n    };\n\n    const {setClickTraversal, setClickPath} = useGraphStates();\n\n    return (\n        <GraphsContext.Provider\n            value={{\n                text, setText, nodes, setNodes, nodeCount, setNodeCount, edges, setEdges, selectedNode, setSelectedNode,\n                isAddingEdge, setIsAddingEdge, dragging, setDragging, isRemovingEdge, setIsRemovingEdge, visitedNodes,\n                setVisitedNodes, visitedEdges, setVisitedEdges, adjList, setAdjList, clickedTraversal, setClickedTraversal,\n                clickedMST, setClickedMST, clickedPaths, setClickedPaths, isDFS, setIsDFS, isBFS, setIsBFS, isPrim, setIsPrim,\n                isTSP, setIsTSP, algorithmRunning, setAlgorithmRunning, isShortestPath, setIsShortestPath, startNode, setStartNode,\n                endNode, setEndNode, componentColors, components, setComponents, showWeights, setShowWeights, sliderValue,\n                setSliderValue, currentNode, setCurrentNode, sliderValueRef, totalSliderCount, isPaused, setIsPaused, isPausedRef,\n                currentStep, setCurrentStep, currentStepRef, isStepMode, setIsStepMode, isStepModeRef, disablePause, setDisablePause,\n                algorithmStarted, setAlgorithmStarted, runningAlgorithm, setRunningAlgorithm, isDirected, setIsDirected, setClickTraversal\n            }}\n        >\n            {children}\n        </GraphsContext.Provider>\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}