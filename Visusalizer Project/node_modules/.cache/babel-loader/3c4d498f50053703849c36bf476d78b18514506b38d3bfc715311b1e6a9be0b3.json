{"ast":null,"code":"var _jsxFileName = \"/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport Draggable from 'react-draggable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graphs = () => {\n  _s();\n  // State variables to manage graph nodes, edges, and various UI states\n  const [text, setText] = useState(\"Add Node or Generate Graph to Begin\");\n  const [nodes, setNodes] = useState([]);\n  const [nodeCount, setNodeCount] = useState(0);\n  const [edges, setEdges] = useState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isAddingEdge, setIsAddingEdge] = useState(false);\n  const [dragging, setDragging] = useState(false);\n  const [isRemovingEdge, setIsRemovingEdge] = useState(false);\n  // eslint-disable-next-line\n  const [visitedNodes, setVisitedNodes] = useState([]);\n  const [visitedEdges, setVisitedEdges] = useState([]);\n  const [adjList, setAdjList] = useState([]);\n  const [clickedTraversal, setClickedTraveral] = useState(false);\n  const [clickedMST, setClickedMST] = useState(false);\n  const [clickedPaths, setClickedPaths] = useState(false);\n  const [isDFS, setIsDFS] = useState(false);\n  const [isBFS, setIsBFS] = useState(false);\n  const [isPrim, setIsPrim] = useState(false);\n  const [isTSP, setIsTSP] = useState(false);\n  const [algorithmRunning, setAlgorithmRunning] = useState(false);\n  const [isShortestPath, setIsShortestPath] = useState(false);\n  const [startNode, setStartNode] = useState(null);\n  const [endNode, setEndNode] = useState(null);\n  const [componentColors] = useState([\"blue\", \"green\", \"orange\", \"purple\", \"pink\", \"yellow\", \"gold\", \"coral\", \"crimson\", \"cyan\", \"darkgreen\", \"drakblue\", \"darkorange\", \"darkorchid\", \"darkred\", \"deeppink\", \"darkviolet\", \"deepskyblue\", \"forestgreen\", \"fuchsia\"]);\n  const [components, setComponents] = useState([]);\n  const [showWeights, setShowWeights] = useState(false);\n  const [sliderValue, setSliderValue] = useState(250);\n  const sliderValueRef = useRef(sliderValue);\n\n  // Constants for UI text and colors\n  const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n  const treeEdgeColor = \"blue\";\n  const currentEdgeColor = \"red\";\n  const defaultEdgeColor = \"grey\";\n\n  // Function to reset edges to default state\n  const resetEdges = () => {\n    setVisitedEdges([]);\n    setVisitedNodes([]);\n    setText(startingText);\n    setAlgorithmRunning(false);\n  };\n\n  // Function to calculate edge length\n  const calculateEdgeLength = edge => {\n    const dx = edge.from.x - edge.to.x;\n    const dy = edge.from.y - edge.to.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  };\n\n  // Function to calculate midpoiint of an edge\n  const calculateMidpoint = edge => {\n    const midX = (edge.from.x + edge.to.x) / 2;\n    const midY = (edge.from.y + edge.to.y) / 2;\n    return {\n      x: midX,\n      y: midY\n    };\n  };\n\n  // Fucntion to calculate angle of an edge\n  const calculateAngle = edge => {\n    const dx = edge.to.x - edge.from.x;\n    const dy = edge.to.y - edge.from.y;\n    return Math.atan2(dy, dx) * (180 / Math.PI);\n  };\n\n  // Function to add a new node to the graph\n  const addNode = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    if (nodes.length >= 20) {\n      alert(\"too many nodes\");\n      return;\n    }\n    setText(startingText);\n    const newNode = {\n      id: nodeCount,\n      x: Math.random() * 480,\n      y: Math.random() * 480\n    };\n    setNodes([...nodes, newNode]);\n    setAdjList(prevAdjList => ({\n      ...prevAdjList,\n      [newNode.id]: []\n    }));\n    setNodeCount(nodeCount + 1);\n  };\n\n  // Function to generate a random graph\n  const generateGraph = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    var numNodes = 0;\n    var numEdges = -1;\n    do {\n      const response = prompt(\"Enter the number of nodes:\", \"\");\n      if (isNaN(response)) {\n        alert(\"Invalid input. Please enter numbers only\");\n        continue;\n      }\n      if (response <= 0 || response > 20) {\n        alert(\"Invalid input. Number of nodes must be between 1 and 20\");\n        continue;\n      }\n      numNodes = response;\n    } while (numNodes === 0);\n    do {\n      const response = prompt(\"Enter the number of edges:\", \"\");\n      if (isNaN(response)) {\n        alert(\"Invalid input. Please enter numbers only\");\n        continue;\n      }\n      if (response > numNodes * (numNodes - 1) / 2) {\n        alert(\"Invalid input. Too many edges for the graph\");\n        continue;\n      }\n      if (response < 0) {\n        alert(\"Invalid input. Not enough edges\");\n        continue;\n      }\n      numEdges = response;\n    } while (numEdges === -1);\n    setNodes([]);\n    setEdges([]);\n    setAdjList({});\n    setNodeCount(0);\n    setVisitedNodes([]);\n    setVisitedEdges([]);\n    setSelectedNode(null);\n    setText(startingText);\n    const newNodes = [];\n    const newEdges = [];\n    const newAdjList = {};\n    const gridSize = Math.ceil(Math.sqrt(numNodes));\n    const areaWidth = 500;\n    const areaHeight = 500;\n    const margin = 10;\n    const gridSpacingX = (areaWidth - 2 * margin) / gridSize;\n    const gridSpacingY = (areaHeight - 2 * margin) / gridSize;\n    for (let i = 0; i < numNodes; i++) {\n      const row = Math.floor(i / gridSize);\n      const col = i % gridSize;\n      const x = margin + col * gridSpacingX + Math.random() * gridSpacingX * 0.9;\n      const y = margin + row * gridSpacingY + Math.random() * gridSpacingY * 0.9;\n      const newNode = {\n        id: i,\n        x: x,\n        y: y\n      };\n      newNodes.push(newNode);\n      newAdjList[i] = [];\n    }\n    while (newEdges.length < numEdges) {\n      const from = newNodes[Math.floor(Math.random() * numNodes)];\n      const to = newNodes[Math.floor(Math.random() * numNodes)];\n      if (from.id !== to.id) {\n        const edgeExists = newEdges.some(edge => edge.from.id === from.id && edge.to.id === to.id || edge.from.id === to.id && edge.to.id === from.id);\n        if (!edgeExists) {\n          const newEdge = {\n            from,\n            to\n          };\n          newEdges.push(newEdge);\n          newAdjList[from.id].push(to.id);\n          newAdjList[to.id].push(from.id);\n        }\n      }\n    }\n    setNodes(newNodes);\n    setEdges(newEdges);\n    setAdjList(newAdjList);\n    setNodeCount(newNodes.length);\n  };\n\n  // Function to reset the graph\n  const resetGraph = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setNodes([]);\n    setEdges([]);\n    setClickedMST(false);\n    setClickedTraveral(false);\n    setIsRemovingEdge(false);\n    setText(startingText);\n  };\n\n  // Function to remove a selected node form the graph\n  const removeNode = () => {\n    if (selectedNode == null) return;\n    setNodes(nodes.filter(node => node.id !== selectedNode.id));\n    setEdges(edges.filter(edge => edge.from.id !== selectedNode.id && edge.to.id !== selectedNode.id));\n    setAdjList(prevAdjList => {\n      const newAdjList = {\n        ...prevAdjList\n      };\n      delete newAdjList[selectedNode.id];\n      for (const key in newAdjList) {\n        newAdjList[key] = newAdjList[key].filter(id => id !== selectedNode.id);\n      }\n      return newAdjList;\n    });\n    setSelectedNode(null);\n  };\n\n  // Function to handle clicking on a node\n  const handleNodeClick = node => {\n    if (dragging) {\n      return;\n    }\n    if (isAddingEdge) {\n      if (selectedNode && selectedNode.id !== node.id) {\n        const edgeExists = edges.some(edge => edge.from.id === selectedNode.id && edge.to.id === node.id || edge.from.id === node.id && edge.to.id === selectedNode.id);\n        if (!edgeExists) {\n          const newEdge = {\n            from: selectedNode,\n            to: node\n          };\n          setEdges(prevEdges => [...prevEdges, newEdge]);\n          setAdjList(prevAdjList => {\n            const newAdjList = {\n              ...prevAdjList\n            };\n            if (!newAdjList[selectedNode.id]) newAdjList[selectedNode.id] = [];\n            if (!newAdjList[node.id]) newAdjList[node.id] = [];\n            newAdjList[selectedNode.id].push(node.id);\n            newAdjList[node.id].push(selectedNode.id);\n            return newAdjList;\n          });\n        }\n        setIsAddingEdge(false);\n        setSelectedNode(null);\n      } else if (selectedNode && selectedNode.id === node.id) {\n        setSelectedNode(null);\n        setIsAddingEdge(false);\n      }\n      setText(startingText);\n    } else if (isDFS) {\n      setVisitedNodes([]);\n      setVisitedEdges([]);\n      dfs(node);\n      setIsDFS(false);\n    } else if (isBFS) {\n      setVisitedNodes([]);\n      setVisitedEdges([]);\n      bfs(node);\n      setIsBFS(false);\n    } else if (isPrim) {\n      setIsPrim(false);\n      animatePrimsAlgorithm(node);\n    } else if (isShortestPath) {\n      if (!startNode) {\n        setStartNode(node);\n        setText(\"Select End Node for Shortest Path\");\n      } else if (!endNode) {\n        setEndNode(node);\n        setText(\"Finding Shortest Path...\");\n        findShortestPath(startNode, node);\n        setIsShortestPath(false);\n      }\n    } else if (isTSP) {\n      setVisitedNodes([]);\n      setVisitedEdges([]);\n      tsp(node);\n      setIsTSP(false);\n    } else {\n      if (selectedNode && selectedNode.id === node.id) {\n        setSelectedNode(null);\n        setText(startingText);\n      } else {\n        if (!algorithmRunning) {\n          setSelectedNode(node);\n        }\n      }\n    }\n  };\n\n  // Function to handle mouse down event for dragging\n  const handleMouseDown = () => {\n    setDragging(false);\n  };\n\n  // Function to start removing an edge\n  const startRemovingEdge = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    if (isRemovingEdge) {\n      setIsRemovingEdge(false);\n      setText(\"\");\n      return;\n    }\n    if (edges.length < 1) {\n      alert(\"must be at least one edge\");\n      return;\n    }\n    setText(\"Click on an edge to remove it\");\n    setIsRemovingEdge(true);\n  };\n\n  // Function to initiate adding an edge\n  const handleAddEdge = () => {\n    if (selectedNode === null) return;\n    if (nodes.length * (nodes.length - 1) / 2 === edges.length) {\n      alert(\"cannot add another edge\");\n      return;\n    }\n    if (nodes.length < 2) {\n      alert(\"You need at least two nodes to add an edge.\");\n      return;\n    }\n    setIsAddingEdge(true);\n    setText(\"Click another node to add edge\");\n  };\n\n  // Function to handle clicking on an edge\n  const handleEdgeClick = edge => {\n    if (isRemovingEdge) {\n      setEdges(edges.filter(e => e !== edge));\n      setIsRemovingEdge(false);\n      setAdjList(prevAdjList => {\n        const newAdjList = {\n          ...prevAdjList\n        };\n        newAdjList[edge.from.id] = newAdjList[edge.from.id].filter(id => id !== edge.to.id);\n        newAdjList[edge.to.id] = newAdjList[edge.to.id].filter(id => id !== edge.from.id);\n        return newAdjList;\n      });\n      setText(startingText);\n    }\n  };\n\n  // Function to handle dragging a node\n  const handleDrag = (e, data, node) => {\n    setDragging(true);\n    node.x = data.x;\n    node.y = data.y;\n    setNodes([...nodes]);\n  };\n\n  // Function to handle stopping the drag of a node\n  const handleDragStop = () => {\n    setTimeout(() => {\n      setDragging(false);\n    }, 0);\n  };\n\n  // Function to start DFS\n  const startDFS = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setIsDFS(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Node to begin DFS\");\n  };\n\n  // DFS implementatoin\n  const dfs = async startNode => {\n    setText(\"DFS in progress...\");\n    const visitedNodeSet = new Set();\n    const dfsRecursive = async currentNode => {\n      if (visitedNodeSet.has(currentNode.id)) {\n        return;\n      }\n      visitedNodeSet.add(currentNode.id);\n      setVisitedNodes(prev => {\n        const updatedNodes = [...prev, {\n          id: currentNode.id,\n          color: treeEdgeColor\n        }];\n        return updatedNodes;\n      });\n      for (let neighborId of adjList[currentNode.id]) {\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        const edge = edges.find(e => e.from.id === currentNode.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNode.id);\n        if (edge) {\n          const isEdgeNotBlue = edge.color !== treeEdgeColor;\n          if (isEdgeNotBlue) {\n            setVisitedEdges(prev => [...prev, {\n              ...edge,\n              color: currentEdgeColor\n            }]);\n            await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n          }\n          if (!visitedNodeSet.has(neighborId)) {\n            setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n              ...edge,\n              color: treeEdgeColor\n            }]);\n            await dfsRecursive(neighborNode);\n          } else {\n            setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== treeEdgeColor)), {\n              ...edge,\n              color: defaultEdgeColor\n            }]);\n          }\n        }\n      }\n    };\n    await dfsRecursive(startNode);\n    setText(\"DFS Done!\");\n    setTimeout(resetEdges, 1000);\n  };\n\n  // Function to start BFS\n  const startBFS = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setIsBFS(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Node to begin BFS\");\n  };\n\n  // BFS implementation\n  const bfs = async startNode => {\n    setText(\"BFS in progress...\");\n    const visitedNodeSet = new Set();\n    const queue = [startNode];\n    visitedNodeSet.add(startNode.id);\n    setVisitedNodes([{\n      id: startNode.id,\n      color: treeEdgeColor\n    }]);\n    while (queue.length > 0) {\n      const currentNode = queue.shift();\n      for (let neighborId of adjList[currentNode.id]) {\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        const edge = edges.find(e => e.from.id === currentNode.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNode.id);\n        if (edge) {\n          const isEdgeNotBlue = edge.color !== treeEdgeColor;\n          if (isEdgeNotBlue) {\n            setVisitedEdges(prev => [...prev, {\n              ...edge,\n              color: currentEdgeColor\n            }]);\n            await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n          }\n          if (!visitedNodeSet.has(neighborId)) {\n            visitedNodeSet.add(neighborId);\n            queue.push(neighborNode);\n            setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n              ...edge,\n              color: treeEdgeColor\n            }]);\n            setVisitedNodes(prev => [...prev, {\n              id: neighborId,\n              color: treeEdgeColor\n            }]);\n          } else if (isEdgeNotBlue) {\n            setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== treeEdgeColor)), {\n              ...edge,\n              color: defaultEdgeColor\n            }]);\n          }\n        }\n      }\n    }\n    setText(\"BFS Done!\");\n    setTimeout(resetEdges, 1000); // Wait 1 second before resetting edges\n  };\n\n  // Function to animate Kruskall's algorithm\n  const animateKruskalsAlgorithm = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setAlgorithmRunning(true);\n    setText(\"Running Kruskal's Algorithm...\");\n    const sortedEdges = [...edges].sort((a, b) => calculateEdgeLength(a) - calculateEdgeLength(b));\n    let componentIndex = 0;\n    let currentComponentEdges = [];\n    let currentComponentNodes = [];\n    let uf;\n    const visitedNodeSet = new Set();\n    const foundComponents = [];\n    const dfsComponent = (currentNode, component) => {\n      if (visitedNodeSet.has(currentNode.id)) {\n        return;\n      }\n      visitedNodeSet.add(currentNode.id);\n      component.push(currentNode);\n      adjList[currentNode.id].forEach(neighborId => {\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        if (!visitedNodeSet.has(neighborId)) {\n          dfsComponent(neighborNode, component);\n        }\n      });\n    };\n    nodes.forEach(node => {\n      if (!visitedNodeSet.has(node.id)) {\n        const component = [];\n        dfsComponent(node, component);\n        foundComponents.push(component);\n      }\n    });\n    setComponents(foundComponents);\n    const animateComponentMST = component => {\n      uf = new UnionFind(nodeCount);\n      currentComponentEdges = [];\n      currentComponentNodes = component.map(node => node.id);\n      let edgeIndex = 0;\n      const color = componentColors[componentIndex % componentColors.length];\n      const highlightNodesAndEdges = index => {\n        if (index < currentComponentEdges.length) {\n          const {\n            from,\n            to\n          } = currentComponentEdges[index];\n          setVisitedNodes(prev => [...prev, {\n            id: from.id,\n            color\n          }, {\n            id: to.id,\n            color\n          }]);\n          setVisitedEdges(prev => [...prev, currentComponentEdges[index]]);\n          setTimeout(() => highlightNodesAndEdges(index + 1), sliderValueRef.current);\n        } else {\n          componentIndex++;\n          if (componentIndex < foundComponents.length) {\n            setTimeout(() => animateComponentMST(foundComponents[componentIndex]), 0);\n          } else {\n            setTimeout(resetEdges, 1000);\n            setText(\"Kruskal's Algorithm completed!\");\n          }\n        }\n      };\n      const animateStep = () => {\n        if (currentComponentEdges.length === component.length - 1 || edgeIndex >= sortedEdges.length) {\n          highlightNodesAndEdges(0);\n          return;\n        }\n        const edge = sortedEdges[edgeIndex];\n        edgeIndex++;\n        if (currentComponentNodes.includes(edge.from.id) && currentComponentNodes.includes(edge.to.id) && uf.find(edge.from.id) !== uf.find(edge.to.id)) {\n          uf.union(edge.from.id, edge.to.id);\n          currentComponentEdges.push({\n            ...edge,\n            color\n          });\n        }\n        animateStep();\n      };\n      animateStep();\n    };\n    if (foundComponents.length > 0) {\n      animateComponentMST(foundComponents[0]);\n    } else {\n      console.log(\"No components found.\");\n      setAlgorithmRunning(false);\n    }\n  };\n\n  // Union-Find data structure for Kruskal's algorithm\n  class UnionFind {\n    constructor(size) {\n      this.parent = Array(size).fill(null).map((_, index) => index);\n      this.rank = Array(size).fill(0);\n    }\n    find(node) {\n      if (this.parent[node] !== node) {\n        this.parent[node] = this.find(this.parent[node]);\n      }\n      return this.parent[node];\n    }\n    union(node1, node2) {\n      const root1 = this.find(node1);\n      const root2 = this.find(node2);\n      if (root1 !== root2) {\n        if (this.rank[root1] > this.rank[root2]) {\n          this.parent[root2] = root1;\n        } else if (this.rank[root1] < this.rank[root2]) {\n          this.parent[root1] = root2;\n        } else {\n          this.parent[root2] = root1;\n          this.rank[root1] += 1;\n        }\n      }\n    }\n  }\n\n  // Function to start Prim's algorithm\n  const startPrim = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setIsPrim(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Node to begin Prim's Algorithm\");\n  };\n\n  // Function to animate Prim's algorithm\n  const animatePrimsAlgorithm = async startNode => {\n    setText(\"Running Prim's Algorithm...\");\n    const visitedNodeSet = new Set();\n    const edgeQueue = [];\n    const addEdges = node => {\n      visitedNodeSet.add(node.id);\n      setVisitedNodes(prev => [...prev, {\n        id: node.id,\n        color: treeEdgeColor\n      }]);\n      (adjList[node.id] || []).forEach(neighborId => {\n        if (!visitedNodeSet.has(neighborId)) {\n          const edge = edges.find(e => e.from.id === node.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === node.id);\n          if (edge) {\n            edgeQueue.push({\n              ...edge,\n              length: calculateEdgeLength(edge)\n            });\n          }\n        }\n      });\n      edgeQueue.sort((a, b) => a.length - b.length);\n    };\n    const animateStep = async () => {\n      if (visitedNodeSet.size === nodes.length || edgeQueue.length === 0) {\n        setText(\"Prim's Algorithm completed!\");\n        setTimeout(resetEdges, 1000);\n        return;\n      }\n      const edgesToHighlight = edgeQueue.slice(0, 1);\n      edgesToHighlight.forEach(edge => {\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: currentEdgeColor\n        }]);\n      });\n      await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n      const edge = edgeQueue.shift();\n      const {\n        from,\n        to\n      } = edge;\n      const fromInMST = visitedNodeSet.has(from.id);\n      const toInMST = visitedNodeSet.has(to.id);\n      if (fromInMST && !toInMST || !fromInMST && toInMST) {\n        setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n          ...edge,\n          color: treeEdgeColor\n        }]);\n        if (fromInMST && !toInMST) {\n          addEdges(to);\n        } else if (!fromInMST && toInMST) {\n          addEdges(from);\n        }\n      } else {\n        setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n          ...edge,\n          color: defaultEdgeColor\n        }]);\n      }\n      animateStep();\n    };\n    addEdges(startNode);\n    animateStep();\n  };\n\n  // Function to set traversal mode\n  const setClickTraversal = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedTraveral(true);\n  };\n\n  // Function to set MST mode\n  const setClickMST = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedMST(true);\n  };\n\n  // Function to set Paths mode\n  const setClickPath = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedPaths(true);\n  };\n\n  // Functino to go back from algorithm selection\n  const goBack = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setClickedMST(false);\n    setClickedTraveral(false);\n    setClickedPaths(false);\n    setAlgorithmRunning(false);\n    setText(startingText);\n  };\n\n  // Function to find connected components in a graph\n  const findConnectedComponents = async () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setAlgorithmRunning(true);\n    setText(\"Finding connected components...\");\n    const visitedNodeSet = new Set();\n    const foundComponents = [];\n    const dfsRecursive = async (currentNode, component, componentColor) => {\n      if (visitedNodeSet.has(currentNode.id)) {\n        return;\n      }\n      visitedNodeSet.add(currentNode.id);\n      setVisitedNodes(prev => {\n        const updatedNodes = [...prev, {\n          id: currentNode.id,\n          color: componentColor\n        }];\n        return updatedNodes;\n      });\n      component.push(currentNode);\n      for (let neighborId of adjList[currentNode.id]) {\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        const edge = edges.find(e => e.from.id === currentNode.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNode.id);\n        if (edge) {\n          const isEdgeNotInComponentColor = edge.color !== componentColor;\n          if (isEdgeNotInComponentColor) {\n            setVisitedEdges(prev => [...prev, {\n              ...edge,\n              color: currentEdgeColor\n            }]);\n            await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n          }\n          if (!visitedNodeSet.has(neighborId)) {\n            setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n              ...edge,\n              color: componentColor\n            }]);\n            await dfsRecursive(neighborNode, component, componentColor);\n          } else {\n            setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== componentColor)), {\n              ...edge,\n              color: componentColor\n            }]);\n          }\n        }\n      }\n    };\n    for (let index = 0; index < nodes.length; index++) {\n      const node = nodes[index];\n      if (!visitedNodeSet.has(node.id)) {\n        const component = [];\n        const componentColor = componentColors[foundComponents.length % componentColors.length];\n        await dfsRecursive(node, component, componentColor);\n        foundComponents.push(component);\n      }\n    }\n    setComponents(foundComponents);\n    const animateComponents = index => {\n      if (index < foundComponents.length) {\n        const currentComponent = foundComponents[index];\n        const color = componentColors[index % componentColors.length];\n        const newVisitedNodes = [];\n        const newVisitedEdges = [];\n        currentComponent.forEach(node => {\n          newVisitedNodes.push({\n            id: node.id,\n            color\n          });\n          adjList[node.id].forEach(neighborId => {\n            if (currentComponent.some(n => n.id === neighborId)) {\n              const edge = edges.find(e => e.from.id === node.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === node.id);\n              if (edge && !newVisitedEdges.includes(edge)) {\n                newVisitedEdges.push(edge);\n              }\n            }\n          });\n        });\n        setVisitedNodes(prev => [...prev, ...newVisitedNodes]);\n        setVisitedEdges(prev => [...prev, ...newVisitedEdges.map(edge => ({\n          ...edge,\n          color\n        }))]);\n        setTimeout(() => animateComponents(index + 1), sliderValueRef.current);\n      } else {\n        setText(\"Connected Components Found!\");\n        setTimeout(() => {\n          resetEdges();\n          setComponents([]);\n        }, 1000);\n      }\n    };\n    animateComponents(0);\n  };\n\n  // Function to start shortest path algorithm\n  const startShortestPath = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setIsShortestPath(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Start Node for Shortest Path\");\n  };\n\n  // Function to find the shortest path between two nodes\n  const findShortestPath = async (startNode, endNode) => {\n    const distances = {};\n    const previousNodes = {};\n    const nodesToVisit = new Set(nodes.map(node => node.id));\n    const edgesToReset = [];\n    nodes.forEach(node => {\n      distances[node.id] = Infinity;\n      previousNodes[node.id] = null;\n    });\n    distances[startNode.id] = 0;\n    while (nodesToVisit.size > 0) {\n      const currentNodeId = [...nodesToVisit].reduce((minNodeId, nodeId) => {\n        return distances[nodeId] < distances[minNodeId] ? nodeId : minNodeId;\n      });\n      if (distances[currentNodeId] === Infinity) break;\n\n      //set edge to red here?\n\n      nodesToVisit.delete(currentNodeId);\n      if (currentNodeId === endNode.id) break;\n      const currentNodeDistance = distances[currentNodeId];\n      for (const neighborId of adjList[currentNodeId]) {\n        if (!nodesToVisit.has(neighborId)) continue;\n        const edge = edges.find(e => e.from.id === currentNodeId && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNodeId);\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: currentEdgeColor\n        }]);\n        edgesToReset.push(edge);\n        await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n        const altDistance = currentNodeDistance + calculateEdgeLength(edge);\n        if (altDistance < distances[neighborId]) {\n          distances[neighborId] = altDistance;\n          previousNodes[neighborId] = currentNodeId;\n        } else {\n          setVisitedEdges(prev => {\n            return prev.map(e => e.from.id === edge.from.id && e.to.id === edge.to.id || e.from.id === edge.to.id && e.to.id === edge.from.id ? {\n              ...e,\n              color: defaultEdgeColor\n            } : e);\n          });\n        }\n      }\n    }\n    const path = [];\n    let currentNodeId = endNode.id;\n    while (currentNodeId !== null) {\n      path.unshift(currentNodeId);\n      currentNodeId = previousNodes[currentNodeId];\n    }\n    for (let i = 0; i < path.length - 1; i++) {\n      const nodeId = path[i];\n      const nextNodeId = path[i + 1];\n      setVisitedNodes(prev => [...prev, {\n        id: nodeId,\n        color: treeEdgeColor\n      }]);\n      const edge = edges.find(e => e.from.id === nodeId && e.to.id === nextNodeId || e.from.id === nextNodeId && e.to.id === nodeId);\n      setVisitedEdges(prev => prev.map(e => e.from.id === edge.from.id && e.to.id === edge.to.id || e.from.id === edge.to.id && e.to.id === edge.from.id ? {\n        ...e,\n        color: treeEdgeColor\n      } : e));\n      await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n    }\n    setVisitedNodes(prev => [...prev, {\n      id: endNode.id,\n      color: treeEdgeColor\n    }]);\n    setVisitedEdges(prev => prev.map(e => e.color === currentEdgeColor ? {\n      ...e,\n      color: defaultEdgeColor\n    } : e));\n    if (path[0] === startNode.id) {\n      setTimeout(resetEdges, 1000);\n      setText(\"Shortest Path Found\");\n      setStartNode(null);\n      setEndNode(null);\n    } else {\n      setTimeout(resetEdges, 1000);\n      setText(\"No Path Found\");\n      setStartNode(null);\n      setEndNode(null);\n    }\n  };\n\n  // Function to handle slider change\n  const handleSliderChange = event => {\n    const newValue = event.target.value;\n    setSliderValue(newValue);\n    sliderValueRef.current = newValue;\n  };\n\n  // Function to color graph\n  const graphColoring = async () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setAlgorithmRunning(true);\n    setText(\"Graph Coloring in progress...\");\n    const availableColors = componentColors;\n    const colors = {};\n    const colorGraph = node => {\n      const neighborColors = adjList[node.id].map(neighborId => colors[neighborId]);\n      for (let color of availableColors) {\n        if (!neighborColors.includes(color)) {\n          colors[node.id] = color;\n          break;\n        }\n      }\n    };\n    for (let node of nodes) {\n      colorGraph(node);\n      setVisitedNodes(prev => [...prev, {\n        id: node.id,\n        color: colors[node.id]\n      }]);\n      await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n    }\n    setText(\"Graph Coloring Done!\");\n    setTimeout(resetEdges, 1000);\n  };\n\n  // Function to start TSP\n  const startTSP = async () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setIsTSP(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Node to begin TSP\");\n  };\n\n  // Function to animate TSP\n  const tsp = async node => {\n    setText(\"Solving TSP using nearest neighbor...\");\n    const startNode = node;\n    const unvisited = new Set(nodes.map(node => node.id));\n    const visited = [];\n    const stack = [];\n    let currentNode = startNode;\n    unvisited.delete(currentNode.id);\n    visited.push(currentNode);\n    setVisitedNodes([{\n      id: currentNode.id,\n      color: treeEdgeColor\n    }]);\n    while (unvisited.size > 0) {\n      let nearestNode = null;\n      let shortestDistance = Infinity;\n      let currentEdge = null;\n      for (let neighborId of unvisited) {\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        // eslint-disable-next-line\n        const edge = edges.find(e => e.from.id === currentNode.id && e.to.id === neighborNode.id || e.from.id === neighborNode.id && e.to.id === currentNode.id);\n        if (edge) {\n          setVisitedEdges(prev => [...prev, {\n            ...edge,\n            color: currentEdgeColor\n          }]);\n          await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n          const distance = calculateEdgeLength({\n            from: currentNode,\n            to: neighborNode\n          });\n          setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)));\n          if (distance < shortestDistance) {\n            shortestDistance = distance;\n            nearestNode = neighborNode;\n            currentEdge = edge;\n          }\n        }\n      }\n      if (nearestNode && currentEdge) {\n        stack.push({\n          currentNode,\n          nearestNode,\n          shortestDistance\n        });\n        setVisitedEdges(prev => [...prev, {\n          ...currentEdge,\n          color: treeEdgeColor\n        }]);\n        setVisitedNodes(prev => [...prev, {\n          id: nearestNode.id,\n          color: treeEdgeColor\n        }]);\n        await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n        currentNode = nearestNode;\n        unvisited.delete(currentNode.id);\n        visited.push(currentNode);\n      } else {\n        const previousState = stack.pop();\n        if (previousState) {\n          currentNode = previousState.currentNode;\n        } else {\n          break;\n        }\n      }\n    }\n    setText(\"TSP Solved!\");\n    setTimeout(resetEdges, 1000);\n  };\n\n  // JSX for rendering the component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graphs-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"slider-label\",\n            children: \"Algorithm Step Speed:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1080,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slider-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"100ms\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1082,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"100\",\n              max: \"2000\",\n              step: \"100\",\n              value: sliderValue,\n              onChange: handleSliderChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1083,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"2000ms\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1091,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1081,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1079,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"graph-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"graph-button\",\n            onClick: () => {\n              setShowWeights(!showWeights);\n            },\n            children: showWeights ? 'Hide Weights' : 'Show Weights'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1095,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"edges-svg\",\n            style: {\n              position: 'absolute',\n              width: '100%',\n              height: '100%'\n            },\n            children: edges.map((edge, index) => {\n              var _visitedEdges$find;\n              const midpoint = calculateMidpoint(edge);\n              const angle = calculateAngle(edge);\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                  x1: edge.from.x + 10,\n                  y1: edge.from.y + 10,\n                  x2: edge.to.x + 10,\n                  y2: edge.to.y + 10,\n                  stroke: ((_visitedEdges$find = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find === void 0 ? void 0 : _visitedEdges$find.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                  strokeWidth: isRemovingEdge ? 8 : 4,\n                  onClick: () => handleEdgeClick(edge)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1104,\n                  columnNumber: 37\n                }, this), showWeights && /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: midpoint.x + 10,\n                  y: midpoint.y + 7,\n                  fill: \"black\",\n                  fontSize: \"12\",\n                  transform: `rotate(${angle}, ${midpoint.x + 10}, ${midpoint.y + 10})`,\n                  textAnchor: \"middle\",\n                  children: calculateEdgeLength(edge).toFixed(2)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1114,\n                  columnNumber: 41\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1103,\n                columnNumber: 33\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1098,\n            columnNumber: 21\n          }, this), nodes.map(node => {\n            var _visitedNodes$find;\n            return /*#__PURE__*/_jsxDEV(Draggable, {\n              position: {\n                x: node.x,\n                y: node.y\n              },\n              bounds: \"parent\",\n              onStart: handleMouseDown,\n              onDrag: (e, data) => handleDrag(e, data, node),\n              onStop: handleDragStop,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"graph-node\",\n                onClick: () => handleNodeClick(node),\n                style: {\n                  border: isTSP || isBFS || isPrim || isDFS || isShortestPath ? startNode && startNode.id === node.id ? 'none' : '2px solid red' : selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none',\n                  backgroundColor: visitedNodes.some(vn => vn.id === node.id) ? ((_visitedNodes$find = visitedNodes.find(vn => vn.id === node.id)) === null || _visitedNodes$find === void 0 ? void 0 : _visitedNodes$find.color) || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\" : 'black',\n                  pointerEvents: 'auto',\n                  position: 'absolute'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1137,\n                columnNumber: 33\n              }, this)\n            }, node.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1129,\n              columnNumber: 29\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1094,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          \"class-name\": \"status-text\",\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1151,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1078,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Graph Creation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1155,\n          columnNumber: 21\n        }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: addNode,\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1159,\n          columnNumber: 21\n        }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: generateGraph,\n          children: \"Generate Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1161,\n          columnNumber: 21\n        }, this), !selectedNode && nodes.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: resetGraph,\n          children: \"Reset Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1163,\n          columnNumber: 21\n        }, this), !selectedNode && edges.length >= 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: startRemovingEdge,\n          children: \"Remove Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1165,\n          columnNumber: 21\n        }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: handleAddEdge,\n          children: \"Add Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1169,\n          columnNumber: 21\n        }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: removeNode,\n          children: \"Remove Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1171,\n          columnNumber: 21\n        }, this), edges.length > 0 && !selectedNode && /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Algorithms\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1175,\n          columnNumber: 21\n        }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: setClickTraversal,\n          children: \"Traversals \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1177,\n          columnNumber: 21\n        }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: setClickMST,\n          children: \"MSTs \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1179,\n          columnNumber: 21\n        }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: setClickPath,\n          children: \"Paths \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1181,\n          columnNumber: 21\n        }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: animateKruskalsAlgorithm,\n          children: \"Kruskall\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1186,\n          columnNumber: 21\n        }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: startPrim,\n          children: \"Prim\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1188,\n          columnNumber: 21\n        }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: startDFS,\n          children: \"DFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1191,\n          columnNumber: 21\n        }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: startBFS,\n          children: \"BFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1193,\n          columnNumber: 21\n        }, this), clickedPaths && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: startShortestPath,\n          children: \"Shortest Path\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1196,\n          columnNumber: 21\n        }, this), clickedPaths && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: startTSP,\n          children: \"TSP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1198,\n          columnNumber: 21\n        }, this), !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: findConnectedComponents,\n          children: \"Connected Components\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1201,\n          columnNumber: 21\n        }, this), !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: graphColoring,\n          children: \"Graph Coloring\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1203,\n          columnNumber: 21\n        }, this), (clickedTraversal || clickedMST || clickedPaths) && !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: goBack,\n          children: \"\\u2190 Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1209,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1154,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1077,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1076,\n    columnNumber: 9\n  }, this);\n};\n_s(Graphs, \"j1A2jHn4jz5VojGIlOPOijFysPQ=\");\n_c = Graphs;\nexport default Graphs;\nvar _c;\n$RefreshReg$(_c, \"Graphs\");","map":{"version":3,"names":["React","useState","useRef","Draggable","jsxDEV","_jsxDEV","Graphs","_s","text","setText","nodes","setNodes","nodeCount","setNodeCount","edges","setEdges","selectedNode","setSelectedNode","isAddingEdge","setIsAddingEdge","dragging","setDragging","isRemovingEdge","setIsRemovingEdge","visitedNodes","setVisitedNodes","visitedEdges","setVisitedEdges","adjList","setAdjList","clickedTraversal","setClickedTraveral","clickedMST","setClickedMST","clickedPaths","setClickedPaths","isDFS","setIsDFS","isBFS","setIsBFS","isPrim","setIsPrim","isTSP","setIsTSP","algorithmRunning","setAlgorithmRunning","isShortestPath","setIsShortestPath","startNode","setStartNode","endNode","setEndNode","componentColors","components","setComponents","showWeights","setShowWeights","sliderValue","setSliderValue","sliderValueRef","startingText","treeEdgeColor","currentEdgeColor","defaultEdgeColor","resetEdges","calculateEdgeLength","edge","dx","from","x","to","dy","y","Math","sqrt","calculateMidpoint","midX","midY","calculateAngle","atan2","PI","addNode","length","alert","newNode","id","random","prevAdjList","generateGraph","numNodes","numEdges","response","prompt","isNaN","newNodes","newEdges","newAdjList","gridSize","ceil","areaWidth","areaHeight","margin","gridSpacingX","gridSpacingY","i","row","floor","col","push","edgeExists","some","newEdge","resetGraph","removeNode","filter","node","key","handleNodeClick","prevEdges","dfs","bfs","animatePrimsAlgorithm","findShortestPath","tsp","handleMouseDown","startRemovingEdge","handleAddEdge","handleEdgeClick","e","handleDrag","data","handleDragStop","setTimeout","startDFS","visitedNodeSet","Set","dfsRecursive","currentNode","has","add","prev","updatedNodes","color","neighborId","neighborNode","find","isEdgeNotBlue","Promise","resolve","current","startBFS","queue","shift","animateKruskalsAlgorithm","sortedEdges","sort","a","b","componentIndex","currentComponentEdges","currentComponentNodes","uf","foundComponents","dfsComponent","component","forEach","animateComponentMST","UnionFind","map","edgeIndex","highlightNodesAndEdges","index","animateStep","includes","union","console","log","constructor","size","parent","Array","fill","_","rank","node1","node2","root1","root2","startPrim","edgeQueue","addEdges","edgesToHighlight","slice","fromInMST","toInMST","setClickTraversal","setClickMST","setClickPath","goBack","findConnectedComponents","componentColor","isEdgeNotInComponentColor","animateComponents","currentComponent","newVisitedNodes","newVisitedEdges","n","startShortestPath","distances","previousNodes","nodesToVisit","edgesToReset","Infinity","currentNodeId","reduce","minNodeId","nodeId","delete","currentNodeDistance","altDistance","path","unshift","nextNodeId","handleSliderChange","event","newValue","target","value","graphColoring","availableColors","colors","colorGraph","neighborColors","startTSP","unvisited","visited","stack","nearestNode","shortestDistance","currentEdge","distance","previousState","pop","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","min","max","step","onChange","onClick","style","position","width","height","_visitedEdges$find","midpoint","angle","Fragment","x1","y1","x2","y2","stroke","strokeWidth","fontSize","transform","textAnchor","toFixed","_visitedNodes$find","bounds","onStart","onDrag","onStop","border","backgroundColor","vn","findIndex","comp","pointerEvents","_c","$RefreshReg$"],"sources":["/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js"],"sourcesContent":["import React, {useState, useRef } from 'react';\nimport Draggable from 'react-draggable';\n\nconst Graphs = () => {\n    // State variables to manage graph nodes, edges, and various UI states\n    const [text, setText] = useState(\"Add Node or Generate Graph to Begin\");\n    const [nodes, setNodes] = useState([]);\n    const [nodeCount, setNodeCount] = useState(0);\n    const [edges, setEdges] = useState([]);\n    const [selectedNode, setSelectedNode] = useState(null);\n    const [isAddingEdge, setIsAddingEdge] = useState(false);\n    const [dragging, setDragging] = useState(false);\n    const [isRemovingEdge, setIsRemovingEdge] = useState(false);\n    // eslint-disable-next-line\n    const [visitedNodes, setVisitedNodes] = useState([]);\n    const [visitedEdges, setVisitedEdges] = useState([]);\n    const [adjList, setAdjList] = useState([]);\n    const [clickedTraversal, setClickedTraveral] = useState(false);\n    const [clickedMST, setClickedMST] = useState(false);\n    const [clickedPaths, setClickedPaths] = useState(false);\n    const [isDFS, setIsDFS] = useState(false);\n    const [isBFS, setIsBFS] = useState(false);\n    const [isPrim, setIsPrim] = useState(false);\n    const [isTSP, setIsTSP] = useState(false);\n    const [algorithmRunning, setAlgorithmRunning] = useState(false);\n    const [isShortestPath, setIsShortestPath] = useState(false);\n    const [startNode, setStartNode] = useState(null);\n    const [endNode, setEndNode] = useState(null);\n    const [componentColors] = useState([\"blue\", \"green\", \"orange\", \"purple\", \"pink\", \"yellow\", \"gold\", \"coral\", \"crimson\", \"cyan\", \"darkgreen\", \"drakblue\", \"darkorange\", \"darkorchid\", \"darkred\", \"deeppink\", \"darkviolet\", \"deepskyblue\", \"forestgreen\", \"fuchsia\"]);\n    const [components, setComponents] = useState([]);\n    const [showWeights, setShowWeights] = useState(false);\n    const [sliderValue, setSliderValue] = useState(250);\n    const sliderValueRef = useRef(sliderValue);\n\n    // Constants for UI text and colors\n    const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n    const treeEdgeColor = \"blue\"; \n    const currentEdgeColor = \"red\"; \n    const defaultEdgeColor = \"grey\";\n\n    // Function to reset edges to default state\n    const resetEdges = () => {\n        setVisitedEdges([]);\n        setVisitedNodes([]);\n        setText(startingText);\n        setAlgorithmRunning(false);\n    };\n\n    // Function to calculate edge length\n    const calculateEdgeLength = (edge) => {\n        const dx = edge.from.x - edge.to.x;\n        const dy = edge.from.y - edge.to.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    };\n\n    // Function to calculate midpoiint of an edge\n    const calculateMidpoint = (edge) => {\n        const midX = (edge.from.x + edge.to.x) / 2;\n        const midY = (edge.from.y + edge.to.y) / 2;\n        return { x: midX, y: midY };\n    };\n    \n    // Fucntion to calculate angle of an edge\n    const calculateAngle = (edge) => {\n        const dx = edge.to.x - edge.from.x;\n        const dy = edge.to.y - edge.from.y;\n        return Math.atan2(dy, dx) * (180 / Math.PI);\n    };\n\n    // Function to add a new node to the graph\n    const addNode = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        if(nodes.length >= 20){\n            alert(\"too many nodes\");\n            return;\n        }\n\n        setText(startingText);\n        const newNode = {\n            id: nodeCount,\n            x: Math.random() * 480,\n            y: Math.random() * 480,\n        };\n        setNodes([...nodes, newNode]);\n        setAdjList(prevAdjList => ({ ...prevAdjList, [newNode.id]: [] }));\n        setNodeCount(nodeCount + 1);\n    };\n\n    // Function to generate a random graph\n    const generateGraph = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n\n        var numNodes = 0;\n        var numEdges = -1;\n\n        do{\n            const response = prompt(\"Enter the number of nodes:\", \"\");\n\n            if(isNaN(response)){\n                alert(\"Invalid input. Please enter numbers only\");\n                continue;\n            }\n\n            if(response <= 0 || response > 20){\n                alert(\"Invalid input. Number of nodes must be between 1 and 20\");\n                continue;\n            }\n\n            numNodes = response;\n\n        }while(numNodes === 0);\n\n        do{\n            const response = prompt(\"Enter the number of edges:\", \"\");\n\n            if(isNaN(response)){\n                alert(\"Invalid input. Please enter numbers only\");\n                continue;\n            }\n\n            if(response > ((numNodes * (numNodes - 1)) / 2)){\n                alert(\"Invalid input. Too many edges for the graph\");\n                continue;\n            }\n\n            if(response < 0){\n                alert(\"Invalid input. Not enough edges\");\n                continue;\n            }\n\n            numEdges = response;\n\n        }while(numEdges === -1);\n\n        setNodes([]);\n        setEdges([]);\n        setAdjList({});\n        setNodeCount(0);\n        setVisitedNodes([]);\n        setVisitedEdges([]);\n        setSelectedNode(null);\n        setText(startingText);\n    \n        const newNodes = [];\n        const newEdges = [];\n        const newAdjList = {};\n    \n\n        const gridSize = Math.ceil(Math.sqrt(numNodes));\n        const areaWidth = 500; \n        const areaHeight = 500; \n        const margin = 10;\n        const gridSpacingX = (areaWidth - 2 * margin) / gridSize;\n        const gridSpacingY = (areaHeight - 2 * margin) / gridSize;\n\n        for (let i = 0; i < numNodes; i++) {\n            const row = Math.floor(i / gridSize);\n            const col = i % gridSize;\n            const x = margin + col * gridSpacingX + Math.random() * gridSpacingX * 0.9;\n            const y = margin + row * gridSpacingY + Math.random() * gridSpacingY * 0.9;\n\n            const newNode = {\n                id: i,\n                x: x,\n                y: y,\n            };\n            newNodes.push(newNode);\n            newAdjList[i] = [];\n        }\n    \n        while (newEdges.length < numEdges) {\n            const from = newNodes[Math.floor(Math.random() * numNodes)];\n            const to = newNodes[Math.floor(Math.random() * numNodes)];\n            if (from.id !== to.id) {\n                const edgeExists = newEdges.some(edge =>\n                    (edge.from.id === from.id && edge.to.id === to.id) ||\n                    (edge.from.id === to.id && edge.to.id === from.id)\n                );\n                if (!edgeExists) {\n                    const newEdge = { from, to };\n                    newEdges.push(newEdge);\n                    newAdjList[from.id].push(to.id);\n                    newAdjList[to.id].push(from.id);\n                }\n            }\n        }\n    \n        setNodes(newNodes);\n        setEdges(newEdges);\n        setAdjList(newAdjList);\n        setNodeCount(newNodes.length);\n    };\n\n    // Function to reset the graph\n    const resetGraph = () => {\n        if(algorithmRunning){\n            return;\n        }\n        setNodes([]);\n        setEdges([]);\n        setClickedMST(false);\n        setClickedTraveral(false);\n        setIsRemovingEdge(false);\n        setText(startingText);\n    };\n    \n    // Function to remove a selected node form the graph\n    const removeNode = () => {\n        if (selectedNode == null) return;\n\n        setNodes(nodes.filter(node => node.id !== selectedNode.id));\n        setEdges(edges.filter(edge => edge.from.id !== selectedNode.id && edge.to.id !== selectedNode.id));\n        setAdjList(prevAdjList => {\n            const newAdjList = { ...prevAdjList };\n            delete newAdjList[selectedNode.id];\n            for (const key in newAdjList) {\n                newAdjList[key] = newAdjList[key].filter(id => id !== selectedNode.id);\n            }\n            return newAdjList;\n        });\n        setSelectedNode(null);\n    };\n\n    // Function to handle clicking on a node\n    const handleNodeClick = (node) => {\n        if (dragging) {\n            return;\n        }\n\n        if (isAddingEdge) {\n            if (selectedNode && selectedNode.id !== node.id) {\n                const edgeExists = edges.some(edge =>\n                    (edge.from.id === selectedNode.id && edge.to.id === node.id) ||\n                    (edge.from.id === node.id && edge.to.id === selectedNode.id)\n                );\n\n                if(!edgeExists){\n                    const newEdge = { from: selectedNode, to: node };\n                    setEdges(prevEdges => [...prevEdges, newEdge]);\n\n                    setAdjList(prevAdjList => {\n                        const newAdjList = { ...prevAdjList };\n                        if (!newAdjList[selectedNode.id]) newAdjList[selectedNode.id] = [];\n                        if (!newAdjList[node.id]) newAdjList[node.id] = [];\n                        newAdjList[selectedNode.id].push(node.id);\n                        newAdjList[node.id].push(selectedNode.id);\n                        return newAdjList;\n                    })\n                }\n                \n                setIsAddingEdge(false);\n                setSelectedNode(null);\n            } else if (selectedNode && selectedNode.id === node.id) {\n                setSelectedNode(null);\n                setIsAddingEdge(false);\n            }\n            setText(startingText);\n        } else if(isDFS){\n            setVisitedNodes([]);\n            setVisitedEdges([]);\n            dfs(node);\n            setIsDFS(false);\n        } else if(isBFS){\n            setVisitedNodes([]);\n            setVisitedEdges([]);\n            bfs(node);\n            setIsBFS(false);\n        }else if(isPrim){\n            setIsPrim(false);\n            animatePrimsAlgorithm(node);\n        }else if(isShortestPath){\n            if(!startNode){\n                setStartNode(node);\n                setText(\"Select End Node for Shortest Path\");\n            }else if(!endNode){\n                setEndNode(node);\n                setText(\"Finding Shortest Path...\");\n                findShortestPath(startNode, node);\n                setIsShortestPath(false);\n            }\n        }else if(isTSP){\n            setVisitedNodes([]);\n            setVisitedEdges([]);\n            tsp(node);\n            setIsTSP(false);\n        }else{\n            if (selectedNode && selectedNode.id === node.id) {\n                setSelectedNode(null); \n                setText(startingText);\n            } else {\n                if(!algorithmRunning){\n                    setSelectedNode(node);\n                }\n                \n            }\n        }\n    }\n\n    // Function to handle mouse down event for dragging\n    const handleMouseDown = () => {\n        setDragging(false);\n    };\n\n    // Function to start removing an edge\n    const startRemovingEdge = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        if(isRemovingEdge){\n            setIsRemovingEdge(false);\n            setText(\"\");\n            return;\n        }\n\n        if(edges.length < 1){\n            alert(\"must be at least one edge\");\n            return;\n        }\n        setText(\"Click on an edge to remove it\");\n        setIsRemovingEdge(true);\n    }\n\n    // Function to initiate adding an edge\n    const handleAddEdge = () => {\n        if (selectedNode === null) return;\n\n        if(((nodes.length * (nodes.length - 1)) / 2) === edges.length){\n            alert(\"cannot add another edge\");\n            return;\n        }\n\n        if (nodes.length < 2) {\n            alert(\"You need at least two nodes to add an edge.\");\n            return;\n        }\n        setIsAddingEdge(true);\n        setText(\"Click another node to add edge\");\n    };\n\n    // Function to handle clicking on an edge\n    const handleEdgeClick = (edge) => {\n        if (isRemovingEdge) {\n            setEdges(edges.filter(e => e !== edge));\n            setIsRemovingEdge(false);\n    \n            setAdjList(prevAdjList => {\n                const newAdjList = { ...prevAdjList };\n                newAdjList[edge.from.id] = newAdjList[edge.from.id].filter(id => id !== edge.to.id);\n                newAdjList[edge.to.id] = newAdjList[edge.to.id].filter(id => id !== edge.from.id);\n                return newAdjList;\n            });\n            setText(startingText);\n        }\n    }\n\n    // Function to handle dragging a node\n    const handleDrag = (e, data, node) => {\n        setDragging(true);\n        node.x = data.x;\n        node.y = data.y;\n        setNodes([...nodes]);\n    };\n\n    // Function to handle stopping the drag of a node\n    const handleDragStop = () => {\n        setTimeout(() => {\n            setDragging(false);\n        }, 0);\n    };\n    \n    // Function to start DFS\n    const startDFS = () => {\n        if(algorithmRunning|| isRemovingEdge){\n            return;\n        }\n        setIsDFS(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Node to begin DFS\");\n    }\n\n    // DFS implementatoin\n    const dfs = async (startNode) => {\n        setText(\"DFS in progress...\");\n        const visitedNodeSet = new Set();\n    \n        const dfsRecursive = async (currentNode) => {\n            if (visitedNodeSet.has(currentNode.id)) {\n                return;\n            }\n    \n            visitedNodeSet.add(currentNode.id);\n            setVisitedNodes(prev => {\n                const updatedNodes = [...prev, { id: currentNode.id, color: treeEdgeColor }];\n                return updatedNodes;\n            });\n    \n            for (let neighborId of adjList[currentNode.id]) {\n                const neighborNode = nodes.find(node => node.id === neighborId);\n                const edge = edges.find(e => \n                    (e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNode.id)\n                );\n    \n                if (edge) {\n                    const isEdgeNotBlue = edge.color !== treeEdgeColor;\n\n                    if (isEdgeNotBlue) {\n                        setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n\n                        await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n                    }\n        \n                    if (!visitedNodeSet.has(neighborId)) {\n                        setVisitedEdges(prev => [\n                            ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                            { ...edge, color: treeEdgeColor }\n                        ]);\n                        await dfsRecursive(neighborNode);\n                    } else {\n                        setVisitedEdges(prev => [\n                            ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== treeEdgeColor)),\n                            { ...edge, color: defaultEdgeColor }\n                        ]);\n                    }\n                }\n            }\n        };\n    \n        await dfsRecursive(startNode);\n    \n        setText(\"DFS Done!\");\n        setTimeout(resetEdges, 1000); \n    };\n\n    // Function to start BFS\n    const startBFS = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        setIsBFS(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Node to begin BFS\");\n    }\n\n    // BFS implementation\n    const bfs = async (startNode) => {\n        setText(\"BFS in progress...\");\n        const visitedNodeSet = new Set();\n    \n        const queue = [startNode];\n        visitedNodeSet.add(startNode.id);\n        setVisitedNodes([{ id: startNode.id, color: treeEdgeColor }]);\n    \n        while (queue.length > 0) {\n            const currentNode = queue.shift();\n    \n            for (let neighborId of adjList[currentNode.id]) {\n                const neighborNode = nodes.find(node => node.id === neighborId);\n                const edge = edges.find(e => \n                    (e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNode.id)\n                );\n    \n                if (edge) {\n                    const isEdgeNotBlue = edge.color !== treeEdgeColor;\n    \n                    if (isEdgeNotBlue) {\n                        setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n    \n                        await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n                    }\n    \n                    if (!visitedNodeSet.has(neighborId)) {\n                        visitedNodeSet.add(neighborId);\n                        queue.push(neighborNode);\n    \n                        setVisitedEdges(prev => [\n                            ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                            { ...edge, color: treeEdgeColor }\n                        ]);\n                        setVisitedNodes(prev => [...prev, { id: neighborId, color: treeEdgeColor }]);\n                    } else if (isEdgeNotBlue) {\n                        setVisitedEdges(prev => [\n                            ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== treeEdgeColor)),\n                            { ...edge, color: defaultEdgeColor }\n                        ]);\n                    }\n                }\n            }\n        }\n    \n        setText(\"BFS Done!\");\n        setTimeout(resetEdges, 1000); // Wait 1 second before resetting edges\n    };\n    \n    // Function to animate Kruskall's algorithm\n    const animateKruskalsAlgorithm = () => {\n        if (algorithmRunning || isRemovingEdge) {\n            return;\n        }\n    \n        setAlgorithmRunning(true);\n        setText(\"Running Kruskal's Algorithm...\");\n    \n        const sortedEdges = [...edges].sort((a, b) => calculateEdgeLength(a) - calculateEdgeLength(b));\n        let componentIndex = 0;\n        let currentComponentEdges = [];\n        let currentComponentNodes = [];\n        let uf;\n    \n        const visitedNodeSet = new Set();\n        const foundComponents = [];\n    \n        const dfsComponent = (currentNode, component) => {\n            if (visitedNodeSet.has(currentNode.id)) {\n                return;\n            }\n            visitedNodeSet.add(currentNode.id);\n            component.push(currentNode);\n            adjList[currentNode.id].forEach(neighborId => {\n                const neighborNode = nodes.find(node => node.id === neighborId);\n                if (!visitedNodeSet.has(neighborId)) {\n                    dfsComponent(neighborNode, component);\n                }\n            });\n        };\n    \n        nodes.forEach(node => {\n            if (!visitedNodeSet.has(node.id)) {\n                const component = [];\n                dfsComponent(node, component);\n                foundComponents.push(component);\n            }\n        });\n    \n        setComponents(foundComponents);\n    \n        const animateComponentMST = (component) => {\n            uf = new UnionFind(nodeCount); \n            currentComponentEdges = [];\n            currentComponentNodes = component.map(node => node.id);\n            let edgeIndex = 0;\n            const color = componentColors[componentIndex % componentColors.length];\n    \n            const highlightNodesAndEdges = (index) => {\n                if (index < currentComponentEdges.length) {\n                    const { from, to } = currentComponentEdges[index];\n                    setVisitedNodes(prev => [...prev, { id: from.id, color }, { id: to.id, color }]);\n                    setVisitedEdges(prev => [...prev, currentComponentEdges[index]]);\n                    setTimeout(() => highlightNodesAndEdges(index + 1), sliderValueRef.current); \n                } else {\n                    componentIndex++;\n                    if (componentIndex < foundComponents.length) {\n                        setTimeout(() => animateComponentMST(foundComponents[componentIndex]), 0); \n                    } else {\n                        setTimeout(resetEdges, 1000);\n                        setText(\"Kruskal's Algorithm completed!\");\n                    }\n                }\n            };\n    \n            const animateStep = () => {\n                if (currentComponentEdges.length === component.length - 1 || edgeIndex >= sortedEdges.length) {\n                    highlightNodesAndEdges(0);\n                    return;\n                }\n    \n                const edge = sortedEdges[edgeIndex];\n                edgeIndex++;\n    \n                if (currentComponentNodes.includes(edge.from.id) && currentComponentNodes.includes(edge.to.id) &&\n                    uf.find(edge.from.id) !== uf.find(edge.to.id)) {\n                    uf.union(edge.from.id, edge.to.id);\n                    currentComponentEdges.push({ ...edge, color });\n                }\n    \n                animateStep();\n            };\n    \n            animateStep();\n        };\n    \n        if (foundComponents.length > 0) {\n            animateComponentMST(foundComponents[0]);\n        } else {\n            console.log(\"No components found.\");\n            setAlgorithmRunning(false);\n        }\n    };\n\n     // Union-Find data structure for Kruskal's algorithm\n    class UnionFind {\n        constructor(size) {\n            this.parent = Array(size).fill(null).map((_, index) => index);\n            this.rank = Array(size).fill(0);\n        }\n\n        find(node) {\n            if (this.parent[node] !== node) {\n                this.parent[node] = this.find(this.parent[node]);\n            }\n            return this.parent[node];\n        }\n\n        union(node1, node2) {\n            const root1 = this.find(node1);\n            const root2 = this.find(node2);\n\n            if (root1 !== root2) {\n                if (this.rank[root1] > this.rank[root2]) {\n                    this.parent[root2] = root1;\n                } else if (this.rank[root1] < this.rank[root2]) {\n                    this.parent[root1] = root2;\n                } else {\n                    this.parent[root2] = root1;\n                    this.rank[root1] += 1;\n                }\n            }\n        }\n    }\n\n    // Function to start Prim's algorithm\n    const startPrim = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        setIsPrim(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Node to begin Prim's Algorithm\");\n    }\n\n    // Function to animate Prim's algorithm\n    const animatePrimsAlgorithm = async (startNode) => {\n        setText(\"Running Prim's Algorithm...\");\n        const visitedNodeSet = new Set();\n        const edgeQueue = [];\n    \n        const addEdges = (node) => {\n            visitedNodeSet.add(node.id);\n            setVisitedNodes(prev => [...prev, { id: node.id, color: treeEdgeColor }]);\n            (adjList[node.id] || []).forEach(neighborId => {\n                if (!visitedNodeSet.has(neighborId)) {\n                    const edge = edges.find(e => \n                        (e.from.id === node.id && e.to.id === neighborId) ||\n                        (e.from.id === neighborId && e.to.id === node.id)\n                    );\n                    if (edge) {\n                        edgeQueue.push({ ...edge, length: calculateEdgeLength(edge) });\n                    }\n                }\n            });\n            edgeQueue.sort((a, b) => a.length - b.length); \n        };\n    \n        const animateStep = async () => {\n            if (visitedNodeSet.size === nodes.length || edgeQueue.length === 0) {\n                setText(\"Prim's Algorithm completed!\");\n                setTimeout(resetEdges, 1000);\n                return;\n            }\n    \n            const edgesToHighlight = edgeQueue.slice(0, 1); \n            edgesToHighlight.forEach(edge => {\n                setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n            });\n    \n            await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n    \n            const edge = edgeQueue.shift();\n            const { from, to } = edge;\n            const fromInMST = visitedNodeSet.has(from.id);\n            const toInMST = visitedNodeSet.has(to.id);\n    \n            if ((fromInMST && !toInMST) || (!fromInMST && toInMST)) {\n                setVisitedEdges(prev => [\n                    ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                    { ...edge, color: treeEdgeColor }\n                ]);\n    \n                if (fromInMST && !toInMST) {\n                    addEdges(to);\n                } else if (!fromInMST && toInMST) {\n                    addEdges(from);\n                }\n            } else {\n                setVisitedEdges(prev => [\n                    ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                    { ...edge, color: defaultEdgeColor }\n                ]);\n            }\n    \n            animateStep();\n        };\n    \n        addEdges(startNode);\n        animateStep();\n    };\n    \n    // Function to set traversal mode\n    const setClickTraversal = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedTraveral(true);\n    }\n\n    // Function to set MST mode\n    const setClickMST = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedMST(true);\n    }\n\n    // Function to set Paths mode\n    const setClickPath = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedPaths(true);\n    }\n\n    // Functino to go back from algorithm selection\n    const goBack = () => {\n\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        \n        setClickedMST(false);\n        setClickedTraveral(false);\n        setClickedPaths(false);\n        setAlgorithmRunning(false);\n        setText(startingText);\n    }\n\n    // Function to find connected components in a graph\n    const findConnectedComponents = async () => {\n        if (algorithmRunning || isRemovingEdge) {\n            return;\n        }\n        setAlgorithmRunning(true);\n        setText(\"Finding connected components...\");\n        const visitedNodeSet = new Set();\n        const foundComponents = [];\n    \n        const dfsRecursive = async (currentNode, component, componentColor) => {\n            if (visitedNodeSet.has(currentNode.id)) {\n                return;\n            }\n    \n            visitedNodeSet.add(currentNode.id);\n            setVisitedNodes(prev => {\n                const updatedNodes = [...prev, { id: currentNode.id, color: componentColor }];\n                return updatedNodes;\n            });\n            component.push(currentNode);\n    \n            for (let neighborId of adjList[currentNode.id]) {\n                const neighborNode = nodes.find(node => node.id === neighborId);\n                const edge = edges.find(e => \n                    (e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNode.id)\n                );\n    \n                if (edge) {\n                    const isEdgeNotInComponentColor = edge.color !== componentColor;\n    \n                    if (isEdgeNotInComponentColor) {\n                        setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n    \n                        await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n                    }\n    \n                    if (!visitedNodeSet.has(neighborId)) {\n                        setVisitedEdges(prev => [\n                            ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                            { ...edge, color: componentColor }\n                        ]);\n                        await dfsRecursive(neighborNode, component, componentColor);\n                    } else {\n                        setVisitedEdges(prev => [\n                            ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== componentColor)),\n                            { ...edge, color: componentColor }\n                        ]);\n                    }\n                }\n            }\n        };\n    \n        for (let index = 0; index < nodes.length; index++) {\n            const node = nodes[index];\n            if (!visitedNodeSet.has(node.id)) {\n                const component = [];\n                const componentColor = componentColors[foundComponents.length % componentColors.length];\n                await dfsRecursive(node, component, componentColor);\n                foundComponents.push(component);\n            }\n        }\n    \n        setComponents(foundComponents); \n    \n        const animateComponents = (index) => {\n            if (index < foundComponents.length) {\n                const currentComponent = foundComponents[index];\n                const color = componentColors[index % componentColors.length];\n                const newVisitedNodes = [];\n                const newVisitedEdges = [];\n    \n                currentComponent.forEach(node => {\n                    newVisitedNodes.push({ id: node.id, color });\n                    adjList[node.id].forEach(neighborId => {\n                        if (currentComponent.some(n => n.id === neighborId)) {\n                            const edge = edges.find(e =>\n                                (e.from.id === node.id && e.to.id === neighborId) ||\n                                (e.from.id === neighborId && e.to.id === node.id)\n                            );\n                            if (edge && !newVisitedEdges.includes(edge)) {\n                                newVisitedEdges.push(edge);\n                            }\n                        }\n                    });\n                });\n    \n                setVisitedNodes(prev => [...prev, ...newVisitedNodes]);\n                setVisitedEdges(prev => [...prev, ...newVisitedEdges.map(edge => ({ ...edge, color }))]);\n                setTimeout(() => animateComponents(index + 1), sliderValueRef.current); \n            } else {\n                setText(\"Connected Components Found!\");\n                setTimeout(() => {\n                    resetEdges();\n                    setComponents([]);\n                }, 1000); \n            }\n        };\n    \n        animateComponents(0);\n    };\n    \n    // Function to start shortest path algorithm\n    const startShortestPath = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n\n        setIsShortestPath(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Start Node for Shortest Path\");\n    }\n\n    // Function to find the shortest path between two nodes\n    const findShortestPath = async (startNode, endNode) => {\n        const distances = {};\n        const previousNodes = {};\n        const nodesToVisit = new Set(nodes.map(node => node.id));\n        const edgesToReset = [];\n    \n        nodes.forEach(node => {\n            distances[node.id] = Infinity;\n            previousNodes[node.id] = null;\n        });\n    \n        distances[startNode.id] = 0;\n    \n        while (nodesToVisit.size > 0) {\n            const currentNodeId = [...nodesToVisit].reduce((minNodeId, nodeId) => {\n                return distances[nodeId] < distances[minNodeId] ? nodeId : minNodeId;\n            });\n    \n            if (distances[currentNodeId] === Infinity) break; \n\n            //set edge to red here?\n    \n            nodesToVisit.delete(currentNodeId);\n    \n            if (currentNodeId === endNode.id) break;\n    \n            const currentNodeDistance = distances[currentNodeId];\n    \n            for (const neighborId of adjList[currentNodeId]) {\n                if (!nodesToVisit.has(neighborId)) continue;\n    \n                const edge = edges.find(e =>\n                    (e.from.id === currentNodeId && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNodeId)\n                );\n    \n                setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n                edgesToReset.push(edge);\n                await new Promise(resolve => setTimeout(resolve, sliderValueRef.current)); \n    \n                const altDistance = currentNodeDistance + calculateEdgeLength(edge);\n    \n                if (altDistance < distances[neighborId]) {\n                    distances[neighborId] = altDistance;\n                    previousNodes[neighborId] = currentNodeId;\n                } else {\n                    setVisitedEdges(prev => {\n                        return prev.map(e =>\n                            (e.from.id === edge.from.id && e.to.id === edge.to.id) || (e.from.id === edge.to.id && e.to.id === edge.from.id)\n                                ? { ...e, color: defaultEdgeColor }\n                                : e\n                        );\n                    });\n                }\n            }\n        }\n    \n        const path = [];\n        let currentNodeId = endNode.id;\n    \n        while (currentNodeId !== null) {\n            path.unshift(currentNodeId);\n            currentNodeId = previousNodes[currentNodeId];\n        }\n\n        for (let i = 0; i < path.length - 1; i++) {\n            const nodeId = path[i];\n            const nextNodeId = path[i + 1];\n            setVisitedNodes(prev => [...prev, { id: nodeId, color: treeEdgeColor }]);\n            const edge = edges.find(e =>\n                (e.from.id === nodeId && e.to.id === nextNodeId) ||\n                (e.from.id === nextNodeId && e.to.id === nodeId)\n            );\n            setVisitedEdges(prev => prev.map(e =>\n                (e.from.id === edge.from.id && e.to.id === edge.to.id) || (e.from.id === edge.to.id && e.to.id === edge.from.id)\n                    ? { ...e, color: treeEdgeColor }\n                    : e\n            ));\n            await new Promise(resolve => setTimeout(resolve, sliderValueRef.current)); \n        }\n    \n        setVisitedNodes(prev => [...prev, { id: endNode.id, color: treeEdgeColor }]);\n\n        setVisitedEdges(prev => prev.map(e => e.color === currentEdgeColor ? { ...e, color: defaultEdgeColor } : e));\n    \n        if (path[0] === startNode.id) {\n            setTimeout(resetEdges, 1000);\n            setText(\"Shortest Path Found\");\n            setStartNode(null);\n            setEndNode(null);\n        } else {\n            setTimeout(resetEdges, 1000);\n            setText(\"No Path Found\");\n            setStartNode(null);\n            setEndNode(null);\n        }\n    };\n    \n    // Function to handle slider change\n    const handleSliderChange = (event) => {\n        const newValue = event.target.value;\n        setSliderValue(newValue);\n        sliderValueRef.current = newValue;\n    }\n\n    // Function to color graph\n    const graphColoring = async () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n\n        setAlgorithmRunning(true);\n        setText(\"Graph Coloring in progress...\");\n\n        const availableColors = componentColors;\n        const colors = {};\n\n        const colorGraph = (node) => {\n            const neighborColors = adjList[node.id].map(neighborId => colors[neighborId]);\n            for(let color of availableColors){\n                if(!neighborColors.includes(color)){\n                    colors[node.id] = color;\n                    break;\n                }\n            }\n        }\n\n        for(let node of nodes){\n            colorGraph(node);\n            setVisitedNodes(prev => [...prev, {id: node.id, color: colors[node.id]}]);\n            await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n        }\n\n        setText(\"Graph Coloring Done!\");\n        setTimeout(resetEdges, 1000);\n    }\n\n    // Function to start TSP\n    const startTSP = async () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n\n        setIsTSP(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Node to begin TSP\");\n    }\n\n    // Function to animate TSP\n    const tsp = async (node) => {\n        setText(\"Solving TSP using nearest neighbor...\");\n        const startNode = node;\n        const unvisited = new Set(nodes.map(node => node.id));\n        const visited = [];\n        const stack = [];\n        let currentNode = startNode;\n    \n        unvisited.delete(currentNode.id);\n        visited.push(currentNode);\n        setVisitedNodes([{ id: currentNode.id, color: treeEdgeColor }]);\n    \n        while (unvisited.size > 0) {\n            let nearestNode = null;\n            let shortestDistance = Infinity;\n            let currentEdge = null;\n    \n            for (let neighborId of unvisited) {\n                const neighborNode = nodes.find(node => node.id === neighborId);\n                // eslint-disable-next-line\n                const edge = edges.find(e =>\n                    (e.from.id === currentNode.id && e.to.id === neighborNode.id) ||\n                    (e.from.id === neighborNode.id && e.to.id === currentNode.id)\n                );\n    \n                if (edge) {\n                    setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n                    await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n                    const distance = calculateEdgeLength({ from: currentNode, to: neighborNode });\n                    setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)));\n                    if (distance < shortestDistance) {\n                        shortestDistance = distance;\n                        nearestNode = neighborNode;\n                        currentEdge = edge;\n                    }\n                }\n            }\n    \n            if (nearestNode && currentEdge) {\n                stack.push({ currentNode, nearestNode, shortestDistance });\n    \n                setVisitedEdges(prev => [...prev, { ...currentEdge, color: treeEdgeColor }]);\n                setVisitedNodes(prev => [...prev, { id: nearestNode.id, color: treeEdgeColor }]);\n    \n                await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n    \n                currentNode = nearestNode;\n                unvisited.delete(currentNode.id);\n                visited.push(currentNode);\n            } else {\n                const previousState = stack.pop();\n                if (previousState) {\n                    currentNode = previousState.currentNode;\n                } else {\n                    break;\n                }\n            }\n        }\n    \n    \n        setText(\"TSP Solved!\");\n        setTimeout(resetEdges, 1000);\n    };\n    \n    // JSX for rendering the component\n    return (\n        <div className=\"main-container\">\n            <div className=\"graphs-container\">\n                <div className=\"graph-content\">\n                    <div className=\"slider-container\">\n                        <h4 className=\"slider-label\">Algorithm Step Speed:</h4>\n                        <div className=\"slider-content\">\n                            <h4>100ms</h4>\n                            <input \n                                type=\"range\" \n                                min=\"100\" \n                                max=\"2000\" \n                                step=\"100\" \n                                value={sliderValue} \n                                onChange={handleSliderChange}\n                            />\n                            <h4>2000ms</h4>\n                        </div>\n                    </div>\n                    <div className=\"graph-box\">\n                    <button className=\"graph-button\" onClick={() => {setShowWeights(!showWeights)}}>\n                        {showWeights ? 'Hide Weights' : 'Show Weights'}\n                    </button>\n                    <svg className=\"edges-svg\" style={{ position: 'absolute', width: '100%', height: '100%' }}>\n                        {edges.map((edge, index) => {\n                            const midpoint = calculateMidpoint(edge);\n                            const angle = calculateAngle(edge);\n                            return (\n                                <React.Fragment key={index}>\n                                    <line\n                                        x1={edge.from.x + 10}\n                                        y1={edge.from.y + 10}\n                                        x2={edge.to.x + 10}\n                                        y2={edge.to.y + 10}\n                                        stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                        strokeWidth={isRemovingEdge ? 8 : 4}\n                                        onClick={() => handleEdgeClick(edge)}\n                                    />\n                                    {showWeights && (\n                                        <text\n                                            x={midpoint.x + 10}\n                                            y={midpoint.y + 7}\n                                            fill=\"black\"\n                                            fontSize=\"12\"\n                                            transform={`rotate(${angle}, ${midpoint.x + 10}, ${midpoint.y + 10})`}\n                                            textAnchor=\"middle\"\n                                        >\n                                            {calculateEdgeLength(edge).toFixed(2)}\n                                        </text>)}\n                                </React.Fragment>\n                            );\n                        })}\n                    </svg>\n                        {nodes.map(node => (\n                            <Draggable\n                                key={node.id}\n                                position={{ x: node.x, y: node.y }}\n                                bounds=\"parent\"\n                                onStart={handleMouseDown}\n                                onDrag={(e, data) => handleDrag(e, data, node)}\n                                onStop={handleDragStop}\n                            >\n                                <div\n                                    className=\"graph-node\"\n                                    onClick={() => handleNodeClick(node)}\n                                    style={{\n                                        border: (isTSP || isBFS || isPrim || isDFS || isShortestPath) ? (startNode && startNode.id === node.id ? 'none' : '2px solid red') : (selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none'),\n                                        backgroundColor: visitedNodes.some(vn => vn.id === node.id) ? (visitedNodes.find(vn => vn.id === node.id)?.color || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\") : 'black',\n                                        pointerEvents: 'auto',\n                                        position: 'absolute'\n                                    }}\n                                >\n                                </div>\n                            </Draggable>\n                        ))}\n                    </div>\n                    <h3 class-name=\"status-text\">{text}</h3>\n                </div>\n\n                <div className=\"button-container\">\n                    <h3>Graph Creation</h3>\n\n                    {/* Graph Creation and Updating */}\n                    {!selectedNode && (\n                    <button className=\"graph-button\" onClick={addNode}>Add Node</button>)}\n                    {!selectedNode && (\n                    <button className=\"graph-button\" onClick={generateGraph}>Generate Graph</button>)}\n                    {!selectedNode && nodes.length > 0 && (\n                    <button className=\"graph-button\" onClick={resetGraph}>Reset Graph</button>)}\n                    {!selectedNode && (edges.length >= 1) && (\n                    <button className=\"graph-button\" onClick={startRemovingEdge}>Remove Edge</button>)}\n                    \n                    {/* Graph Creation and Updating when node selected */}\n                    {selectedNode && (\n                    <button className=\"graph-button\" onClick={handleAddEdge}>Add Edge</button>)}\n                    {selectedNode && (\n                    <button className=\"graph-button\" onClick={removeNode}>Remove Node</button>)}\n\n                    {/* Traversal and MST and Path*/}\n                    {edges.length > 0 && !selectedNode &&(\n                    <h3>Algorithms</h3>)}\n                    {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                    <button className=\"graph-button\" onClick={setClickTraversal}>Traversals →</button>)}\n                    {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                    <button className=\"graph-button\" onClick={setClickMST}>MSTs →</button>)}\n                    {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                    <button className=\"graph-button\" onClick={setClickPath}>Paths →</button>)}\n\n\n                    {/* Specific Algorithms */}\n                    {clickedMST && !selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={animateKruskalsAlgorithm}>Kruskall</button>)}\n                    {clickedMST && !selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={startPrim}>Prim</button>)}\n\n                    {clickedTraversal && !selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={startDFS}>DFS</button>)}\n                    {clickedTraversal && !selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={startBFS}>BFS</button>)}\n\n                    {clickedPaths && !selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={startShortestPath}>Shortest Path</button>)}\n                    {clickedPaths && !selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={startTSP}>TSP</button>)}\n                    \n                    {!clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={findConnectedComponents}>Connected Components</button>)}\n                    {!clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={graphColoring}>Graph Coloring</button>)}\n                    \n                    \n\n                    {/* Back Button */}\n                    {(clickedTraversal || clickedMST || clickedPaths) && !selectedNode && (\n                    <button className=\"graph-button\" onClick={goBack}>← Back</button>)} \n                    \n                </div>\n                \n            </div>\n\n        </div>\n    );\n};\n\nexport default Graphs;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}