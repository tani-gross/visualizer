{"ast":null,"code":"// Union-Find data structure for Kruskal's algorithm\nclass UnionFind {\n  constructor(size) {\n    this.parent = Array(size).fill(null).map((_, index) => index);\n    this.rank = Array(size).fill(0);\n  }\n  find(node) {\n    if (this.parent[node] !== node) {\n      this.parent[node] = this.find(this.parent[node]);\n    }\n    return this.parent[node];\n  }\n  union(node1, node2) {\n    const root1 = this.find(node1);\n    const root2 = this.find(node2);\n    if (root1 !== root2) {\n      if (this.rank[root1] > this.rank[root2]) {\n        this.parent[root2] = root1;\n      } else if (this.rank[root1] < this.rank[root2]) {\n        this.parent[root1] = root2;\n      } else {\n        this.parent[root2] = root1;\n        this.rank[root1] += 1;\n      }\n    }\n  }\n}\n\n// Function to calculate edge length\nconst calculateEdgeLength = edge => {\n  const dx = edge.from.x - edge.to.x;\n  const dy = edge.from.y - edge.to.y;\n  return Math.sqrt(dx * dx + dy * dy);\n};","map":{"version":3,"names":["UnionFind","constructor","size","parent","Array","fill","map","_","index","rank","find","node","union","node1","node2","root1","root2","calculateEdgeLength","edge","dx","from","x","to","dy","y","Math","sqrt"],"sources":["/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/GraphUtils.js"],"sourcesContent":["// Union-Find data structure for Kruskal's algorithm\nclass UnionFind {\n    constructor(size) {\n        this.parent = Array(size).fill(null).map((_, index) => index);\n        this.rank = Array(size).fill(0);\n    }\n\n    find(node) {\n        if (this.parent[node] !== node) {\n            this.parent[node] = this.find(this.parent[node]);\n        }\n        return this.parent[node];\n    }\n\n    union(node1, node2) {\n        const root1 = this.find(node1);\n        const root2 = this.find(node2);\n\n        if (root1 !== root2) {\n            if (this.rank[root1] > this.rank[root2]) {\n                this.parent[root2] = root1;\n            } else if (this.rank[root1] < this.rank[root2]) {\n                this.parent[root1] = root2;\n            } else {\n                this.parent[root2] = root1;\n                this.rank[root1] += 1;\n            }\n        }\n    }\n}\n\n // Function to calculate edge length\n const calculateEdgeLength = (edge) => {\n    const dx = edge.from.x - edge.to.x;\n    const dy = edge.from.y - edge.to.y;\n    return Math.sqrt(dx * dx + dy * dy);\n};"],"mappings":"AAAA;AACA,MAAMA,SAAS,CAAC;EACZC,WAAWA,CAACC,IAAI,EAAE;IACd,IAAI,CAACC,MAAM,GAAGC,KAAK,CAACF,IAAI,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAKA,KAAK,CAAC;IAC7D,IAAI,CAACC,IAAI,GAAGL,KAAK,CAACF,IAAI,CAAC,CAACG,IAAI,CAAC,CAAC,CAAC;EACnC;EAEAK,IAAIA,CAACC,IAAI,EAAE;IACP,IAAI,IAAI,CAACR,MAAM,CAACQ,IAAI,CAAC,KAAKA,IAAI,EAAE;MAC5B,IAAI,CAACR,MAAM,CAACQ,IAAI,CAAC,GAAG,IAAI,CAACD,IAAI,CAAC,IAAI,CAACP,MAAM,CAACQ,IAAI,CAAC,CAAC;IACpD;IACA,OAAO,IAAI,CAACR,MAAM,CAACQ,IAAI,CAAC;EAC5B;EAEAC,KAAKA,CAACC,KAAK,EAAEC,KAAK,EAAE;IAChB,MAAMC,KAAK,GAAG,IAAI,CAACL,IAAI,CAACG,KAAK,CAAC;IAC9B,MAAMG,KAAK,GAAG,IAAI,CAACN,IAAI,CAACI,KAAK,CAAC;IAE9B,IAAIC,KAAK,KAAKC,KAAK,EAAE;MACjB,IAAI,IAAI,CAACP,IAAI,CAACM,KAAK,CAAC,GAAG,IAAI,CAACN,IAAI,CAACO,KAAK,CAAC,EAAE;QACrC,IAAI,CAACb,MAAM,CAACa,KAAK,CAAC,GAAGD,KAAK;MAC9B,CAAC,MAAM,IAAI,IAAI,CAACN,IAAI,CAACM,KAAK,CAAC,GAAG,IAAI,CAACN,IAAI,CAACO,KAAK,CAAC,EAAE;QAC5C,IAAI,CAACb,MAAM,CAACY,KAAK,CAAC,GAAGC,KAAK;MAC9B,CAAC,MAAM;QACH,IAAI,CAACb,MAAM,CAACa,KAAK,CAAC,GAAGD,KAAK;QAC1B,IAAI,CAACN,IAAI,CAACM,KAAK,CAAC,IAAI,CAAC;MACzB;IACJ;EACJ;AACJ;;AAEC;AACA,MAAME,mBAAmB,GAAIC,IAAI,IAAK;EACnC,MAAMC,EAAE,GAAGD,IAAI,CAACE,IAAI,CAACC,CAAC,GAAGH,IAAI,CAACI,EAAE,CAACD,CAAC;EAClC,MAAME,EAAE,GAAGL,IAAI,CAACE,IAAI,CAACI,CAAC,GAAGN,IAAI,CAACI,EAAE,CAACE,CAAC;EAClC,OAAOC,IAAI,CAACC,IAAI,CAACP,EAAE,GAAGA,EAAE,GAAGI,EAAE,GAAGA,EAAE,CAAC;AACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}