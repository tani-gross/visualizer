{"ast":null,"code":"var _jsxFileName = \"/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport Draggable from 'react-draggable';\nimport { GraphsProvider, useGraphStates } from './GraphsContext';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GraphComponent = () => {\n  _s();\n  const {\n    nodes,\n    edges,\n    adjList,\n    setVisitedNodes,\n    setVisitedEdges,\n    setAlgorithmStarted,\n    setText,\n    resetEdges,\n    setCurrentNode,\n    isPausedRef,\n    currentStepRef,\n    isStepModeRef,\n    sliderValueRef,\n    totalSliderCount,\n    componentColors,\n    setComponents,\n    algorithmRunning,\n    isRemovingEdge,\n    setRunningAlgorithm,\n    setIsDFS,\n    setAlgorithmRunning,\n    treeEdgeColor,\n    isDirected,\n    currentEdgeColor,\n    setIsPaused,\n    startNode,\n    setIsBFS,\n    setIsPrim,\n    setIsDirected,\n    defaultEdgeColor,\n    setDisablePause,\n    nodeCount,\n    setIsShortestPath,\n    setStartNode,\n    setEndNode,\n    setIsTSP,\n    sleep\n  } = useGraphStates();\n\n  // Constants for UI text and colors\n  const highlightedButtonColor = \"lightblue\";\n  const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n\n  // Use Effect to differentiate between modes\n  useEffect(() => {\n    isStepModeRef.current = isStepMode;\n  }, [isStepMode]);\n\n  // Use Effect to allow pausing mid-alg\n  useEffect(() => {\n    isPausedRef.current = isPaused;\n  }, [isPaused]);\n\n  // Use Effect to allow stopping mid-alg\n  useEffect(() => {\n    currentStepRef.current = currentStep;\n  }, [currentStep]);\n\n  // Function to set traversal mode\n  const setClickTraversal = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedTraveral(true);\n  };\n\n  // Function to set MST mode\n  const setClickMST = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedMST(true);\n  };\n\n  // Function to set Paths mode\n  const setClickPath = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedPaths(true);\n  };\n\n  // Function to go back from algorithm selection\n  const goBack = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setClickedMST(false);\n    setClickedTraveral(false);\n    setClickedPaths(false);\n    setAlgorithmRunning(false);\n    setText(startingText);\n  };\n\n  // Function to step in the algorithm\n  const nextStep = () => {\n    if (isPausedRef.current) {\n      setIsStepMode(true);\n      if (isPausedRef.current) {\n        setCurrentStep(prev => {\n          const next = prev + 1;\n          currentStepRef.current = next;\n          return next;\n        });\n      }\n      setIsPaused(false);\n      isPausedRef.current = false;\n    }\n  };\n\n  // Function to toggle button \n  const togglePlayPause = () => {\n    if (isPausedRef.current) {\n      setIsStepMode(false);\n      setIsPaused(false);\n      isPausedRef.current = false;\n      switch (runningAlgorithm) {\n        case \"DFS\":\n          setText(\"DFS in progress...\");\n          break;\n        case \"BFS\":\n          setText(\"BFS in progress...\");\n          break;\n        case \"Kruskall\":\n          setText(\"Kruskall's Algorithm in progress...\");\n          break;\n        case \"Prim\":\n          setText(\"Prim's Algorithm in progress...\");\n          break;\n        case \"SP\":\n          setText(\"Shortest Path Algorithm in progress...\");\n          break;\n        case \"TSP\":\n          setText(\"TSP in progress...\");\n          break;\n        case \"Connected\":\n          setText(\"Connected Components in progress..\");\n          break;\n        case \"Colors\":\n          setText(\"Graph Coloring in progress...\");\n          break;\n      }\n    } else {\n      setIsStepMode(false);\n      setIsPaused(true);\n      isPausedRef.current = true;\n      setText(\"Algorithm is Paused\");\n    }\n  };\n\n  // Function to switch between directed and undirected graphs\n  const toggleGraphType = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    if (isDirected) {\n      const consolidatedEdges = [];\n      const edgeSet = new Set();\n      edges.forEach(edge => {\n        const edgeKey = `${Math.min(edge.from.id, edge.to.id)}-${Math.max(edge.from.id, edge.to.id)}`;\n        if (!edgeSet.has(edgeKey)) {\n          edgeSet.add(edgeKey);\n          consolidatedEdges.push(edge);\n        }\n      });\n      const newAdjList = {};\n      consolidatedEdges.forEach(edge => {\n        if (!newAdjList[edge.from.id]) newAdjList[edge.from.id] = [];\n        if (!newAdjList[edge.to.id]) newAdjList[edge.to.id] = [];\n        newAdjList[edge.from.id].push(edge.to.id);\n        newAdjList[edge.to.id].push(edge.from.id);\n      });\n      setEdges(consolidatedEdges);\n      setAdjList(newAdjList);\n    }\n    setIsDirected(!isDirected);\n  };\n\n  // JSX for rendering the component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Graph Creation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: handleAddEdge,\n        children: \"Add Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: removeNode,\n        children: \"Remove Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: addNode,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: generateGraph,\n        children: \"Generate Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), !selectedNode && nodes.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: resetGraph,\n        children: \"Reset Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Edge Editing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: toggleGraphType,\n        children: isDirected ? 'Set Undirected' : 'Set Directed'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }, this), !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: () => {\n          if (edges.length > 0) {\n            setShowWeights(!showWeights);\n          }\n        },\n        children: showWeights ? 'Hide Weights' : 'Show Weights'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }, this), !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: startRemovingEdge,\n        children: \"Remove Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this), algorithmStarted && !disablePause && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: nextStep,\n          children: \"Next Step\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: togglePlayPause,\n          children: (isPaused || isStepMode) && !disablePause ? \"Play\" : \"Pause\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"slider-label\",\n          children: \"Algorithm Speed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Slow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"100\",\n            max: \"2000\",\n            step: \"100\",\n            value: sliderValue,\n            onChange: handleSliderChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Fast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"edges-svg\",\n          style: {\n            position: 'absolute',\n            width: '100%',\n            height: '100%'\n          },\n          children: edges.map((edge, index) => {\n            var _visitedEdges$find, _visitedEdges$find2, _visitedEdges$find3;\n            const midpoint = calculateMidpoint(edge);\n            const {\n              angle,\n              flipped\n            } = calculateAngle(edge);\n            const arrowLength = 15;\n            const arrowAngle = 30;\n            const nodeRadius = 10;\n            const dx = edge.to.x - edge.from.x;\n            const dy = edge.to.y - edge.from.y;\n            const length = Math.sqrt(dx * dx + dy * dy);\n            const unitDx = dx / length;\n            const unitDy = dy / length;\n            const baseX = edge.to.x - nodeRadius * unitDx;\n            const baseY = edge.to.y - nodeRadius * unitDy;\n            const edgeCount = edges.filter(e => e.from.id === edge.from.id && e.to.id === edge.to.id || e.from.id === edge.to.id && e.to.id === edge.from.id).length;\n            let offsetX = 0;\n            let offsetY = 0;\n            if (edgeCount > 1) {\n              offsetX = 5 * unitDy;\n              offsetY = -5 * unitDx;\n            }\n            const adjustedFromX = edge.from.x + 10 + offsetX;\n            const adjustedFromY = edge.from.y + 10 + offsetY;\n            const adjustedToX = baseX + 10 + offsetX;\n            const adjustedToY = baseY + 10 + offsetY;\n            const arrowBaseX = baseX + offsetX + 10;\n            const arrowBaseY = baseY + offsetY + 10;\n            let arrowX1, arrowY1, arrowX2, arrowY2;\n            if (flipped) {\n              arrowX1 = arrowBaseX + arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n              arrowY1 = arrowBaseY + arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n              arrowX2 = arrowBaseX + arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n              arrowY2 = arrowBaseY + arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n            } else {\n              arrowX1 = arrowBaseX - arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n              arrowY1 = arrowBaseY - arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n              arrowX2 = arrowBaseX - arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n              arrowY2 = arrowBaseY - arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n            }\n            return /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                x1: adjustedFromX,\n                y1: adjustedFromY,\n                x2: adjustedToX,\n                y2: adjustedToY,\n                stroke: ((_visitedEdges$find = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find === void 0 ? void 0 : _visitedEdges$find.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                strokeWidth: isRemovingEdge ? 8 : 4,\n                onClick: () => handleEdgeClick(edge)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 33\n              }, this), isDirected && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                  x1: adjustedToX,\n                  y1: adjustedToY,\n                  x2: arrowX1,\n                  y2: arrowY1,\n                  stroke: ((_visitedEdges$find2 = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find2 === void 0 ? void 0 : _visitedEdges$find2.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                  strokeWidth: isRemovingEdge ? 8 : 4\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 290,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n                  x1: adjustedToX,\n                  y1: adjustedToY,\n                  x2: arrowX2,\n                  y2: arrowY2,\n                  stroke: ((_visitedEdges$find3 = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find3 === void 0 ? void 0 : _visitedEdges$find3.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                  strokeWidth: isRemovingEdge ? 8 : 4\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 298,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true), showWeights && /*#__PURE__*/_jsxDEV(\"text\", {\n                x: midpoint.x + 10,\n                y: edgeCount > 1 ? midpoint.y + 2 : midpoint.y + 7,\n                fill: \"black\",\n                fontSize: \"12\",\n                transform: `rotate(${angle}, ${midpoint.x + 10}, ${midpoint.y + 10})`,\n                textAnchor: \"middle\",\n                children: Math.round(calculateEdgeLength(edge))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 17\n        }, this), nodes.map(node => {\n          var _currentNode, _visitedNodes$find;\n          return /*#__PURE__*/_jsxDEV(Draggable, {\n            position: {\n              x: node.x,\n              y: node.y\n            },\n            bounds: \"parent\",\n            onStart: handleMouseDown,\n            onDrag: (e, data) => handleDrag(e, data, node),\n            onStop: handleDragStop,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"graph-node\",\n              onClick: () => handleNodeClick(node),\n              style: {\n                border: isTSP || isBFS || isPrim || isDFS || isShortestPath ? startNode && startNode.id === node.id ? 'none' : '2px solid red' : selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none',\n                backgroundColor: node.id === ((_currentNode = currentNode) === null || _currentNode === void 0 ? void 0 : _currentNode.id) ? 'red' : visitedNodes.some(vn => vn.id === node.id) ? ((_visitedNodes$find = visitedNodes.find(vn => vn.id === node.id)) === null || _visitedNodes$find === void 0 ? void 0 : _visitedNodes$find.color) || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\" : 'black',\n                pointerEvents: 'auto',\n                position: 'absolute'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 29\n            }, this)\n          }, node.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 25\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        \"class-name\": \"status-text\",\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [edges.length > 0 && !selectedNode && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Algorithms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 17\n      }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: setClickTraversal,\n        children: \"Traversals \\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 17\n      }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: setClickMST,\n        children: \"MSTs \\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 17\n      }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: setClickPath,\n        children: \"Paths \\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 17\n      }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: animateKruskalsAlgorithm,\n        children: \"Kruskall\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 17\n      }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startPrim,\n        children: \"Prim\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 17\n      }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startDFS,\n        children: \"DFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 17\n      }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startBFS,\n        children: \"BFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 17\n      }, this), clickedPaths && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startShortestPath,\n        children: \"Shortest Path\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 17\n      }, this), clickedPaths && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startTSP,\n        children: \"TSP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 17\n      }, this), !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: graphColoring,\n        children: \"Graph Coloring\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 17\n      }, this), !isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: findConnectedComponents,\n        children: \"Connected Components\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 17\n      }, this), isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: findStrongComponents,\n        children: \"Strong Components\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 17\n      }, this), (clickedTraversal || clickedMST || clickedPaths) && !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: goBack,\n        children: \"\\u2190 Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 9\n  }, this);\n};\n_s(GraphComponent, \"CNTxyw+ua/eUkKffT/JlelW37T0=\", false, function () {\n  return [useGraphStates];\n});\n_c = GraphComponent;\nconst Graphs = () => /*#__PURE__*/_jsxDEV(GraphsProvider, {\n  children: /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 399,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 398,\n  columnNumber: 5\n}, this);\n_c2 = Graphs;\nexport default Graphs;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"Graphs\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Draggable","GraphsProvider","useGraphStates","jsxDEV","_jsxDEV","Fragment","_Fragment","GraphComponent","_s","nodes","edges","adjList","setVisitedNodes","setVisitedEdges","setAlgorithmStarted","setText","resetEdges","setCurrentNode","isPausedRef","currentStepRef","isStepModeRef","sliderValueRef","totalSliderCount","componentColors","setComponents","algorithmRunning","isRemovingEdge","setRunningAlgorithm","setIsDFS","setAlgorithmRunning","treeEdgeColor","isDirected","currentEdgeColor","setIsPaused","startNode","setIsBFS","setIsPrim","setIsDirected","defaultEdgeColor","setDisablePause","nodeCount","setIsShortestPath","setStartNode","setEndNode","setIsTSP","sleep","highlightedButtonColor","startingText","current","isStepMode","isPaused","currentStep","setClickTraversal","setClickedTraveral","setClickMST","setClickedMST","setClickPath","setClickedPaths","goBack","nextStep","setIsStepMode","setCurrentStep","prev","next","togglePlayPause","runningAlgorithm","toggleGraphType","consolidatedEdges","edgeSet","Set","forEach","edge","edgeKey","Math","min","from","id","to","max","has","add","push","newAdjList","setEdges","setAdjList","className","children","fileName","_jsxFileName","lineNumber","columnNumber","selectedNode","onClick","handleAddEdge","removeNode","addNode","generateGraph","length","resetGraph","setShowWeights","showWeights","startRemovingEdge","algorithmStarted","disablePause","type","step","value","sliderValue","onChange","handleSliderChange","style","position","width","height","map","index","_visitedEdges$find","_visitedEdges$find2","_visitedEdges$find3","midpoint","calculateMidpoint","angle","flipped","calculateAngle","arrowLength","arrowAngle","nodeRadius","dx","x","dy","y","sqrt","unitDx","unitDy","baseX","baseY","edgeCount","filter","e","offsetX","offsetY","adjustedFromX","adjustedFromY","adjustedToX","adjustedToY","arrowBaseX","arrowBaseY","arrowX1","arrowY1","arrowX2","arrowY2","cos","PI","sin","x1","y1","x2","y2","stroke","visitedEdges","find","color","strokeWidth","handleEdgeClick","fill","fontSize","transform","textAnchor","round","calculateEdgeLength","node","_currentNode","_visitedNodes$find","bounds","onStart","handleMouseDown","onDrag","data","handleDrag","onStop","handleDragStop","handleNodeClick","border","isTSP","isBFS","isPrim","isDFS","isShortestPath","backgroundColor","currentNode","visitedNodes","some","vn","components","findIndex","comp","n","pointerEvents","text","clickedTraversal","clickedMST","clickedPaths","animateKruskalsAlgorithm","startPrim","startDFS","startBFS","startShortestPath","startTSP","graphColoring","findConnectedComponents","findStrongComponents","_c","Graphs","_c2","$RefreshReg$"],"sources":["/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport Draggable from 'react-draggable';\nimport { GraphsProvider, useGraphStates } from './GraphsContext';\n\nconst GraphComponent = () => {\n    const {\n        nodes, edges, adjList, setVisitedNodes, setVisitedEdges, setAlgorithmStarted, setText, resetEdges,\n        setCurrentNode, isPausedRef, currentStepRef, isStepModeRef, sliderValueRef, totalSliderCount, \n        componentColors, setComponents, algorithmRunning, isRemovingEdge, setRunningAlgorithm, setIsDFS, setAlgorithmRunning,\n        treeEdgeColor, isDirected, currentEdgeColor, setIsPaused, startNode, setIsBFS, setIsPrim, setIsDirected, defaultEdgeColor,\n        setDisablePause, nodeCount, setIsShortestPath, setStartNode, setEndNode, setIsTSP, sleep\n    } = useGraphStates();\n\n    // Constants for UI text and colors\n    const highlightedButtonColor = \"lightblue\";\n    const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n\n    // Use Effect to differentiate between modes\n    useEffect(() => {\n        isStepModeRef.current = isStepMode;\n    }, [isStepMode]);\n\n    // Use Effect to allow pausing mid-alg\n    useEffect(() => {\n        isPausedRef.current = isPaused;\n    }, [isPaused]);\n\n    // Use Effect to allow stopping mid-alg\n    useEffect(() => {\n        currentStepRef.current = currentStep;\n    }, [currentStep]);\n\n    // Function to set traversal mode\n    const setClickTraversal = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedTraveral(true);\n    }\n\n    // Function to set MST mode\n    const setClickMST = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedMST(true);\n    }\n\n    // Function to set Paths mode\n    const setClickPath = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedPaths(true);\n    }\n\n    // Function to go back from algorithm selection\n    const goBack = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        \n        setClickedMST(false);\n        setClickedTraveral(false);\n        setClickedPaths(false);\n        setAlgorithmRunning(false);\n        setText(startingText);\n    }\n\n    // Function to step in the algorithm\n    const nextStep = () => {\n        if(isPausedRef.current){\n            setIsStepMode(true);\n            if(isPausedRef.current){\n                setCurrentStep(prev => {\n                    const next = prev + 1;\n                    currentStepRef.current = next;\n                    return next;\n                });\n            }\n            setIsPaused(false);\n            isPausedRef.current = false;\n        }\n    };\n\n    // Function to toggle button \n    const togglePlayPause = () => {\n        if (isPausedRef.current) {\n            setIsStepMode(false);\n            setIsPaused(false);\n            isPausedRef.current = false;\n            switch (runningAlgorithm) {\n                case \"DFS\":\n                    setText(\"DFS in progress...\")\n                    break;\n                case \"BFS\":\n                    setText(\"BFS in progress...\")\n                    break;\n                case \"Kruskall\":\n                    setText(\"Kruskall's Algorithm in progress...\")\n                    break;\n                case \"Prim\":\n                    setText(\"Prim's Algorithm in progress...\")\n                    break;\n                case \"SP\":\n                    setText(\"Shortest Path Algorithm in progress...\")\n                    break;\n                case \"TSP\":\n                    setText(\"TSP in progress...\")\n                    break;\n                case \"Connected\":\n                    setText(\"Connected Components in progress..\")\n                    break;\n                case \"Colors\":\n                    setText(\"Graph Coloring in progress...\")\n                    break;\n                }\n        } else {\n            setIsStepMode(false);\n            setIsPaused(true);\n            isPausedRef.current = true;\n            setText(\"Algorithm is Paused\");\n        }\n    };\n    \n    // Function to switch between directed and undirected graphs\n    const toggleGraphType = () => {\n        if(algorithmRunning){\n            return;\n        }\n        if (isDirected) {\n            const consolidatedEdges = [];\n            const edgeSet = new Set();\n    \n            edges.forEach(edge => {\n                const edgeKey = `${Math.min(edge.from.id, edge.to.id)}-${Math.max(edge.from.id, edge.to.id)}`;\n                if (!edgeSet.has(edgeKey)) {\n                    edgeSet.add(edgeKey);\n                    consolidatedEdges.push(edge);\n                }\n            });\n    \n            const newAdjList = {};\n            consolidatedEdges.forEach(edge => {\n                if (!newAdjList[edge.from.id]) newAdjList[edge.from.id] = [];\n                if (!newAdjList[edge.to.id]) newAdjList[edge.to.id] = [];\n                newAdjList[edge.from.id].push(edge.to.id);\n                newAdjList[edge.to.id].push(edge.from.id);\n            });\n    \n            setEdges(consolidatedEdges);\n            setAdjList(newAdjList);\n        }\n        setIsDirected(!isDirected);\n    }\n\n    // JSX for rendering the component\n    return (\n        <div className=\"main-container\">\n            <div className=\"button-container\">\n                <h3>Graph Creation</h3>\n\n                {/* Graph Creation and Updating when node selected */}\n                {selectedNode && (\n                <button className=\"graph-button\" onClick={handleAddEdge}>Add Edge</button>)}\n                {selectedNode && (\n                <button className=\"graph-button\" onClick={removeNode}>Remove Node</button>)}\n\n                {/* Graph Creation and Updating */}\n                {!selectedNode && (\n                <button className=\"graph-button\" onClick={addNode}>Add Node</button>)}\n                {!selectedNode && (\n                <button className=\"graph-button\" onClick={generateGraph}>Generate Graph</button>)}\n                {!selectedNode && nodes.length > 0 && (\n                <button className=\"graph-button\" onClick={resetGraph}>Reset Graph</button>)}\n\n                {/* Edge Editing */}\n                {!selectedNode && (\n                    <h3>Edge Editing</h3>)}\n                {!selectedNode && (\n                    <button className=\"graph-button\" onClick={toggleGraphType}>\n                        {isDirected ? 'Set Undirected' : 'Set Directed'}\n                    </button>)}\n                {!selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={() => {if(edges.length>0){setShowWeights(!showWeights)}}}>\n                        {showWeights ? 'Hide Weights' : 'Show Weights'}\n                    </button>)}\n                {!selectedNode && edges.length > 0 && (\n                <button className=\"graph-button\" onClick={startRemovingEdge}>Remove Edge</button>)}\n\n                \n                {algorithmStarted && !disablePause && (\n                    <>\n                        <h3>Control</h3>\n                        <button className=\"graph-button\" onClick={nextStep}>Next Step</button>\n                        <button className=\"graph-button\" onClick={togglePlayPause}>\n                            {((isPaused || isStepMode) && !disablePause) ? \"Play\" : \"Pause\"}\n                        </button>\n                    </>\n                )}\n\n            </div>\n                \n            <div className=\"graph-content\">\n                <div className=\"slider-container\">\n                    <h4 className=\"slider-label\">Algorithm Speed</h4>\n                    <div className=\"slider-content\">\n                        <h4>Slow</h4>\n                        <input \n                            type=\"range\" \n                            min=\"100\" \n                            max=\"2000\" \n                            step=\"100\" \n                            value={sliderValue} \n                            onChange={handleSliderChange}\n                        />\n                        <h4>Fast</h4>\n                    </div>\n                </div>\n                <div className=\"graph-box\">\n                <svg className=\"edges-svg\" style={{ position: 'absolute', width: '100%', height: '100%' }}>\n                    {edges.map((edge, index) => {\n                        const midpoint = calculateMidpoint(edge);\n                        const { angle, flipped } = calculateAngle(edge);\n                        const arrowLength = 15;\n                        const arrowAngle = 30;\n                        const nodeRadius = 10;\n                \n                        \n                        const dx = edge.to.x - edge.from.x;\n                        const dy = edge.to.y - edge.from.y;\n                        const length = Math.sqrt(dx * dx + dy * dy);\n                        const unitDx = dx / length;\n                        const unitDy = dy / length;\n                        \n                        const baseX = edge.to.x - nodeRadius * unitDx;\n                        const baseY = edge.to.y - nodeRadius * unitDy;\n                        \n                        const edgeCount = edges.filter(e => \n                            (e.from.id === edge.from.id && e.to.id === edge.to.id) || \n                            (e.from.id === edge.to.id && e.to.id === edge.from.id)\n                        ).length;\n\n                        let offsetX = 0;\n                        let offsetY = 0;\n\n                        if (edgeCount > 1) {\n                            offsetX = 5 * unitDy; \n                            offsetY = -5 * unitDx;\n                        }\n\n                        const adjustedFromX = edge.from.x + 10 + offsetX;\n                        const adjustedFromY = edge.from.y + 10 + offsetY;\n                        const adjustedToX = baseX + 10 + offsetX ;\n                        const adjustedToY = baseY + 10 + offsetY;\n\n                        const arrowBaseX = baseX + offsetX + 10;\n                        const arrowBaseY = baseY + offsetY + 10;\n                \n                        let arrowX1, arrowY1, arrowX2, arrowY2;\n                        if (flipped) {\n                            arrowX1 = arrowBaseX + arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                            arrowY1 = arrowBaseY + arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n                            arrowX2 = arrowBaseX + arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                            arrowY2 = arrowBaseY + arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n                        } else {\n                            arrowX1 = arrowBaseX - arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                            arrowY1 = arrowBaseY - arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n                            arrowX2 = arrowBaseX - arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                            arrowY2 = arrowBaseY - arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n                        }\n\n\n                        return (\n                            <React.Fragment key={index}>\n                                <line\n                                    x1={adjustedFromX}\n                                    y1={adjustedFromY}\n                                    x2={adjustedToX}\n                                    y2={adjustedToY}\n                                    stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                    strokeWidth={isRemovingEdge ? 8 : 4}\n                                    onClick={() => handleEdgeClick(edge)}\n                                />\n                                {isDirected && (\n                                   <>\n                                        <line\n                                            x1={adjustedToX}\n                                            y1={adjustedToY}\n                                            x2={arrowX1}\n                                            y2={arrowY1}\n                                            stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                            strokeWidth={isRemovingEdge ? 8 : 4}\n                                        />\n                                        <line\n                                           x1={adjustedToX}\n                                           y1={adjustedToY}\n                                           x2={arrowX2}\n                                           y2={arrowY2}\n                                            stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                            strokeWidth={isRemovingEdge ? 8 : 4}\n                                        />\n                                    </>\n                                )}\n                                {showWeights && (\n                                    <text\n                                        x={midpoint.x + 10}\n                                        y={edgeCount > 1 ? midpoint.y + 2 : midpoint.y + 7}\n                                        fill=\"black\"\n                                        fontSize=\"12\"\n                                        transform={`rotate(${angle}, ${midpoint.x + 10}, ${midpoint.y + 10})`}\n                                        textAnchor=\"middle\"\n                                    >\n                                        {Math.round(calculateEdgeLength(edge))}\n                                    </text>)}\n                            </React.Fragment>\n                        );\n                    })}\n                </svg>\n                    {nodes.map(node => (\n                        <Draggable\n                            key={node.id}\n                            position={{ x: node.x, y: node.y }}\n                            bounds=\"parent\"\n                            onStart={handleMouseDown}\n                            onDrag={(e, data) => handleDrag(e, data, node)}\n                            onStop={handleDragStop}\n                        >\n                            <div\n                                className=\"graph-node\"\n                                onClick={() => handleNodeClick(node)}\n                                style={{\n                                    border: (isTSP || isBFS || isPrim || isDFS || isShortestPath) ? (startNode && startNode.id === node.id ? 'none' : '2px solid red') : (selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none'),\n                                    backgroundColor: \n                                    node.id === currentNode?.id ? 'red' : \n                                    visitedNodes.some(vn => vn.id === node.id) ? \n                                        (visitedNodes.find(vn => vn.id === node.id)?.color || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\") \n                                        : 'black',\n                                    pointerEvents: 'auto',\n                                    position: 'absolute'\n                                }}\n                            >\n                            </div>\n                        </Draggable>\n                    ))}\n                </div>\n                <h3 class-name=\"status-text\">{text}</h3>\n            </div>\n\n            <div className=\"button-container\">    \n                {/* Traversal and MST and Path*/}\n                {edges.length > 0 && !selectedNode &&(\n                <h3>Algorithms</h3>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickTraversal}>Traversals →</button>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickMST}>MSTs →</button>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickPath}>Paths →</button>)}\n\n\n                {/* Specific Algorithms */}\n                {clickedMST && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={animateKruskalsAlgorithm}>Kruskall</button>)}\n                {clickedMST && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startPrim}>Prim</button>)}\n\n                {clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\", backgroundColor: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startDFS}>DFS</button>)}\n                {clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startBFS}>BFS</button>)}\n\n                {clickedPaths && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startShortestPath}>Shortest Path</button>)}\n                {clickedPaths && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startTSP}>TSP</button>)}\n                \n                {!clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={graphColoring}>Graph Coloring</button>)}\n                {!isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={findConnectedComponents}>Connected Components</button>)}\n                {isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={findStrongComponents}>Strong Components</button>)}\n\n                {/* Back Button */}\n                {(clickedTraversal || clickedMST || clickedPaths) && !selectedNode && (\n                <button className=\"graph-button\" onClick={goBack}>← Back</button>)} \n                \n            </div>\n        </div>\n    );\n}\n\nconst Graphs = () => (\n    <GraphsProvider>\n        <GraphComponent />\n    </GraphsProvider>\n)\n\nexport default Graphs;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}