{"ast":null,"code":"var _jsxFileName = \"/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport Draggable from 'react-draggable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graphs = () => {\n  _s();\n  const [text, setText] = useState(\"Add Node or Generate Graph to Begin\");\n  const [nodes, setNodes] = useState([]);\n  const [nodeCount, setNodeCount] = useState(0);\n  const [edges, setEdges] = useState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isAddingEdge, setIsAddingEdge] = useState(false);\n  const [dragging, setDragging] = useState(false);\n  const [isRemovingEdge, setIsRemovingEdge] = useState(false);\n  // eslint-disable-next-line\n  const [visitedNodes, setVisitedNodes] = useState([]);\n  const [visitedEdges, setVisitedEdges] = useState([]);\n  const [adjList, setAdjList] = useState([]);\n  const [clickedTraversal, setClickedTraveral] = useState(false);\n  const [clickedMST, setClickedMST] = useState(false);\n  const [isDFS, setIsDFS] = useState(false);\n  const [isBFS, setIsBFS] = useState(false);\n  const [isPrim, setIsPrim] = useState(false);\n  const [algorithmRunning, setAlgorithmRunning] = useState(false);\n  const [isShortestPath, setIsShortestPath] = useState(false);\n  const [startNode, setStartNode] = useState(null);\n  const [endNode, setEndNode] = useState(null);\n  const [componentColors] = useState([\"blue\", \"green\", \"orange\", \"purple\", \"pink\"]);\n  const [components, setComponents] = useState([]);\n  const [sliderValue, setSliderValue] = useState(250);\n  const sliderValueRef = useRef(sliderValue);\n  const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n  const treeEdgeColor = \"blue\";\n  const currentEdgeColor = \"red\";\n  const defaultEdgeColor = \"gray\";\n  const addNode = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    if (nodes.length >= 20) {\n      alert(\"too many nodes\");\n      return;\n    }\n    setText(startingText);\n    const newNode = {\n      id: nodeCount,\n      x: Math.random() * 480,\n      y: Math.random() * 480\n    };\n    setNodes([...nodes, newNode]);\n    setAdjList(prevAdjList => ({\n      ...prevAdjList,\n      [newNode.id]: []\n    }));\n    setNodeCount(nodeCount + 1);\n  };\n  const resetGraph = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setNodes([]);\n    setEdges([]);\n    setClickedMST(false);\n    setClickedTraveral(false);\n    setIsRemovingEdge(false);\n    setText(startingText);\n  };\n  const removeNode = () => {\n    if (selectedNode == null) return;\n\n    // Remove the selected node and any connected edges\n    setNodes(nodes.filter(node => node.id !== selectedNode.id));\n    setEdges(edges.filter(edge => edge.from.id !== selectedNode.id && edge.to.id !== selectedNode.id));\n    setAdjList(prevAdjList => {\n      const newAdjList = {\n        ...prevAdjList\n      };\n      delete newAdjList[selectedNode.id];\n      for (const key in newAdjList) {\n        newAdjList[key] = newAdjList[key].filter(id => id !== selectedNode.id);\n      }\n      return newAdjList;\n    });\n    setSelectedNode(null);\n  };\n  const handleNodeClick = node => {\n    if (dragging) {\n      return;\n    }\n    if (isAddingEdge) {\n      if (selectedNode && selectedNode.id !== node.id) {\n        const edgeExists = edges.some(edge => edge.from.id === selectedNode.id && edge.to.id === node.id || edge.from.id === node.id && edge.to.id === selectedNode.id);\n        if (!edgeExists) {\n          const newEdge = {\n            from: selectedNode,\n            to: node\n          };\n          setEdges(prevEdges => [...prevEdges, newEdge]);\n          setAdjList(prevAdjList => {\n            const newAdjList = {\n              ...prevAdjList\n            };\n            if (!newAdjList[selectedNode.id]) newAdjList[selectedNode.id] = [];\n            if (!newAdjList[node.id]) newAdjList[node.id] = [];\n            newAdjList[selectedNode.id].push(node.id);\n            newAdjList[node.id].push(selectedNode.id);\n            return newAdjList;\n          });\n        }\n        setIsAddingEdge(false);\n        setSelectedNode(null);\n      } else if (selectedNode && selectedNode.id === node.id) {\n        setSelectedNode(null);\n        setIsAddingEdge(false);\n      }\n      setText(startingText);\n    } else if (isDFS) {\n      setVisitedNodes([]);\n      setVisitedEdges([]);\n      dfs(node);\n      setIsDFS(false);\n    } else if (isBFS) {\n      setVisitedNodes([]);\n      setVisitedEdges([]);\n      bfs(node);\n      setIsBFS(false);\n    } else if (isPrim) {\n      setIsPrim(false);\n      animatePrimsAlgorithm(node);\n    } else if (isShortestPath) {\n      if (!startNode) {\n        setStartNode(node);\n        setText(\"Select End Node for Shortest Path\");\n      } else if (!endNode) {\n        setEndNode(node);\n        setText(\"Finding Shortest Path...\");\n        findShortestPath(startNode, node);\n        setIsShortestPath(false);\n      }\n    } else {\n      if (selectedNode && selectedNode.id === node.id) {\n        setSelectedNode(null); // Unhighlight and remove selection\n        setText(startingText);\n      } else {\n        setSelectedNode(node);\n      }\n    }\n  };\n  const handleMouseDown = () => {\n    setDragging(false);\n  };\n  const handleAddEdge = () => {\n    if (selectedNode === null) return;\n    if (nodes.length * (nodes.length - 1) / 2 === edges.length) {\n      alert(\"cannot add another edge\");\n      return;\n    }\n    if (nodes.length < 2) {\n      alert(\"You need at least two nodes to add an edge.\");\n      return;\n    }\n    setIsAddingEdge(true);\n    setText(\"Click another node to add edge\");\n  };\n  const handleEdgeClick = edge => {\n    if (isRemovingEdge) {\n      setEdges(edges.filter(e => e !== edge));\n      setIsRemovingEdge(false);\n      setAdjList(prevAdjList => {\n        const newAdjList = {\n          ...prevAdjList\n        };\n        newAdjList[edge.from.id] = newAdjList[edge.from.id].filter(id => id !== edge.to.id);\n        newAdjList[edge.to.id] = newAdjList[edge.to.id].filter(id => id !== edge.from.id);\n        return newAdjList;\n      });\n      setText(startingText);\n    }\n  };\n  const startRemovingEdge = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    if (isRemovingEdge) {\n      setIsRemovingEdge(false);\n      setText(\"\");\n      return;\n    }\n    if (edges.length < 1) {\n      alert(\"must be at least one edge\");\n      return;\n    }\n    setText(\"Click on an edge to remove it\");\n    setIsRemovingEdge(true);\n  };\n  const handleDrag = (e, data, node) => {\n    setDragging(true);\n    const updatedX = data.x;\n    const updatedY = data.y;\n    const nodeRadius = 20;\n    const isColliding = nodes.some(n => {\n      n.id !== node.id && Math.sqrt((updatedX - n.x) ** 2 + (updatedY - n.y) ** 2) < 2 * nodeRadius;\n    });\n    if (!isColliding) {\n      node.x = data.x;\n      node.y = data.y;\n      setNodes([...nodes]);\n    }\n  };\n  const handleDragStop = () => {\n    // Allow some time for the onClick to fire if it was just a click\n    setTimeout(() => {\n      setDragging(false);\n    }, 0);\n  };\n  const startDFS = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setIsDFS(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Node to begin DFS\");\n  };\n  const startBFS = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setIsBFS(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Node to begin BFS\");\n  };\n  const dfs = async startNode => {\n    setText(\"DFS in progress...\");\n    const visitedNodeSet = new Set();\n    const dfsRecursive = async currentNode => {\n      if (visitedNodeSet.has(currentNode.id)) {\n        return;\n      }\n      visitedNodeSet.add(currentNode.id);\n      setVisitedNodes(prev => {\n        const updatedNodes = [...prev, {\n          id: currentNode.id,\n          color: treeEdgeColor\n        }];\n        return updatedNodes;\n      });\n      for (let neighborId of adjList[currentNode.id]) {\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        const edge = edges.find(e => e.from.id === currentNode.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNode.id);\n        if (edge) {\n          // Check if the edge is not blue\n          const isEdgeNotBlue = edge.color !== treeEdgeColor;\n          if (isEdgeNotBlue) {\n            // Highlight the current edge\n            setVisitedEdges(prev => [...prev, {\n              ...edge,\n              color: currentEdgeColor\n            }]);\n\n            // Wait for the specified interval if the edge is about to be highlighted\n            await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n          }\n          if (!visitedNodeSet.has(neighborId)) {\n            // Confirm the edge and change it to the tree edge color immediately\n            setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n              ...edge,\n              color: treeEdgeColor\n            }]);\n            await dfsRecursive(neighborNode);\n          } else {\n            // If the edge does not lead to an undiscovered node, revert it to default color\n            setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== treeEdgeColor)), {\n              ...edge,\n              color: defaultEdgeColor\n            }]);\n          }\n        }\n      }\n    };\n    await dfsRecursive(startNode);\n    setAlgorithmRunning(false);\n    setText(\"DFS Done!\");\n    setTimeout(resetEdges, 1000); // Wait 1 second before resetting edges\n  };\n  const bfs = async startNode => {\n    setText(\"BFS in progress...\");\n    const visitedNodeSet = new Set();\n    const queue = [startNode];\n    visitedNodeSet.add(startNode.id);\n    setVisitedNodes([{\n      id: startNode.id,\n      color: treeEdgeColor\n    }]);\n    while (queue.length > 0) {\n      const currentNode = queue.shift();\n      for (let neighborId of adjList[currentNode.id]) {\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        const edge = edges.find(e => e.from.id === currentNode.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNode.id);\n        if (edge) {\n          // Check if the edge is not blue\n          const isEdgeNotBlue = edge.color !== treeEdgeColor;\n          if (isEdgeNotBlue) {\n            // Highlight the current edge\n            setVisitedEdges(prev => [...prev, {\n              ...edge,\n              color: currentEdgeColor\n            }]);\n\n            // Wait for the specified interval if the edge is about to be highlighted\n            await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n          }\n          if (!visitedNodeSet.has(neighborId)) {\n            visitedNodeSet.add(neighborId);\n            queue.push(neighborNode);\n\n            // Confirm the edge and change it to the tree edge color immediately\n            setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n              ...edge,\n              color: treeEdgeColor\n            }]);\n            setVisitedNodes(prev => [...prev, {\n              id: neighborId,\n              color: treeEdgeColor\n            }]);\n          } else if (isEdgeNotBlue) {\n            // If the edge does not lead to an undiscovered node, revert it to default color\n            setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== treeEdgeColor)), {\n              ...edge,\n              color: defaultEdgeColor\n            }]);\n          }\n        }\n      }\n    }\n    setAlgorithmRunning(false);\n    setText(\"BFS Done!\");\n    setTimeout(resetEdges, 1000); // Wait 1 second before resetting edges\n  };\n  const resetEdges = () => {\n    setVisitedEdges([]);\n    setVisitedNodes([]);\n    setText(startingText);\n  };\n  const generateGraph = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    var numNodes = 0;\n    var numEdges = -1;\n    do {\n      const response = prompt(\"Enter the number of nodes:\", \"\");\n      if (isNaN(response)) {\n        alert(\"Invalid input. Please enter numbers only\");\n        continue;\n      }\n      if (response <= 0 || response > 20) {\n        alert(\"Invalid input. Number of nodes must be between 1 and 20\");\n        continue;\n      }\n      numNodes = response;\n    } while (numNodes === 0);\n    do {\n      const response = prompt(\"Enter the number of edges:\", \"\");\n      if (isNaN(response)) {\n        alert(\"Invalid input. Please enter numbers only\");\n        continue;\n      }\n      if (response > numNodes * (numNodes - 1) / 2) {\n        alert(\"Invalid input. Too many edges for the graph\");\n        continue;\n      }\n      if (response < 0) {\n        alert(\"Invalid input. Not enough edges\");\n        continue;\n      }\n      numEdges = response;\n    } while (numEdges === -1);\n\n    // Clear current graph\n    setNodes([]);\n    setEdges([]);\n    setAdjList({});\n    setNodeCount(0);\n    setVisitedNodes([]);\n    setVisitedEdges([]);\n    setSelectedNode(null);\n    setText(startingText);\n    const newNodes = [];\n    const newEdges = [];\n    const newAdjList = {};\n\n    // Calculate grid size\n    const gridSize = Math.ceil(Math.sqrt(numNodes));\n    const areaWidth = 500; // Width of the area\n    const areaHeight = 500; // Height of the area\n    const margin = 10; // Margin to keep nodes within the grid\n    const gridSpacingX = (areaWidth - 2 * margin) / gridSize;\n    const gridSpacingY = (areaHeight - 2 * margin) / gridSize;\n\n    // Generate random nodes\n    for (let i = 0; i < numNodes; i++) {\n      const row = Math.floor(i / gridSize);\n      const col = i % gridSize;\n      const x = margin + col * gridSpacingX + Math.random() * gridSpacingX * 0.9;\n      const y = margin + row * gridSpacingY + Math.random() * gridSpacingY * 0.9;\n      const newNode = {\n        id: i,\n        x: x,\n        y: y\n      };\n      newNodes.push(newNode);\n      newAdjList[i] = [];\n    }\n\n    // Generate random edges\n    while (newEdges.length < numEdges) {\n      const from = newNodes[Math.floor(Math.random() * numNodes)];\n      const to = newNodes[Math.floor(Math.random() * numNodes)];\n      if (from.id !== to.id) {\n        const edgeExists = newEdges.some(edge => edge.from.id === from.id && edge.to.id === to.id || edge.from.id === to.id && edge.to.id === from.id);\n        if (!edgeExists) {\n          const newEdge = {\n            from,\n            to\n          };\n          newEdges.push(newEdge);\n          newAdjList[from.id].push(to.id);\n          newAdjList[to.id].push(from.id);\n        }\n      }\n    }\n    setNodes(newNodes);\n    setEdges(newEdges);\n    setAdjList(newAdjList);\n    setNodeCount(newNodes.length);\n  };\n  const animateKruskalsAlgorithm = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setAlgorithmRunning(true);\n    setText(\"Running Kruskal's Algorithm...\");\n    const sortedEdges = [...edges].sort((a, b) => calculateEdgeLength(a) - calculateEdgeLength(b));\n    let componentIndex = 0;\n    let currentComponentEdges = [];\n    let currentComponentNodes = [];\n    let uf;\n\n    // Find all components first\n    const visitedNodeSet = new Set();\n    const foundComponents = [];\n    const dfsComponent = (currentNode, component) => {\n      if (visitedNodeSet.has(currentNode.id)) {\n        return;\n      }\n      visitedNodeSet.add(currentNode.id);\n      component.push(currentNode);\n      adjList[currentNode.id].forEach(neighborId => {\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        if (!visitedNodeSet.has(neighborId)) {\n          dfsComponent(neighborNode, component);\n        }\n      });\n    };\n    nodes.forEach(node => {\n      if (!visitedNodeSet.has(node.id)) {\n        const component = [];\n        dfsComponent(node, component);\n        foundComponents.push(component);\n      }\n    });\n    setComponents(foundComponents);\n    const animateComponentMST = component => {\n      uf = new UnionFind(nodeCount); // Reset Union-Find for each component\n      currentComponentEdges = [];\n      currentComponentNodes = component.map(node => node.id);\n      let edgeIndex = 0;\n      const color = componentColors[componentIndex % componentColors.length];\n      const highlightNodesAndEdges = index => {\n        if (index < currentComponentEdges.length) {\n          const {\n            from,\n            to\n          } = currentComponentEdges[index];\n          setVisitedNodes(prev => [...prev, {\n            id: from.id,\n            color\n          }, {\n            id: to.id,\n            color\n          }]);\n          setVisitedEdges(prev => [...prev, currentComponentEdges[index]]);\n          setTimeout(() => highlightNodesAndEdges(index + 1), sliderValueRef.current); // Adjust the interval as needed\n        } else {\n          componentIndex++;\n          if (componentIndex < foundComponents.length) {\n            setTimeout(() => animateComponentMST(foundComponents[componentIndex]), 0); // Adjust the interval as needed\n          } else {\n            setTimeout(resetEdges, 1000);\n            setAlgorithmRunning(false);\n            setText(\"Kruskal's Algorithm completed!\");\n          }\n        }\n      };\n      const animateStep = () => {\n        if (currentComponentEdges.length === component.length - 1 || edgeIndex >= sortedEdges.length) {\n          highlightNodesAndEdges(0);\n          return;\n        }\n        const edge = sortedEdges[edgeIndex];\n        edgeIndex++;\n        if (currentComponentNodes.includes(edge.from.id) && currentComponentNodes.includes(edge.to.id) && uf.find(edge.from.id) !== uf.find(edge.to.id)) {\n          uf.union(edge.from.id, edge.to.id);\n          currentComponentEdges.push({\n            ...edge,\n            color\n          });\n        }\n        animateStep();\n      };\n      animateStep();\n    };\n    if (foundComponents.length > 0) {\n      animateComponentMST(foundComponents[0]);\n    } else {\n      console.log(\"No components found.\");\n      setAlgorithmRunning(false);\n    }\n  };\n  class UnionFind {\n    constructor(size) {\n      this.parent = Array(size).fill(null).map((_, index) => index);\n      this.rank = Array(size).fill(0);\n    }\n    find(node) {\n      if (this.parent[node] !== node) {\n        this.parent[node] = this.find(this.parent[node]); // Path compression\n      }\n      return this.parent[node];\n    }\n    union(node1, node2) {\n      const root1 = this.find(node1);\n      const root2 = this.find(node2);\n      if (root1 !== root2) {\n        if (this.rank[root1] > this.rank[root2]) {\n          this.parent[root2] = root1;\n        } else if (this.rank[root1] < this.rank[root2]) {\n          this.parent[root1] = root2;\n        } else {\n          this.parent[root2] = root1;\n          this.rank[root1] += 1;\n        }\n      }\n    }\n  }\n  const startPrim = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setIsPrim(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Node to begin Prim's Algorithm\");\n  };\n  const animatePrimsAlgorithm = async startNode => {\n    setText(\"Running Prim's Algorithm...\");\n    const visitedNodeSet = new Set();\n    const edgeQueue = [];\n    const addEdges = node => {\n      visitedNodeSet.add(node.id);\n      setVisitedNodes(prev => [...prev, {\n        id: node.id,\n        color: treeEdgeColor\n      }]);\n      (adjList[node.id] || []).forEach(neighborId => {\n        if (!visitedNodeSet.has(neighborId)) {\n          const edge = edges.find(e => e.from.id === node.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === node.id);\n          if (edge) {\n            edgeQueue.push({\n              ...edge,\n              length: calculateEdgeLength(edge)\n            });\n          }\n        }\n      });\n      edgeQueue.sort((a, b) => a.length - b.length); // Sort edges by length\n    };\n    const animateStep = async () => {\n      if (visitedNodeSet.size === nodes.length || edgeQueue.length === 0) {\n        setText(\"Prim's Algorithm completed!\");\n        setTimeout(() => {\n          resetEdges();\n          setAlgorithmRunning(false);\n        }, 1000); // Wait 1 second before resetting edges\n        return;\n      }\n      const edgesToHighlight = edgeQueue.slice(0, 1); // Get the next edge to process\n      edgesToHighlight.forEach(edge => {\n        // Highlight the current edge in red\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: currentEdgeColor\n        }]);\n      });\n\n      // Wait for the specified interval to show the edges being processed\n      await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n      const edge = edgeQueue.shift();\n      const {\n        from,\n        to\n      } = edge;\n      const fromInMST = visitedNodeSet.has(from.id);\n      const toInMST = visitedNodeSet.has(to.id);\n      if (fromInMST && !toInMST || !fromInMST && toInMST) {\n        // Confirm the edge and change it to the tree edge color\n        setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n          ...edge,\n          color: treeEdgeColor\n        }]);\n        if (fromInMST && !toInMST) {\n          addEdges(to);\n        } else if (!fromInMST && toInMST) {\n          addEdges(from);\n        }\n      } else {\n        // Revert the edge color to default if it is not added to the MST\n        setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n          ...edge,\n          color: defaultEdgeColor\n        }]);\n      }\n      animateStep();\n    };\n    addEdges(startNode);\n    animateStep();\n  };\n  const setClickTraversal = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedTraveral(true);\n  };\n  const setClickMST = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedMST(true);\n  };\n  const goBack = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setClickedMST(false);\n    setClickedTraveral(false);\n    setAlgorithmRunning(false);\n    setText(startingText);\n  };\n  const findConnectedComponents = async () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setAlgorithmRunning(true);\n    setText(\"Finding connected components...\");\n    const visitedNodeSet = new Set();\n    const foundComponents = [];\n    const dfsRecursive = async (currentNode, component, componentColor) => {\n      if (visitedNodeSet.has(currentNode.id)) {\n        return;\n      }\n      visitedNodeSet.add(currentNode.id);\n      setVisitedNodes(prev => {\n        const updatedNodes = [...prev, {\n          id: currentNode.id,\n          color: componentColor\n        }];\n        return updatedNodes;\n      });\n      component.push(currentNode);\n      for (let neighborId of adjList[currentNode.id]) {\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        const edge = edges.find(e => e.from.id === currentNode.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNode.id);\n        if (edge) {\n          // Check if the edge is not already in the component color\n          const isEdgeNotInComponentColor = edge.color !== componentColor;\n          if (isEdgeNotInComponentColor) {\n            // Highlight the current edge in red\n            setVisitedEdges(prev => [...prev, {\n              ...edge,\n              color: currentEdgeColor\n            }]);\n\n            // Wait for the specified interval if the edge is about to be highlighted\n            await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n          }\n          if (!visitedNodeSet.has(neighborId)) {\n            // Confirm the edge and change it to the component color immediately\n            setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n              ...edge,\n              color: componentColor\n            }]);\n            await dfsRecursive(neighborNode, component, componentColor);\n          } else {\n            // If the edge does not lead to an undiscovered node, change it to component color\n            setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== componentColor)), {\n              ...edge,\n              color: componentColor\n            }]);\n          }\n        }\n      }\n    };\n    for (let index = 0; index < nodes.length; index++) {\n      const node = nodes[index];\n      if (!visitedNodeSet.has(node.id)) {\n        const component = [];\n        const componentColor = componentColors[foundComponents.length % componentColors.length];\n        await dfsRecursive(node, component, componentColor);\n        foundComponents.push(component);\n      }\n    }\n    setComponents(foundComponents); // Store components in the state\n\n    const animateComponents = index => {\n      if (index < foundComponents.length) {\n        const currentComponent = foundComponents[index];\n        const color = componentColors[index % componentColors.length];\n        const newVisitedNodes = [];\n        const newVisitedEdges = [];\n        currentComponent.forEach(node => {\n          newVisitedNodes.push({\n            id: node.id,\n            color\n          });\n          adjList[node.id].forEach(neighborId => {\n            if (currentComponent.some(n => n.id === neighborId)) {\n              const edge = edges.find(e => e.from.id === node.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === node.id);\n              if (edge && !newVisitedEdges.includes(edge)) {\n                newVisitedEdges.push(edge);\n              }\n            }\n          });\n        });\n        setVisitedNodes(prev => [...prev, ...newVisitedNodes]);\n        setVisitedEdges(prev => [...prev, ...newVisitedEdges.map(edge => ({\n          ...edge,\n          color\n        }))]);\n        setTimeout(() => animateComponents(index + 1), sliderValueRef.current); // Adjust the interval as needed\n      } else {\n        setText(\"Connected Components Found!\");\n        setTimeout(() => {\n          resetEdges();\n          setAlgorithmRunning(false);\n          setComponents([]);\n        }, 1000); // Adjust the interval as needed\n      }\n    };\n    animateComponents(0);\n  };\n  const startShortestPath = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setIsShortestPath(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Start Node for Shortest Path\");\n  };\n  const calculateEdgeLength = edge => {\n    const dx = edge.from.x - edge.to.x;\n    const dy = edge.from.y - edge.to.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  };\n  const findShortestPath = async (startNode, endNode) => {\n    const distances = {};\n    const previousNodes = {};\n    const nodesToVisit = new Set(nodes.map(node => node.id));\n    const edgesToReset = [];\n\n    // Initialize distances and previousNodes\n    nodes.forEach(node => {\n      distances[node.id] = Infinity;\n      previousNodes[node.id] = null;\n    });\n    distances[startNode.id] = 0;\n    while (nodesToVisit.size > 0) {\n      const currentNodeId = [...nodesToVisit].reduce((minNodeId, nodeId) => {\n        return distances[nodeId] < distances[minNodeId] ? nodeId : minNodeId;\n      });\n      if (distances[currentNodeId] === Infinity) break; // All remaining nodes are inaccessible from startNode\n\n      nodesToVisit.delete(currentNodeId);\n      if (currentNodeId === endNode.id) break;\n      const currentNodeDistance = distances[currentNodeId];\n      for (const neighborId of adjList[currentNodeId]) {\n        if (!nodesToVisit.has(neighborId)) continue;\n        const edge = edges.find(e => e.from.id === currentNodeId && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNodeId);\n\n        // Temporarily highlight the edge in red\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: \"red\"\n        }]);\n        edgesToReset.push(edge);\n        await new Promise(resolve => setTimeout(resolve, sliderValueRef.current)); // Adjust the interval as needed\n\n        const altDistance = currentNodeDistance + calculateEdgeLength(edge);\n        if (altDistance < distances[neighborId]) {\n          distances[neighborId] = altDistance;\n          previousNodes[neighborId] = currentNodeId;\n        } else {\n          // Immediately revert the edge color back to grey if it's not part of the shortest path\n          setVisitedEdges(prev => {\n            return prev.map(e => e.from.id === edge.from.id && e.to.id === edge.to.id || e.from.id === edge.to.id && e.to.id === edge.from.id ? {\n              ...e,\n              color: \"grey\"\n            } : e);\n          });\n        }\n      }\n    }\n    const path = [];\n    let currentNodeId = endNode.id;\n    while (currentNodeId !== null) {\n      path.unshift(currentNodeId);\n      currentNodeId = previousNodes[currentNodeId];\n    }\n\n    // Highlight the nodes and edges in the shortest path in blue\n    for (let i = 0; i < path.length - 1; i++) {\n      const nodeId = path[i];\n      const nextNodeId = path[i + 1];\n      setVisitedNodes(prev => [...prev, {\n        id: nodeId,\n        color: \"blue\"\n      }]);\n      const edge = edges.find(e => e.from.id === nodeId && e.to.id === nextNodeId || e.from.id === nextNodeId && e.to.id === nodeId);\n      setVisitedEdges(prev => prev.map(e => e.from.id === edge.from.id && e.to.id === edge.to.id || e.from.id === edge.to.id && e.to.id === edge.from.id ? {\n        ...e,\n        color: \"blue\"\n      } : e));\n      await new Promise(resolve => setTimeout(resolve, sliderValueRef.current)); // Adjust the interval as needed\n    }\n\n    // Highlight the last node in blue\n    setVisitedNodes(prev => [...prev, {\n      id: endNode.id,\n      color: \"blue\"\n    }]);\n    setVisitedEdges(prev => prev.map(e => e.color === \"red\" ? {\n      ...e,\n      color: \"grey\"\n    } : e));\n    if (path[0] === startNode.id) {\n      setTimeout(resetEdges, 1000);\n      setAlgorithmRunning(false);\n      setText(\"Shortest Path Found\");\n      setStartNode(null);\n      setEndNode(null);\n    } else {\n      setTimeout(resetEdges, 1000);\n      setAlgorithmRunning(false);\n      setText(\"No Path Found\");\n      setStartNode(null);\n      setEndNode(null);\n    }\n  };\n  const handleSliderChange = event => {\n    const newValue = event.target.value;\n    setSliderValue(newValue);\n    sliderValueRef.current = newValue;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graphs-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"slider-label\",\n            children: \"Algorithm Step Speed:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 954,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slider-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"100ms\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 956,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"100\",\n              max: \"2000\",\n              step: \"100\",\n              value: sliderValue,\n              onChange: handleSliderChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 957,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"2000ms\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 965,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 955,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 953,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"graph-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"edges-svg\",\n            style: {\n              position: 'absolute',\n              width: '100%',\n              height: '100%'\n            },\n            children: edges.map((edge, index) => {\n              var _visitedEdges$find;\n              return /*#__PURE__*/_jsxDEV(\"line\", {\n                x1: edge.from.x + 10,\n                y1: edge.from.y + 10,\n                x2: edge.to.x + 10,\n                y2: edge.to.y + 10,\n                stroke: ((_visitedEdges$find = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find === void 0 ? void 0 : _visitedEdges$find.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                strokeWidth: isRemovingEdge ? 8 : 4,\n                onClick: () => handleEdgeClick(edge)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 971,\n                columnNumber: 33\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 969,\n            columnNumber: 25\n          }, this), nodes.map(node => {\n            var _visitedNodes$find;\n            return /*#__PURE__*/_jsxDEV(Draggable, {\n              position: {\n                x: node.x,\n                y: node.y\n              },\n              bounds: \"parent\",\n              onStart: handleMouseDown,\n              onDrag: (e, data) => handleDrag(e, data, node),\n              onStop: handleDragStop,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"graph-node\",\n                onClick: () => handleNodeClick(node),\n                style: {\n                  border: isBFS || isPrim || isDFS || isShortestPath ? startNode && startNode.id === node.id ? 'none' : '2px solid red' : selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none',\n                  backgroundColor: visitedNodes.some(vn => vn.id === node.id) ? ((_visitedNodes$find = visitedNodes.find(vn => vn.id === node.id)) === null || _visitedNodes$find === void 0 ? void 0 : _visitedNodes$find.color) || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\" : 'black',\n                  pointerEvents: 'auto',\n                  position: 'absolute'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 992,\n                columnNumber: 33\n              }, this)\n            }, node.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 984,\n              columnNumber: 29\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 968,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          \"class-name\": \"status-text\",\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1006,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 952,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Graph Creation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1010,\n          columnNumber: 21\n        }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: addNode,\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1014,\n          columnNumber: 21\n        }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: generateGraph,\n          children: \"Generate Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1016,\n          columnNumber: 21\n        }, this), !selectedNode && nodes.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: resetGraph,\n          children: \"Reset Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1018,\n          columnNumber: 21\n        }, this), !selectedNode && edges.length >= 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: startRemovingEdge,\n          children: \"Remove Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1020,\n          columnNumber: 21\n        }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: handleAddEdge,\n          children: \"Add Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1024,\n          columnNumber: 21\n        }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: removeNode,\n          children: \"Remove Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1026,\n          columnNumber: 21\n        }, this), edges.length > 0 && !selectedNode && /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Algorithms\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1030,\n          columnNumber: 21\n        }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: setClickTraversal,\n          children: \"Traversals\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1032,\n          columnNumber: 21\n        }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: setClickMST,\n          children: \"MSTs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1034,\n          columnNumber: 21\n        }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: animateKruskalsAlgorithm,\n          children: \"Kruskall\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1039,\n          columnNumber: 21\n        }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: startPrim,\n          children: \"Prim\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1041,\n          columnNumber: 21\n        }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: startDFS,\n          children: \"DFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1043,\n          columnNumber: 21\n        }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: startBFS,\n          children: \"BFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1045,\n          columnNumber: 21\n        }, this), !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: startShortestPath,\n          children: \"Shortest Path\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1047,\n          columnNumber: 21\n        }, this), !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: findConnectedComponents,\n          children: \"Connected Components\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1049,\n          columnNumber: 21\n        }, this), (clickedTraversal || clickedMST) && !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: goBack,\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1054,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1009,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 951,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 950,\n    columnNumber: 9\n  }, this);\n};\n_s(Graphs, \"xMcd4/SCSpfVODxTNNsg4dWcFEE=\");\n_c = Graphs;\nexport default Graphs;\nvar _c;\n$RefreshReg$(_c, \"Graphs\");","map":{"version":3,"names":["React","useState","useRef","Draggable","jsxDEV","_jsxDEV","Graphs","_s","text","setText","nodes","setNodes","nodeCount","setNodeCount","edges","setEdges","selectedNode","setSelectedNode","isAddingEdge","setIsAddingEdge","dragging","setDragging","isRemovingEdge","setIsRemovingEdge","visitedNodes","setVisitedNodes","visitedEdges","setVisitedEdges","adjList","setAdjList","clickedTraversal","setClickedTraveral","clickedMST","setClickedMST","isDFS","setIsDFS","isBFS","setIsBFS","isPrim","setIsPrim","algorithmRunning","setAlgorithmRunning","isShortestPath","setIsShortestPath","startNode","setStartNode","endNode","setEndNode","componentColors","components","setComponents","sliderValue","setSliderValue","sliderValueRef","startingText","treeEdgeColor","currentEdgeColor","defaultEdgeColor","addNode","length","alert","newNode","id","x","Math","random","y","prevAdjList","resetGraph","removeNode","filter","node","edge","from","to","newAdjList","key","handleNodeClick","edgeExists","some","newEdge","prevEdges","push","dfs","bfs","animatePrimsAlgorithm","findShortestPath","handleMouseDown","handleAddEdge","handleEdgeClick","e","startRemovingEdge","handleDrag","data","updatedX","updatedY","nodeRadius","isColliding","n","sqrt","handleDragStop","setTimeout","startDFS","startBFS","visitedNodeSet","Set","dfsRecursive","currentNode","has","add","prev","updatedNodes","color","neighborId","neighborNode","find","isEdgeNotBlue","Promise","resolve","current","resetEdges","queue","shift","generateGraph","numNodes","numEdges","response","prompt","isNaN","newNodes","newEdges","gridSize","ceil","areaWidth","areaHeight","margin","gridSpacingX","gridSpacingY","i","row","floor","col","animateKruskalsAlgorithm","sortedEdges","sort","a","b","calculateEdgeLength","componentIndex","currentComponentEdges","currentComponentNodes","uf","foundComponents","dfsComponent","component","forEach","animateComponentMST","UnionFind","map","edgeIndex","highlightNodesAndEdges","index","animateStep","includes","union","console","log","constructor","size","parent","Array","fill","_","rank","node1","node2","root1","root2","startPrim","edgeQueue","addEdges","edgesToHighlight","slice","fromInMST","toInMST","setClickTraversal","setClickMST","goBack","findConnectedComponents","componentColor","isEdgeNotInComponentColor","animateComponents","currentComponent","newVisitedNodes","newVisitedEdges","startShortestPath","dx","dy","distances","previousNodes","nodesToVisit","edgesToReset","Infinity","currentNodeId","reduce","minNodeId","nodeId","delete","currentNodeDistance","altDistance","path","unshift","nextNodeId","handleSliderChange","event","newValue","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","min","max","step","onChange","style","position","width","height","_visitedEdges$find","x1","y1","x2","y2","stroke","strokeWidth","onClick","_visitedNodes$find","bounds","onStart","onDrag","onStop","border","backgroundColor","vn","findIndex","comp","pointerEvents","_c","$RefreshReg$"],"sources":["/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js"],"sourcesContent":["import React, {useState, useRef } from 'react';\nimport Draggable from 'react-draggable';\n\nconst Graphs = () => {\n    const [text, setText] = useState(\"Add Node or Generate Graph to Begin\");\n    const [nodes, setNodes] = useState([]);\n    const [nodeCount, setNodeCount] = useState(0);\n    const [edges, setEdges] = useState([]);\n    const [selectedNode, setSelectedNode] = useState(null);\n    const [isAddingEdge, setIsAddingEdge] = useState(false);\n    const [dragging, setDragging] = useState(false);\n    const [isRemovingEdge, setIsRemovingEdge] = useState(false);\n    // eslint-disable-next-line\n    const [visitedNodes, setVisitedNodes] = useState([]);\n    const [visitedEdges, setVisitedEdges] = useState([]);\n    const [adjList, setAdjList] = useState([]);\n    const [clickedTraversal, setClickedTraveral] = useState(false);\n    const [clickedMST, setClickedMST] = useState(false);\n    const [isDFS, setIsDFS] = useState(false);\n    const [isBFS, setIsBFS] = useState(false);\n    const [isPrim, setIsPrim] = useState(false);\n    const [algorithmRunning, setAlgorithmRunning] = useState(false);\n    const [isShortestPath, setIsShortestPath] = useState(false);\n    const [startNode, setStartNode] = useState(null);\n    const [endNode, setEndNode] = useState(null);\n    const [componentColors] = useState([\"blue\", \"green\", \"orange\", \"purple\", \"pink\"]);\n    const [components, setComponents] = useState([]);\n    const [sliderValue, setSliderValue] = useState(250);\n    const sliderValueRef = useRef(sliderValue);\n    const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n    const treeEdgeColor = \"blue\"; \n    const currentEdgeColor = \"red\"; \n    const defaultEdgeColor = \"gray\";\n\n    const addNode = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        if(nodes.length >= 20){\n            alert(\"too many nodes\");\n            return;\n        }\n\n        setText(startingText);\n        const newNode = {\n            id: nodeCount,\n            x: Math.random() * 480,\n            y: Math.random() * 480,\n        };\n        setNodes([...nodes, newNode]);\n        setAdjList(prevAdjList => ({ ...prevAdjList, [newNode.id]: [] }));\n        setNodeCount(nodeCount + 1);\n    };\n\n    const resetGraph = () => {\n        if(algorithmRunning){\n            return;\n        }\n        setNodes([]);\n        setEdges([]);\n        setClickedMST(false);\n        setClickedTraveral(false);\n        setIsRemovingEdge(false);\n        setText(startingText);\n    };\n    \n    const removeNode = () => {\n        if (selectedNode == null) return;\n\n        // Remove the selected node and any connected edges\n        setNodes(nodes.filter(node => node.id !== selectedNode.id));\n        setEdges(edges.filter(edge => edge.from.id !== selectedNode.id && edge.to.id !== selectedNode.id));\n        setAdjList(prevAdjList => {\n            const newAdjList = { ...prevAdjList };\n            delete newAdjList[selectedNode.id];\n            for (const key in newAdjList) {\n                newAdjList[key] = newAdjList[key].filter(id => id !== selectedNode.id);\n            }\n            return newAdjList;\n        });\n        setSelectedNode(null);\n    };\n\n    const handleNodeClick = (node) => {\n        if (dragging) {\n            return;\n        }\n\n        if (isAddingEdge) {\n            if (selectedNode && selectedNode.id !== node.id) {\n                const edgeExists = edges.some(edge =>\n                    (edge.from.id === selectedNode.id && edge.to.id === node.id) ||\n                    (edge.from.id === node.id && edge.to.id === selectedNode.id)\n                );\n\n                if(!edgeExists){\n                    const newEdge = { from: selectedNode, to: node };\n                    setEdges(prevEdges => [...prevEdges, newEdge]);\n\n                    setAdjList(prevAdjList => {\n                        const newAdjList = { ...prevAdjList };\n                        if (!newAdjList[selectedNode.id]) newAdjList[selectedNode.id] = [];\n                        if (!newAdjList[node.id]) newAdjList[node.id] = [];\n                        newAdjList[selectedNode.id].push(node.id);\n                        newAdjList[node.id].push(selectedNode.id);\n                        return newAdjList;\n                    })\n                }\n                \n                setIsAddingEdge(false);\n                setSelectedNode(null);\n            } else if (selectedNode && selectedNode.id === node.id) {\n                setSelectedNode(null);\n                setIsAddingEdge(false);\n            }\n            setText(startingText);\n        } else if(isDFS){\n            setVisitedNodes([]);\n            setVisitedEdges([]);\n            dfs(node);\n            setIsDFS(false);\n        } else if(isBFS){\n            setVisitedNodes([]);\n            setVisitedEdges([]);\n            bfs(node);\n            setIsBFS(false);\n        }else if(isPrim){\n            setIsPrim(false);\n            animatePrimsAlgorithm(node);\n        }else if(isShortestPath){\n            if(!startNode){\n                setStartNode(node);\n                setText(\"Select End Node for Shortest Path\");\n            }else if(!endNode){\n                setEndNode(node);\n                setText(\"Finding Shortest Path...\");\n                findShortestPath(startNode, node);\n                setIsShortestPath(false);\n            }\n        }else{\n            if (selectedNode && selectedNode.id === node.id) {\n                setSelectedNode(null); // Unhighlight and remove selection\n                setText(startingText);\n            } else {\n                setSelectedNode(node);\n            }\n        }\n    }\n\n    const handleMouseDown = () => {\n        setDragging(false);\n    };\n\n    const handleAddEdge = () => {\n        if (selectedNode === null) return;\n\n        if(((nodes.length * (nodes.length - 1)) / 2) === edges.length){\n            alert(\"cannot add another edge\");\n            return;\n        }\n\n        if (nodes.length < 2) {\n            alert(\"You need at least two nodes to add an edge.\");\n            return;\n        }\n        setIsAddingEdge(true);\n        setText(\"Click another node to add edge\");\n    };\n\n    const handleEdgeClick = (edge) => {\n        if (isRemovingEdge) {\n            setEdges(edges.filter(e => e !== edge));\n            setIsRemovingEdge(false);\n    \n            setAdjList(prevAdjList => {\n                const newAdjList = { ...prevAdjList };\n                newAdjList[edge.from.id] = newAdjList[edge.from.id].filter(id => id !== edge.to.id);\n                newAdjList[edge.to.id] = newAdjList[edge.to.id].filter(id => id !== edge.from.id);\n                return newAdjList;\n            });\n            setText(startingText);\n        }\n    }\n\n    const startRemovingEdge = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        if(isRemovingEdge){\n            setIsRemovingEdge(false);\n            setText(\"\");\n            return;\n        }\n\n        if(edges.length < 1){\n            alert(\"must be at least one edge\");\n            return;\n        }\n        setText(\"Click on an edge to remove it\");\n        setIsRemovingEdge(true);\n    }\n\n    const handleDrag = (e, data, node) => {\n        setDragging(true);\n\n        const updatedX = data.x;\n        const updatedY = data.y;\n        const nodeRadius = 20;\n        \n        const isColliding = nodes.some(n => {\n            n.id !== node.id &&\n            Math.sqrt((updatedX - n.x) ** 2 + (updatedY - n.y) ** 2) < 2 * nodeRadius\n        })\n\n        if(!isColliding){\n            node.x = data.x;\n            node.y = data.y;\n            setNodes([...nodes]);\n        }\n    };\n\n    const handleDragStop = () => {\n        // Allow some time for the onClick to fire if it was just a click\n        setTimeout(() => {\n            setDragging(false);\n        }, 0);\n    };\n    \n    const startDFS = () => {\n        if(algorithmRunning|| isRemovingEdge){\n            return;\n        }\n        setIsDFS(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Node to begin DFS\");\n    }\n\n    const startBFS = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        setIsBFS(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Node to begin BFS\");\n    }\n\n    const dfs = async (startNode) => {\n        setText(\"DFS in progress...\");\n        const visitedNodeSet = new Set();\n    \n        const dfsRecursive = async (currentNode) => {\n            if (visitedNodeSet.has(currentNode.id)) {\n                return;\n            }\n    \n            visitedNodeSet.add(currentNode.id);\n            setVisitedNodes(prev => {\n                const updatedNodes = [...prev, { id: currentNode.id, color: treeEdgeColor }];\n                return updatedNodes;\n            });\n    \n            for (let neighborId of adjList[currentNode.id]) {\n                const neighborNode = nodes.find(node => node.id === neighborId);\n                const edge = edges.find(e => \n                    (e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNode.id)\n                );\n    \n                if (edge) {\n                    // Check if the edge is not blue\n                    const isEdgeNotBlue = edge.color !== treeEdgeColor;\n\n                    if (isEdgeNotBlue) {\n                        // Highlight the current edge\n                        setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n\n                        // Wait for the specified interval if the edge is about to be highlighted\n                        await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n                    }\n        \n                    if (!visitedNodeSet.has(neighborId)) {\n                        // Confirm the edge and change it to the tree edge color immediately\n                        setVisitedEdges(prev => [\n                            ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                            { ...edge, color: treeEdgeColor }\n                        ]);\n                        await dfsRecursive(neighborNode);\n                    } else {\n                        // If the edge does not lead to an undiscovered node, revert it to default color\n                        setVisitedEdges(prev => [\n                            ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== treeEdgeColor)),\n                            { ...edge, color: defaultEdgeColor }\n                        ]);\n                    }\n                }\n            }\n        };\n    \n        await dfsRecursive(startNode);\n    \n        setAlgorithmRunning(false);\n        setText(\"DFS Done!\");\n        setTimeout(resetEdges, 1000); // Wait 1 second before resetting edges\n    };\n        \n    const bfs = async (startNode) => {\n        setText(\"BFS in progress...\");\n        const visitedNodeSet = new Set();\n    \n        const queue = [startNode];\n        visitedNodeSet.add(startNode.id);\n        setVisitedNodes([{ id: startNode.id, color: treeEdgeColor }]);\n    \n        while (queue.length > 0) {\n            const currentNode = queue.shift();\n    \n            for (let neighborId of adjList[currentNode.id]) {\n                const neighborNode = nodes.find(node => node.id === neighborId);\n                const edge = edges.find(e => \n                    (e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNode.id)\n                );\n    \n                if (edge) {\n                    // Check if the edge is not blue\n                    const isEdgeNotBlue = edge.color !== treeEdgeColor;\n    \n                    if (isEdgeNotBlue) {\n                        // Highlight the current edge\n                        setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n    \n                        // Wait for the specified interval if the edge is about to be highlighted\n                        await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n                    }\n    \n                    if (!visitedNodeSet.has(neighborId)) {\n                        visitedNodeSet.add(neighborId);\n                        queue.push(neighborNode);\n    \n                        // Confirm the edge and change it to the tree edge color immediately\n                        setVisitedEdges(prev => [\n                            ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                            { ...edge, color: treeEdgeColor }\n                        ]);\n                        setVisitedNodes(prev => [...prev, { id: neighborId, color: treeEdgeColor }]);\n                    } else if (isEdgeNotBlue) {\n                        // If the edge does not lead to an undiscovered node, revert it to default color\n                        setVisitedEdges(prev => [\n                            ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== treeEdgeColor)),\n                            { ...edge, color: defaultEdgeColor }\n                        ]);\n                    }\n                }\n            }\n        }\n    \n        setAlgorithmRunning(false);\n        setText(\"BFS Done!\");\n        setTimeout(resetEdges, 1000); // Wait 1 second before resetting edges\n    };\n    \n    const resetEdges = () => {\n        setVisitedEdges([]);\n        setVisitedNodes([]);\n        setText(startingText);\n    };\n\n    const generateGraph = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n\n        var numNodes = 0;\n        var numEdges = -1;\n\n        do{\n            const response = prompt(\"Enter the number of nodes:\", \"\");\n\n            if(isNaN(response)){\n                alert(\"Invalid input. Please enter numbers only\");\n                continue;\n            }\n\n            if(response <= 0 || response > 20){\n                alert(\"Invalid input. Number of nodes must be between 1 and 20\");\n                continue;\n            }\n\n            numNodes = response;\n\n        }while(numNodes === 0);\n\n        do{\n            const response = prompt(\"Enter the number of edges:\", \"\");\n\n            if(isNaN(response)){\n                alert(\"Invalid input. Please enter numbers only\");\n                continue;\n            }\n\n            if(response > ((numNodes * (numNodes - 1)) / 2)){\n                alert(\"Invalid input. Too many edges for the graph\");\n                continue;\n            }\n\n            if(response < 0){\n                alert(\"Invalid input. Not enough edges\");\n                continue;\n            }\n\n            numEdges = response;\n\n        }while(numEdges === -1);\n\n\n        // Clear current graph\n        setNodes([]);\n        setEdges([]);\n        setAdjList({});\n        setNodeCount(0);\n        setVisitedNodes([]);\n        setVisitedEdges([]);\n        setSelectedNode(null);\n        setText(startingText);\n    \n        const newNodes = [];\n        const newEdges = [];\n        const newAdjList = {};\n    \n        // Calculate grid size\n        const gridSize = Math.ceil(Math.sqrt(numNodes));\n        const areaWidth = 500; // Width of the area\n        const areaHeight = 500; // Height of the area\n        const margin = 10; // Margin to keep nodes within the grid\n        const gridSpacingX = (areaWidth - 2 * margin) / gridSize;\n        const gridSpacingY = (areaHeight - 2 * margin) / gridSize;\n\n        // Generate random nodes\n        for (let i = 0; i < numNodes; i++) {\n            const row = Math.floor(i / gridSize);\n            const col = i % gridSize;\n            const x = margin + col * gridSpacingX + Math.random() * gridSpacingX * 0.9;\n            const y = margin + row * gridSpacingY + Math.random() * gridSpacingY * 0.9;\n\n            const newNode = {\n                id: i,\n                x: x,\n                y: y,\n            };\n            newNodes.push(newNode);\n            newAdjList[i] = [];\n        }\n    \n        // Generate random edges\n        while (newEdges.length < numEdges) {\n            const from = newNodes[Math.floor(Math.random() * numNodes)];\n            const to = newNodes[Math.floor(Math.random() * numNodes)];\n            if (from.id !== to.id) {\n                const edgeExists = newEdges.some(edge =>\n                    (edge.from.id === from.id && edge.to.id === to.id) ||\n                    (edge.from.id === to.id && edge.to.id === from.id)\n                );\n                if (!edgeExists) {\n                    const newEdge = { from, to };\n                    newEdges.push(newEdge);\n                    newAdjList[from.id].push(to.id);\n                    newAdjList[to.id].push(from.id);\n                }\n            }\n        }\n    \n        setNodes(newNodes);\n        setEdges(newEdges);\n        setAdjList(newAdjList);\n        setNodeCount(newNodes.length);\n    };\n    \n    const animateKruskalsAlgorithm = () => {\n        if (algorithmRunning || isRemovingEdge) {\n            return;\n        }\n    \n        setAlgorithmRunning(true);\n        setText(\"Running Kruskal's Algorithm...\");\n    \n        const sortedEdges = [...edges].sort((a, b) => calculateEdgeLength(a) - calculateEdgeLength(b));\n        let componentIndex = 0;\n        let currentComponentEdges = [];\n        let currentComponentNodes = [];\n        let uf;\n    \n        // Find all components first\n        const visitedNodeSet = new Set();\n        const foundComponents = [];\n    \n        const dfsComponent = (currentNode, component) => {\n            if (visitedNodeSet.has(currentNode.id)) {\n                return;\n            }\n            visitedNodeSet.add(currentNode.id);\n            component.push(currentNode);\n            adjList[currentNode.id].forEach(neighborId => {\n                const neighborNode = nodes.find(node => node.id === neighborId);\n                if (!visitedNodeSet.has(neighborId)) {\n                    dfsComponent(neighborNode, component);\n                }\n            });\n        };\n    \n        nodes.forEach(node => {\n            if (!visitedNodeSet.has(node.id)) {\n                const component = [];\n                dfsComponent(node, component);\n                foundComponents.push(component);\n            }\n        });\n    \n        setComponents(foundComponents);\n    \n        const animateComponentMST = (component) => {\n            uf = new UnionFind(nodeCount); // Reset Union-Find for each component\n            currentComponentEdges = [];\n            currentComponentNodes = component.map(node => node.id);\n            let edgeIndex = 0;\n            const color = componentColors[componentIndex % componentColors.length];\n    \n            const highlightNodesAndEdges = (index) => {\n                if (index < currentComponentEdges.length) {\n                    const { from, to } = currentComponentEdges[index];\n                    setVisitedNodes(prev => [...prev, { id: from.id, color }, { id: to.id, color }]);\n                    setVisitedEdges(prev => [...prev, currentComponentEdges[index]]);\n                    setTimeout(() => highlightNodesAndEdges(index + 1), sliderValueRef.current); // Adjust the interval as needed\n                } else {\n                    componentIndex++;\n                    if (componentIndex < foundComponents.length) {\n                        setTimeout(() => animateComponentMST(foundComponents[componentIndex]), 0); // Adjust the interval as needed\n                    } else {\n                        setTimeout(resetEdges, 1000);\n                        setAlgorithmRunning(false);\n                        setText(\"Kruskal's Algorithm completed!\");\n                    }\n                }\n            };\n    \n            const animateStep = () => {\n                if (currentComponentEdges.length === component.length - 1 || edgeIndex >= sortedEdges.length) {\n                    highlightNodesAndEdges(0);\n                    return;\n                }\n    \n                const edge = sortedEdges[edgeIndex];\n                edgeIndex++;\n    \n                if (currentComponentNodes.includes(edge.from.id) && currentComponentNodes.includes(edge.to.id) &&\n                    uf.find(edge.from.id) !== uf.find(edge.to.id)) {\n                    uf.union(edge.from.id, edge.to.id);\n                    currentComponentEdges.push({ ...edge, color });\n                }\n    \n                animateStep();\n            };\n    \n            animateStep();\n        };\n    \n        if (foundComponents.length > 0) {\n            animateComponentMST(foundComponents[0]);\n        } else {\n            console.log(\"No components found.\");\n            setAlgorithmRunning(false);\n        }\n    };\n    \n    class UnionFind {\n        constructor(size) {\n            this.parent = Array(size).fill(null).map((_, index) => index);\n            this.rank = Array(size).fill(0);\n        }\n    \n        find(node) {\n            if (this.parent[node] !== node) {\n                this.parent[node] = this.find(this.parent[node]); // Path compression\n            }\n            return this.parent[node];\n        }\n    \n        union(node1, node2) {\n            const root1 = this.find(node1);\n            const root2 = this.find(node2);\n    \n            if (root1 !== root2) {\n                if (this.rank[root1] > this.rank[root2]) {\n                    this.parent[root2] = root1;\n                } else if (this.rank[root1] < this.rank[root2]) {\n                    this.parent[root1] = root2;\n                } else {\n                    this.parent[root2] = root1;\n                    this.rank[root1] += 1;\n                }\n            }\n        }\n    }\n\n    const startPrim = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        setIsPrim(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Node to begin Prim's Algorithm\");\n    }\n\n    const animatePrimsAlgorithm = async (startNode) => {\n        setText(\"Running Prim's Algorithm...\");\n        const visitedNodeSet = new Set();\n        const edgeQueue = [];\n    \n        const addEdges = (node) => {\n            visitedNodeSet.add(node.id);\n            setVisitedNodes(prev => [...prev, { id: node.id, color: treeEdgeColor }]);\n            (adjList[node.id] || []).forEach(neighborId => {\n                if (!visitedNodeSet.has(neighborId)) {\n                    const edge = edges.find(e => \n                        (e.from.id === node.id && e.to.id === neighborId) ||\n                        (e.from.id === neighborId && e.to.id === node.id)\n                    );\n                    if (edge) {\n                        edgeQueue.push({ ...edge, length: calculateEdgeLength(edge) });\n                    }\n                }\n            });\n            edgeQueue.sort((a, b) => a.length - b.length); // Sort edges by length\n        };\n    \n        const animateStep = async () => {\n            if (visitedNodeSet.size === nodes.length || edgeQueue.length === 0) {\n                setText(\"Prim's Algorithm completed!\");\n                setTimeout(() => {\n                    resetEdges();\n                    setAlgorithmRunning(false);\n                }, 1000); // Wait 1 second before resetting edges\n                return;\n            }\n    \n            const edgesToHighlight = edgeQueue.slice(0, 1); // Get the next edge to process\n            edgesToHighlight.forEach(edge => {\n                // Highlight the current edge in red\n                setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n            });\n    \n            // Wait for the specified interval to show the edges being processed\n            await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n    \n            const edge = edgeQueue.shift();\n            const { from, to } = edge;\n            const fromInMST = visitedNodeSet.has(from.id);\n            const toInMST = visitedNodeSet.has(to.id);\n    \n            if ((fromInMST && !toInMST) || (!fromInMST && toInMST)) {\n                // Confirm the edge and change it to the tree edge color\n                setVisitedEdges(prev => [\n                    ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                    { ...edge, color: treeEdgeColor }\n                ]);\n    \n                if (fromInMST && !toInMST) {\n                    addEdges(to);\n                } else if (!fromInMST && toInMST) {\n                    addEdges(from);\n                }\n            } else {\n                // Revert the edge color to default if it is not added to the MST\n                setVisitedEdges(prev => [\n                    ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                    { ...edge, color: defaultEdgeColor }\n                ]);\n            }\n    \n            animateStep();\n        };\n    \n        addEdges(startNode);\n        animateStep();\n    };\n    \n    const setClickTraversal = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedTraveral(true);\n    }\n\n    const setClickMST = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedMST(true);\n    }\n\n    const goBack = () => {\n\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        \n        setClickedMST(false);\n        setClickedTraveral(false);\n        setAlgorithmRunning(false);\n        setText(startingText);\n    }\n\n    const findConnectedComponents = async () => {\n        if (algorithmRunning || isRemovingEdge) {\n            return;\n        }\n        setAlgorithmRunning(true);\n        setText(\"Finding connected components...\");\n        const visitedNodeSet = new Set();\n        const foundComponents = [];\n    \n        const dfsRecursive = async (currentNode, component, componentColor) => {\n            if (visitedNodeSet.has(currentNode.id)) {\n                return;\n            }\n    \n            visitedNodeSet.add(currentNode.id);\n            setVisitedNodes(prev => {\n                const updatedNodes = [...prev, { id: currentNode.id, color: componentColor }];\n                return updatedNodes;\n            });\n            component.push(currentNode);\n    \n            for (let neighborId of adjList[currentNode.id]) {\n                const neighborNode = nodes.find(node => node.id === neighborId);\n                const edge = edges.find(e => \n                    (e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNode.id)\n                );\n    \n                if (edge) {\n                    // Check if the edge is not already in the component color\n                    const isEdgeNotInComponentColor = edge.color !== componentColor;\n    \n                    if (isEdgeNotInComponentColor) {\n                        // Highlight the current edge in red\n                        setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n    \n                        // Wait for the specified interval if the edge is about to be highlighted\n                        await new Promise(resolve => setTimeout(resolve, sliderValueRef.current));\n                    }\n    \n                    if (!visitedNodeSet.has(neighborId)) {\n                        // Confirm the edge and change it to the component color immediately\n                        setVisitedEdges(prev => [\n                            ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                            { ...edge, color: componentColor }\n                        ]);\n                        await dfsRecursive(neighborNode, component, componentColor);\n                    } else {\n                        // If the edge does not lead to an undiscovered node, change it to component color\n                        setVisitedEdges(prev => [\n                            ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== componentColor)),\n                            { ...edge, color: componentColor }\n                        ]);\n                    }\n                }\n            }\n        };\n    \n        for (let index = 0; index < nodes.length; index++) {\n            const node = nodes[index];\n            if (!visitedNodeSet.has(node.id)) {\n                const component = [];\n                const componentColor = componentColors[foundComponents.length % componentColors.length];\n                await dfsRecursive(node, component, componentColor);\n                foundComponents.push(component);\n            }\n        }\n    \n        setComponents(foundComponents); // Store components in the state\n    \n        const animateComponents = (index) => {\n            if (index < foundComponents.length) {\n                const currentComponent = foundComponents[index];\n                const color = componentColors[index % componentColors.length];\n                const newVisitedNodes = [];\n                const newVisitedEdges = [];\n    \n                currentComponent.forEach(node => {\n                    newVisitedNodes.push({ id: node.id, color });\n                    adjList[node.id].forEach(neighborId => {\n                        if (currentComponent.some(n => n.id === neighborId)) {\n                            const edge = edges.find(e =>\n                                (e.from.id === node.id && e.to.id === neighborId) ||\n                                (e.from.id === neighborId && e.to.id === node.id)\n                            );\n                            if (edge && !newVisitedEdges.includes(edge)) {\n                                newVisitedEdges.push(edge);\n                            }\n                        }\n                    });\n                });\n    \n                setVisitedNodes(prev => [...prev, ...newVisitedNodes]);\n                setVisitedEdges(prev => [...prev, ...newVisitedEdges.map(edge => ({ ...edge, color }))]);\n                setTimeout(() => animateComponents(index + 1), sliderValueRef.current); // Adjust the interval as needed\n            } else {\n                setText(\"Connected Components Found!\");\n                setTimeout(() => {\n                    resetEdges();\n                    setAlgorithmRunning(false);\n                    setComponents([]);\n                }, 1000); // Adjust the interval as needed\n            }\n        };\n    \n        animateComponents(0);\n    };\n    \n    const startShortestPath = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n\n        setIsShortestPath(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Start Node for Shortest Path\");\n    }\n\n    const calculateEdgeLength = (edge) => {\n        const dx = edge.from.x - edge.to.x;\n        const dy = edge.from.y - edge.to.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    };\n\n    const findShortestPath = async (startNode, endNode) => {\n        const distances = {};\n        const previousNodes = {};\n        const nodesToVisit = new Set(nodes.map(node => node.id));\n        const edgesToReset = [];\n    \n        // Initialize distances and previousNodes\n        nodes.forEach(node => {\n            distances[node.id] = Infinity;\n            previousNodes[node.id] = null;\n        });\n    \n        distances[startNode.id] = 0;\n    \n        while (nodesToVisit.size > 0) {\n            const currentNodeId = [...nodesToVisit].reduce((minNodeId, nodeId) => {\n                return distances[nodeId] < distances[minNodeId] ? nodeId : minNodeId;\n            });\n    \n            if (distances[currentNodeId] === Infinity) break; // All remaining nodes are inaccessible from startNode\n    \n            nodesToVisit.delete(currentNodeId);\n    \n            if (currentNodeId === endNode.id) break;\n    \n            const currentNodeDistance = distances[currentNodeId];\n    \n            for (const neighborId of adjList[currentNodeId]) {\n                if (!nodesToVisit.has(neighborId)) continue;\n    \n                const edge = edges.find(e =>\n                    (e.from.id === currentNodeId && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNodeId)\n                );\n    \n                // Temporarily highlight the edge in red\n                setVisitedEdges(prev => [...prev, { ...edge, color: \"red\" }]);\n                edgesToReset.push(edge);\n                await new Promise(resolve => setTimeout(resolve, sliderValueRef.current)); // Adjust the interval as needed\n    \n                const altDistance = currentNodeDistance + calculateEdgeLength(edge);\n    \n                if (altDistance < distances[neighborId]) {\n                    distances[neighborId] = altDistance;\n                    previousNodes[neighborId] = currentNodeId;\n                } else {\n                    // Immediately revert the edge color back to grey if it's not part of the shortest path\n                    setVisitedEdges(prev => {\n                        return prev.map(e =>\n                            (e.from.id === edge.from.id && e.to.id === edge.to.id) || (e.from.id === edge.to.id && e.to.id === edge.from.id)\n                                ? { ...e, color: \"grey\" }\n                                : e\n                        );\n                    });\n                }\n            }\n        }\n    \n        const path = [];\n        let currentNodeId = endNode.id;\n    \n        while (currentNodeId !== null) {\n            path.unshift(currentNodeId);\n            currentNodeId = previousNodes[currentNodeId];\n        }\n    \n        // Highlight the nodes and edges in the shortest path in blue\n        for (let i = 0; i < path.length - 1; i++) {\n            const nodeId = path[i];\n            const nextNodeId = path[i + 1];\n            setVisitedNodes(prev => [...prev, { id: nodeId, color: \"blue\" }]);\n            const edge = edges.find(e =>\n                (e.from.id === nodeId && e.to.id === nextNodeId) ||\n                (e.from.id === nextNodeId && e.to.id === nodeId)\n            );\n            setVisitedEdges(prev => prev.map(e =>\n                (e.from.id === edge.from.id && e.to.id === edge.to.id) || (e.from.id === edge.to.id && e.to.id === edge.from.id)\n                    ? { ...e, color: \"blue\" }\n                    : e\n            ));\n            await new Promise(resolve => setTimeout(resolve, sliderValueRef.current)); // Adjust the interval as needed\n        }\n    \n        // Highlight the last node in blue\n        setVisitedNodes(prev => [...prev, { id: endNode.id, color: \"blue\" }]);\n\n        setVisitedEdges(prev => prev.map(e => e.color === \"red\" ? { ...e, color: \"grey\" } : e));\n    \n        if (path[0] === startNode.id) {\n            setTimeout(resetEdges, 1000);\n            setAlgorithmRunning(false);\n            setText(\"Shortest Path Found\");\n            setStartNode(null);\n            setEndNode(null);\n        } else {\n            setTimeout(resetEdges, 1000);\n            setAlgorithmRunning(false);\n            setText(\"No Path Found\");\n            setStartNode(null);\n            setEndNode(null);\n        }\n    };\n    \n    const handleSliderChange = (event) => {\n        const newValue = event.target.value;\n        setSliderValue(newValue);\n        sliderValueRef.current = newValue;\n    }\n    \n    return (\n        <div className=\"main-container\">\n            <div className=\"graphs-container\">\n                <div className=\"graph-content\">\n                    <div className=\"slider-container\">\n                        <h4 className=\"slider-label\">Algorithm Step Speed:</h4>\n                        <div className=\"slider-content\">\n                            <h4>100ms</h4>\n                            <input \n                                type=\"range\" \n                                min=\"100\" \n                                max=\"2000\" \n                                step=\"100\" \n                                value={sliderValue} \n                                onChange={handleSliderChange}\n                            />\n                            <h4>2000ms</h4>\n                        </div>\n                    </div>\n                    <div className=\"graph-box\">\n                        <svg className=\"edges-svg\" style={{ position: 'absolute', width: '100%', height: '100%' }}>\n                            {edges.map((edge, index) => (\n                                <line\n                                    key={index}\n                                    x1={edge.from.x + 10}\n                                    y1={edge.from.y + 10}\n                                    x2={edge.to.x + 10}\n                                    y2={edge.to.y + 10}\n                                    stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                    strokeWidth={isRemovingEdge ? 8 : 4}\n                                    onClick={() => handleEdgeClick(edge)}\n                                />\n                            ))}\n                        </svg>\n                        {nodes.map(node => (\n                            <Draggable\n                                key={node.id}\n                                position={{ x: node.x, y: node.y }}\n                                bounds=\"parent\"\n                                onStart={handleMouseDown}\n                                onDrag={(e, data) => handleDrag(e, data, node)}\n                                onStop={handleDragStop}\n                            >\n                                <div\n                                    className=\"graph-node\"\n                                    onClick={() => handleNodeClick(node)}\n                                    style={{\n                                        border: (isBFS || isPrim || isDFS || isShortestPath) ? (startNode && startNode.id === node.id ? 'none' : '2px solid red') : (selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none'),\n                                        backgroundColor: visitedNodes.some(vn => vn.id === node.id) ? (visitedNodes.find(vn => vn.id === node.id)?.color || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\") : 'black',\n                                        pointerEvents: 'auto',\n                                        position: 'absolute'\n                                    }}\n                                >\n                                </div>\n                            </Draggable>\n                        ))}\n                    </div>\n                    <h3 class-name=\"status-text\">{text}</h3>\n                </div>\n\n                <div className=\"button-container\">\n                    <h3>Graph Creation</h3>\n\n                    {/* Graph Creation and Updating */}\n                    {!selectedNode && (\n                    <button className=\"graph-button\" onClick={addNode}>Add Node</button>)}\n                    {!selectedNode && (\n                    <button className=\"graph-button\" onClick={generateGraph}>Generate Graph</button>)}\n                    {!selectedNode && nodes.length > 0 && (\n                    <button className=\"graph-button\" onClick={resetGraph}>Reset Graph</button>)}\n                    {!selectedNode && (edges.length >= 1) && (\n                    <button className=\"graph-button\" onClick={startRemovingEdge}>Remove Edge</button>)}\n                    \n                    {/* Graph Creation and Updating when node selected */}\n                    {selectedNode && (\n                    <button className=\"graph-button\" onClick={handleAddEdge}>Add Edge</button>)}\n                    {selectedNode && (\n                    <button className=\"graph-button\" onClick={removeNode}>Remove Node</button>)}\n\n                    {/* Traversal and MST */}\n                    {edges.length > 0 && !selectedNode &&(\n                    <h3>Algorithms</h3>)}\n                    {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && (\n                    <button className=\"graph-button\" onClick={setClickTraversal}>Traversals</button>)}\n                    {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && (\n                    <button className=\"graph-button\" onClick={setClickMST}>MSTs</button>)}\n\n\n                    {/* Specific Algorithms */}\n                    {clickedMST && !selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={animateKruskalsAlgorithm}>Kruskall</button>)}\n                    {clickedMST && !selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={startPrim}>Prim</button>)}\n                    {clickedTraversal && !selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={startDFS}>DFS</button>)}\n                    {clickedTraversal && !selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={startBFS}>BFS</button>)}\n                    {!clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={startShortestPath}>Shortest Path</button>)}\n                    {!clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={findConnectedComponents}>Connected Components</button>)}\n                    \n\n                    {/* Back Button */}\n                    {(clickedTraversal || clickedMST) && !selectedNode && (\n                    <button className=\"graph-button\" onClick={goBack}>Back</button>)} \n                    \n                </div>\n                \n            </div>\n\n        </div>\n    );\n};\n\nexport default Graphs;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}