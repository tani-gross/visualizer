{"ast":null,"code":"var _jsxFileName = \"/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport Draggable from 'react-draggable';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Graphs = () => {\n  _s();\n  // State variables to manage graph nodes, edges, and various UI states\n  const [text, setText] = useState(\"Add Node or Generate Graph to Begin\");\n  const [nodes, setNodes] = useState([]);\n  const [nodeCount, setNodeCount] = useState(0);\n  const [edges, setEdges] = useState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isAddingEdge, setIsAddingEdge] = useState(false);\n  const [dragging, setDragging] = useState(false);\n  const [isRemovingEdge, setIsRemovingEdge] = useState(false);\n  // eslint-disable-next-line\n  const [visitedNodes, setVisitedNodes] = useState([]);\n  const [visitedEdges, setVisitedEdges] = useState([]);\n  const [adjList, setAdjList] = useState([]);\n  const [clickedTraversal, setClickedTraveral] = useState(false);\n  const [clickedMST, setClickedMST] = useState(false);\n  const [clickedPaths, setClickedPaths] = useState(false);\n  const [isDFS, setIsDFS] = useState(false);\n  const [isBFS, setIsBFS] = useState(false);\n  const [isPrim, setIsPrim] = useState(false);\n  const [isTSP, setIsTSP] = useState(false);\n  const [algorithmRunning, setAlgorithmRunning] = useState(false);\n  const [isShortestPath, setIsShortestPath] = useState(false);\n  const [startNode, setStartNode] = useState(null);\n  const [endNode, setEndNode] = useState(null);\n  const [componentColors] = useState([\"blue\", \"green\", \"orange\", \"purple\", \"pink\", \"yellow\", \"gold\", \"coral\", \"crimson\", \"cyan\", \"darkgreen\", \"drakblue\", \"darkorange\", \"darkorchid\", \"darkred\", \"deeppink\", \"darkviolet\", \"deepskyblue\", \"forestgreen\", \"fuchsia\"]);\n  const [components, setComponents] = useState([]);\n  const [showWeights, setShowWeights] = useState(false);\n  const [sliderValue, setSliderValue] = useState(250);\n  const [currentNode, setCurrentNode] = useState(null);\n  const sliderValueRef = useRef(sliderValue);\n  const totalSliderCount = 2100;\n  const [isPaused, setIsPaused] = useState(false);\n  const isPausedRef = useRef(isPaused);\n  const [currentStep, setCurrentStep] = useState(0);\n  const currentStepRef = useRef(currentStep);\n  const [isStepMode, setIsStepMode] = useState(false);\n  const isStepModeRef = useRef(isStepMode);\n  const [disablePause, setDisablePause] = useState(false);\n  const [algorithmStarted, setAlgorithmStarted] = useState(false);\n  const [runningAlgorithm, setRunningAlgorithm] = useState(null);\n\n  // Constants for UI text and colors\n  const highlightedButtonColor = \"lightblue\";\n  const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n  const treeEdgeColor = \"blue\";\n  const currentEdgeColor = \"red\";\n  const defaultEdgeColor = \"grey\";\n\n  // Use Effect to differentiate between modes\n  useEffect(() => {\n    isStepModeRef.current = isStepMode;\n  }, [isStepMode]);\n\n  // Use Effect to allow pausing mid-alg\n  useEffect(() => {\n    isPausedRef.current = isPaused;\n  }, [isPaused]);\n\n  // Use Effect to allow stopping mid-alg\n  useEffect(() => {\n    currentStepRef.current = currentStepRef;\n  }, [currentStepRef]);\n\n  // Function to reset edges to default state\n  const resetEdges = () => {\n    setVisitedEdges([]);\n    setVisitedNodes([]);\n    setText(startingText);\n    setAlgorithmRunning(false);\n    setCurrentStep(0);\n    currentStepRef.current = 0;\n    setDisablePause(false);\n    setRunningAlgorithm(null);\n  };\n\n  // Function to calculate edge length\n  const calculateEdgeLength = edge => {\n    const dx = edge.from.x - edge.to.x;\n    const dy = edge.from.y - edge.to.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  };\n\n  // Function to calculate midpoiint of an edge\n  const calculateMidpoint = edge => {\n    const midX = (edge.from.x + edge.to.x) / 2;\n    const midY = (edge.from.y + edge.to.y) / 2;\n    return {\n      x: midX,\n      y: midY\n    };\n  };\n\n  // Fucntion to calculate angle of an edge\n  const calculateAngle = edge => {\n    const dx = edge.to.x - edge.from.x;\n    const dy = edge.to.y - edge.from.y;\n    let angle = Math.atan2(dy, dx) * (180 / Math.PI);\n    if (dx >= 0 && dy < 0) {\n      // First quadrant: leave angle as is\n    } else if (dx < 0 && dy < 0) {\n      // Second quadrant: negate angle\n      angle += 180;\n    } else if (dx < 0 && dy >= 0) {\n      // Third quadrant: negate angle\n      angle -= 180;\n    } else if (dx >= 0 && dy >= 0) {\n      // Fourth quadrant: leave angle as is\n    }\n    return angle;\n  };\n\n  // Function to add a new node to the graph\n  const addNode = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    if (nodes.length >= 20) {\n      alert(\"too many nodes\");\n      return;\n    }\n    setText(startingText);\n    const newNode = {\n      id: nodeCount,\n      x: Math.random() * 480,\n      y: Math.random() * 480\n    };\n    setNodes([...nodes, newNode]);\n    setAdjList(prevAdjList => ({\n      ...prevAdjList,\n      [newNode.id]: []\n    }));\n    setNodeCount(nodeCount + 1);\n  };\n\n  // Function to generate a random graph\n  const generateGraph = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    var numNodes = 0;\n    var numEdges = -1;\n    do {\n      const response = prompt(\"Enter the number of nodes:\", \"\");\n      if (isNaN(response)) {\n        alert(\"Invalid input. Please enter numbers only\");\n        continue;\n      }\n      if (response <= 0 || response > 20) {\n        alert(\"Invalid input. Number of nodes must be between 1 and 20\");\n        continue;\n      }\n      numNodes = response;\n    } while (numNodes === 0);\n    do {\n      const response = prompt(\"Enter the number of edges:\", \"\");\n      if (isNaN(response)) {\n        alert(\"Invalid input. Please enter numbers only\");\n        continue;\n      }\n      if (response > numNodes * (numNodes - 1) / 2) {\n        alert(\"Invalid input. Too many edges for the graph\");\n        continue;\n      }\n      if (response < 0) {\n        alert(\"Invalid input. Not enough edges\");\n        continue;\n      }\n      numEdges = response;\n    } while (numEdges === -1);\n    setNodes([]);\n    setEdges([]);\n    setAdjList({});\n    setNodeCount(0);\n    setVisitedNodes([]);\n    setVisitedEdges([]);\n    setSelectedNode(null);\n    setText(startingText);\n    const newNodes = [];\n    const newEdges = [];\n    const newAdjList = {};\n    const gridSize = Math.ceil(Math.sqrt(numNodes));\n    const areaWidth = 500;\n    const areaHeight = 500;\n    const margin = 10;\n    const gridSpacingX = (areaWidth - 2 * margin) / gridSize;\n    const gridSpacingY = (areaHeight - 2 * margin) / gridSize;\n    for (let i = 0; i < numNodes; i++) {\n      const row = Math.floor(i / gridSize);\n      const col = i % gridSize;\n      const x = margin + col * gridSpacingX + Math.random() * gridSpacingX * 0.9;\n      const y = margin + row * gridSpacingY + Math.random() * gridSpacingY * 0.9;\n      const newNode = {\n        id: i,\n        x: x,\n        y: y\n      };\n      newNodes.push(newNode);\n      newAdjList[i] = [];\n    }\n    while (newEdges.length < numEdges) {\n      const from = newNodes[Math.floor(Math.random() * numNodes)];\n      const to = newNodes[Math.floor(Math.random() * numNodes)];\n      if (from.id !== to.id) {\n        const edgeExists = newEdges.some(edge => edge.from.id === from.id && edge.to.id === to.id || edge.from.id === to.id && edge.to.id === from.id);\n        if (!edgeExists) {\n          const newEdge = {\n            from,\n            to,\n            color: defaultEdgeColor\n          };\n          newEdges.push(newEdge);\n          newAdjList[from.id].push(to.id);\n          newAdjList[to.id].push(from.id);\n        }\n      }\n    }\n    setNodes(newNodes);\n    setEdges(newEdges);\n    setAdjList(newAdjList);\n    setNodeCount(newNodes.length);\n  };\n\n  // Function to reset the graph\n  const resetGraph = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setNodes([]);\n    setEdges([]);\n    setClickedMST(false);\n    setClickedTraveral(false);\n    setIsRemovingEdge(false);\n    setText(startingText);\n  };\n\n  // Function to remove a selected node form the graph\n  const removeNode = () => {\n    if (selectedNode == null) return;\n    setNodes(nodes.filter(node => node.id !== selectedNode.id));\n    setEdges(edges.filter(edge => edge.from.id !== selectedNode.id && edge.to.id !== selectedNode.id));\n    setAdjList(prevAdjList => {\n      const newAdjList = {\n        ...prevAdjList\n      };\n      delete newAdjList[selectedNode.id];\n      for (const key in newAdjList) {\n        newAdjList[key] = newAdjList[key].filter(id => id !== selectedNode.id);\n      }\n      return newAdjList;\n    });\n    setSelectedNode(null);\n  };\n\n  // Function to handle clicking on a node\n  const handleNodeClick = node => {\n    if (dragging) {\n      return;\n    }\n    if (isAddingEdge) {\n      if (selectedNode && selectedNode.id !== node.id) {\n        const edgeExists = edges.some(edge => edge.from.id === selectedNode.id && edge.to.id === node.id || edge.from.id === node.id && edge.to.id === selectedNode.id);\n        if (!edgeExists) {\n          const newEdge = {\n            from: selectedNode,\n            to: node,\n            color: defaultEdgeColor\n          };\n          setEdges(prevEdges => [...prevEdges, newEdge]);\n          setAdjList(prevAdjList => {\n            const newAdjList = {\n              ...prevAdjList\n            };\n            if (!newAdjList[selectedNode.id]) newAdjList[selectedNode.id] = [];\n            if (!newAdjList[node.id]) newAdjList[node.id] = [];\n            newAdjList[selectedNode.id].push(node.id);\n            newAdjList[node.id].push(selectedNode.id);\n            return newAdjList;\n          });\n        }\n        setIsAddingEdge(false);\n        setSelectedNode(null);\n      } else if (selectedNode && selectedNode.id === node.id) {\n        setSelectedNode(null);\n        setIsAddingEdge(false);\n      }\n      setText(startingText);\n    } else if (isDFS) {\n      setVisitedNodes([]);\n      setVisitedEdges([]);\n      dfs(node);\n      setIsDFS(false);\n    } else if (isBFS) {\n      setVisitedNodes([]);\n      setVisitedEdges([]);\n      bfs(node);\n      setIsBFS(false);\n    } else if (isPrim) {\n      setIsPrim(false);\n      animatePrimsAlgorithm(node);\n    } else if (isShortestPath) {\n      if (!startNode) {\n        setStartNode(node);\n        setText(\"Select End Node for Shortest Path\");\n      } else if (!endNode) {\n        setEndNode(node);\n        setText(\"Finding Shortest Path...\");\n        findShortestPath(startNode, node);\n        setIsShortestPath(false);\n      }\n    } else if (isTSP) {\n      setVisitedNodes([]);\n      setVisitedEdges([]);\n      tsp(node);\n      setIsTSP(false);\n    } else {\n      if (selectedNode && selectedNode.id === node.id) {\n        setSelectedNode(null);\n        setText(startingText);\n      } else {\n        if (!algorithmRunning) {\n          setSelectedNode(node);\n        }\n      }\n    }\n  };\n\n  // Function to handle mouse down event for dragging\n  const handleMouseDown = () => {\n    setDragging(false);\n  };\n\n  // Function to handle slider change\n  const handleSliderChange = event => {\n    const newValue = event.target.value;\n    setSliderValue(newValue);\n    sliderValueRef.current = newValue;\n  };\n\n  // Function to start removing an edge\n  const startRemovingEdge = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    if (isRemovingEdge) {\n      setIsRemovingEdge(false);\n      setText(\"\");\n      return;\n    }\n    if (edges.length < 1) {\n      alert(\"must be at least one edge\");\n      return;\n    }\n    setText(\"Click on an edge to remove it\");\n    setIsRemovingEdge(true);\n  };\n\n  // Function to initiate adding an edge\n  const handleAddEdge = () => {\n    if (selectedNode === null) return;\n    if (nodes.length * (nodes.length - 1) / 2 === edges.length) {\n      alert(\"cannot add another edge\");\n      return;\n    }\n    if (nodes.length < 2) {\n      alert(\"You need at least two nodes to add an edge.\");\n      return;\n    }\n    setIsAddingEdge(true);\n    setText(\"Click another node to add edge\");\n  };\n\n  // Function to handle clicking on an edge\n  const handleEdgeClick = edge => {\n    if (isRemovingEdge) {\n      setEdges(edges.filter(e => e !== edge));\n      setIsRemovingEdge(false);\n      setAdjList(prevAdjList => {\n        const newAdjList = {\n          ...prevAdjList\n        };\n        newAdjList[edge.from.id] = newAdjList[edge.from.id].filter(id => id !== edge.to.id);\n        newAdjList[edge.to.id] = newAdjList[edge.to.id].filter(id => id !== edge.from.id);\n        return newAdjList;\n      });\n      setText(startingText);\n    }\n  };\n\n  // Function to handle dragging a node\n  const handleDrag = (e, data, node) => {\n    setDragging(true);\n    node.x = data.x;\n    node.y = data.y;\n    setNodes([...nodes]);\n  };\n\n  // Function to handle stopping the drag of a node\n  const handleDragStop = () => {\n    setTimeout(() => {\n      setDragging(false);\n    }, 0);\n  };\n\n  // Function to start DFS\n  const startDFS = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setRunningAlgorithm(\"DFS\");\n    setIsDFS(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Node to begin DFS\");\n  };\n\n  // DFS implementatoin\n  const dfs = async startNode => {\n    setAlgorithmStarted(true);\n    setText(\"DFS in progress...\");\n    const visitedNodeSet = new Set();\n    const visitedEdgeSet = new Set();\n    let stepIndex = 0;\n    const dfsRecursive = async currentNode => {\n      if (visitedNodeSet.has(currentNode.id)) {\n        return;\n      }\n      visitedNodeSet.add(currentNode.id);\n      setVisitedNodes(prev => {\n        const updatedNodes = [...prev, {\n          id: currentNode.id,\n          color: treeEdgeColor\n        }];\n        return updatedNodes;\n      });\n      for (let neighborId of adjList[currentNode.id]) {\n        setCurrentNode(currentNode);\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        const edge = edges.find(e => e.from.id === currentNode.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNode.id);\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: currentEdgeColor\n        }]);\n        if (!visitedEdgeSet.has(edge)) {\n          stepIndex++;\n          if (isPausedRef.current) {\n            await new Promise(resolve => {\n              const checkStep = () => {\n                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                  resolve();\n                } else {\n                  setTimeout(checkStep, 50);\n                }\n              };\n              checkStep();\n            });\n            if (isStepModeRef.current) {\n              setIsPaused(true);\n              isPausedRef.current = true;\n            }\n          } else {\n            await sleep(totalSliderCount - sliderValueRef.current);\n          }\n          if (isStepModeRef.current) {\n            setIsPaused(true);\n            isPausedRef.current = true;\n          }\n        }\n        if (!visitedNodeSet.has(neighborId)) {\n          setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n            ...edge,\n            color: treeEdgeColor\n          }]);\n          visitedEdgeSet.add(edge);\n          await dfsRecursive(neighborNode);\n        } else {\n          setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== treeEdgeColor)));\n        }\n      }\n    };\n    await dfsRecursive(startNode);\n    setCurrentNode(null);\n    setAlgorithmStarted(false);\n    setText(\"Algorithm Done!\");\n    setTimeout(resetEdges, 1000);\n  };\n\n  // Function to start BFS\n  const startBFS = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setRunningAlgorithm(\"BFS\");\n    setIsBFS(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Node to begin BFS\");\n  };\n\n  // BFS implementation\n  const bfs = async startNode => {\n    setAlgorithmStarted(true);\n    setText(\"BFS in progress...\");\n    const visitedNodeSet = new Set();\n    const visitedEdgeSet = new Set();\n    let stepIndex = 0;\n    const queue = [startNode];\n    visitedNodeSet.add(startNode.id);\n    setVisitedNodes([{\n      id: startNode.id,\n      color: treeEdgeColor\n    }]);\n    while (queue.length > 0) {\n      const currentNode = queue.shift();\n      setCurrentNode(currentNode);\n      for (let neighborId of adjList[currentNode.id]) {\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        const edge = edges.find(e => e.from.id === currentNode.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNode.id);\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: currentEdgeColor\n        }]);\n        if (!visitedEdgeSet.has(edge)) {\n          stepIndex++;\n          if (isPausedRef.current) {\n            await new Promise(resolve => {\n              const checkStep = () => {\n                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                  resolve();\n                } else {\n                  setTimeout(checkStep, 50);\n                }\n              };\n              checkStep();\n            });\n            if (isStepModeRef.current) {\n              setIsPaused(true);\n              isPausedRef.current = true;\n            }\n          } else {\n            await sleep(totalSliderCount - sliderValueRef.current);\n          }\n          if (isStepModeRef.current) {\n            setIsPaused(true);\n            isPausedRef.current = true;\n          }\n        }\n        if (!visitedNodeSet.has(neighborId)) {\n          visitedNodeSet.add(neighborId);\n          queue.push(neighborNode);\n          setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n            ...edge,\n            color: treeEdgeColor\n          }]);\n          setVisitedNodes(prev => [...prev, {\n            id: neighborId,\n            color: treeEdgeColor\n          }]);\n        } else {\n          setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== treeEdgeColor)));\n        }\n      }\n    }\n    setCurrentNode(null);\n    setAlgorithmStarted(false);\n    setText(\"Algorithm Done!\");\n    setTimeout(resetEdges, 1000);\n  };\n\n  // Function to animate Kruskall's algorithm\n  const animateKruskalsAlgorithm = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setRunningAlgorithm(\"Kruskall\");\n    setDisablePause(true);\n    setAlgorithmRunning(true);\n    setText(\"Kruskall's Algorithm in progress...\");\n    const sortedEdges = [...edges].sort((a, b) => calculateEdgeLength(a) - calculateEdgeLength(b));\n    let componentIndex = 0;\n    let currentComponentEdges = [];\n    let currentComponentNodes = [];\n    let uf;\n    const visitedNodeSet = new Set();\n    const foundComponents = [];\n    const dfsComponent = (currentNode, component) => {\n      if (visitedNodeSet.has(currentNode.id)) {\n        return;\n      }\n      visitedNodeSet.add(currentNode.id);\n      component.push(currentNode);\n      adjList[currentNode.id].forEach(neighborId => {\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        if (!visitedNodeSet.has(neighborId)) {\n          dfsComponent(neighborNode, component);\n        }\n      });\n    };\n    nodes.forEach(node => {\n      if (!visitedNodeSet.has(node.id)) {\n        const component = [];\n        dfsComponent(node, component);\n        foundComponents.push(component);\n      }\n    });\n    setComponents(foundComponents);\n    const animateComponentMST = component => {\n      uf = new UnionFind(nodeCount);\n      currentComponentEdges = [];\n      currentComponentNodes = component.map(node => node.id);\n      let edgeIndex = 0;\n      const color = componentColors[componentIndex % componentColors.length];\n      const highlightNodesAndEdges = index => {\n        if (index < currentComponentEdges.length) {\n          const {\n            from,\n            to\n          } = currentComponentEdges[index];\n          setVisitedNodes(prev => [...prev, {\n            id: from.id,\n            color\n          }, {\n            id: to.id,\n            color\n          }]);\n          setVisitedEdges(prev => [...prev, currentComponentEdges[index]]);\n          setTimeout(() => highlightNodesAndEdges(index + 1), totalSliderCount - sliderValueRef.current);\n        } else {\n          componentIndex++;\n          if (componentIndex < foundComponents.length) {\n            setTimeout(() => animateComponentMST(foundComponents[componentIndex]), 0);\n          } else {\n            setTimeout(resetEdges, 1000);\n            setText(\"Algorithm Done!\");\n          }\n        }\n      };\n      const animateStep = () => {\n        if (currentComponentEdges.length === component.length - 1 || edgeIndex >= sortedEdges.length) {\n          highlightNodesAndEdges(0);\n          return;\n        }\n        const edge = sortedEdges[edgeIndex];\n        edgeIndex++;\n        if (currentComponentNodes.includes(edge.from.id) && currentComponentNodes.includes(edge.to.id) && uf.find(edge.from.id) !== uf.find(edge.to.id)) {\n          uf.union(edge.from.id, edge.to.id);\n          currentComponentEdges.push({\n            ...edge,\n            color\n          });\n        }\n        animateStep();\n      };\n      animateStep();\n    };\n    if (foundComponents.length > 0) {\n      animateComponentMST(foundComponents[0]);\n    } else {\n      console.log(\"No components found.\");\n      setAlgorithmRunning(false);\n    }\n  };\n\n  // Union-Find data structure for Kruskal's algorithm\n  class UnionFind {\n    constructor(size) {\n      this.parent = Array(size).fill(null).map((_, index) => index);\n      this.rank = Array(size).fill(0);\n    }\n    find(node) {\n      if (this.parent[node] !== node) {\n        this.parent[node] = this.find(this.parent[node]);\n      }\n      return this.parent[node];\n    }\n    union(node1, node2) {\n      const root1 = this.find(node1);\n      const root2 = this.find(node2);\n      if (root1 !== root2) {\n        if (this.rank[root1] > this.rank[root2]) {\n          this.parent[root2] = root1;\n        } else if (this.rank[root1] < this.rank[root2]) {\n          this.parent[root1] = root2;\n        } else {\n          this.parent[root2] = root1;\n          this.rank[root1] += 1;\n        }\n      }\n    }\n  }\n\n  // Function to start Prim's algorithm\n  const startPrim = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setRunningAlgorithm(\"Prim\");\n    setIsPrim(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Node to begin Prim's Algorithm\");\n  };\n\n  // Function to animate Prim's algorithm\n  const animatePrimsAlgorithm = async startNode => {\n    setAlgorithmStarted(true);\n    setText(\"Prim's Algorithm in progress...\");\n    const visitedNodeSet = new Set();\n    const edgeQueue = [];\n    let stepIndex = 0;\n    const addEdges = node => {\n      visitedNodeSet.add(node.id);\n      setVisitedNodes(prev => [...prev, {\n        id: node.id,\n        color: treeEdgeColor\n      }]);\n      (adjList[node.id] || []).forEach(neighborId => {\n        if (!visitedNodeSet.has(neighborId)) {\n          const edge = edges.find(e => e.from.id === node.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === node.id);\n          if (edge) {\n            edgeQueue.push({\n              ...edge,\n              length: calculateEdgeLength(edge)\n            });\n          }\n        }\n      });\n      edgeQueue.sort((a, b) => a.length - b.length);\n    };\n    const animateStep = async () => {\n      if (visitedNodeSet.size === nodes.length || edgeQueue.length === 0) {\n        setAlgorithmStarted(false);\n        setText(\"Algorithm Done!\");\n        setTimeout(resetEdges, 1000);\n        return;\n      }\n      const edgesToHighlight = edgeQueue.slice(0, 1);\n      edgesToHighlight.forEach(edge => {\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: currentEdgeColor\n        }]);\n      });\n      stepIndex++;\n      if (isPausedRef.current) {\n        await new Promise(resolve => {\n          const checkStep = () => {\n            if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n              resolve();\n            } else {\n              setTimeout(checkStep, 50);\n            }\n          };\n          checkStep();\n        });\n        if (isStepModeRef.current) {\n          setIsPaused(true);\n          isPausedRef.current = true;\n        }\n      } else {\n        await sleep(totalSliderCount - sliderValueRef.current);\n      }\n      if (isStepModeRef.current) {\n        setIsPaused(true);\n        isPausedRef.current = true;\n      }\n      const edge = edgeQueue.shift();\n      const {\n        from,\n        to\n      } = edge;\n      const fromInMST = visitedNodeSet.has(from.id);\n      const toInMST = visitedNodeSet.has(to.id);\n      if (fromInMST && !toInMST || !fromInMST && toInMST) {\n        setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n          ...edge,\n          color: treeEdgeColor\n        }]);\n        if (fromInMST && !toInMST) {\n          addEdges(to);\n        } else if (!fromInMST && toInMST) {\n          addEdges(from);\n        }\n      } else {\n        setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n          ...edge,\n          color: defaultEdgeColor\n        }]);\n      }\n      animateStep();\n    };\n    addEdges(startNode);\n    animateStep();\n  };\n\n  // Function to set traversal mode\n  const setClickTraversal = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedTraveral(true);\n  };\n\n  // Function to set MST mode\n  const setClickMST = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedMST(true);\n  };\n\n  // Function to set Paths mode\n  const setClickPath = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedPaths(true);\n  };\n\n  // Functino to go back from algorithm selection\n  const goBack = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setClickedMST(false);\n    setClickedTraveral(false);\n    setClickedPaths(false);\n    setAlgorithmRunning(false);\n    setText(startingText);\n  };\n\n  // Function to find connected components in a graph\n  const findConnectedComponents = async () => {\n    setRunningAlgorithm(\"Connected\");\n    setAlgorithmStarted(true);\n    setText(\"Connected Components in progress...\");\n    setAlgorithmRunning(true);\n    const visitedNodeSet = new Set();\n    const visitedEdgeSet = new Set();\n    let componentIndex = 0;\n    let stepIndex = 0;\n    const dfsRecursive = async (currentNode, componentColor) => {\n      if (visitedNodeSet.has(currentNode.id)) {\n        return;\n      }\n      visitedNodeSet.add(currentNode.id);\n      setVisitedNodes(prev => {\n        const updatedNodes = [...prev, {\n          id: currentNode.id,\n          color: componentColor\n        }];\n        return updatedNodes;\n      });\n      for (let neighborId of adjList[currentNode.id]) {\n        setCurrentNode(currentNode);\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        const edge = edges.find(e => e.from.id === currentNode.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNode.id);\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: currentEdgeColor\n        }]);\n        if (!visitedEdgeSet.has(edge)) {\n          stepIndex++;\n          if (isPausedRef.current) {\n            await new Promise(resolve => {\n              const checkStep = () => {\n                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                  resolve();\n                } else {\n                  setTimeout(checkStep, 50);\n                }\n              };\n              checkStep();\n            });\n            if (isStepModeRef.current) {\n              setIsPaused(true);\n              isPausedRef.current = true;\n            }\n          } else {\n            await sleep(totalSliderCount - sliderValueRef.current);\n          }\n          if (isStepModeRef.current) {\n            setIsPaused(true);\n            isPausedRef.current = true;\n          }\n        }\n        if (!visitedNodeSet.has(neighborId)) {\n          setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n            ...edge,\n            color: componentColor\n          }]);\n          visitedEdgeSet.add(edge);\n          await dfsRecursive(neighborNode, componentColor);\n        } else {\n          setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n            ...edge,\n            color: componentColor\n          }]);\n        }\n      }\n    };\n    for (let node of nodes) {\n      if (!visitedNodeSet.has(node.id)) {\n        const componentColor = componentColors[componentIndex % componentColors.length];\n        componentIndex++;\n        await dfsRecursive(node, componentColor);\n      }\n    }\n    setCurrentNode(null);\n    setAlgorithmStarted(false);\n    setText(\"Algorithm Done!\");\n    setTimeout(resetEdges, 1000);\n  };\n\n  // Function to start shortest path algorithm\n  const startShortestPath = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setRunningAlgorithm(\"SP\");\n    setIsShortestPath(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Start Node for Shortest Path\");\n  };\n\n  // Function to find the shortest path between two nodes\n  const findShortestPath = async (startNode, targetNode) => {\n    setAlgorithmStarted(true);\n    setText(\"Shortest Path Algorithm in progress...\");\n    const dist = {};\n    const prev = {};\n    const visitedEdgeSet = new Set();\n    const visitedNodeSet = new Set();\n    const priorityQueue = new Set(nodes.map(node => node.id));\n    let stepIndex = 0;\n    nodes.forEach(node => {\n      dist[node.id] = Infinity;\n      prev[node.id] = null;\n    });\n    dist[startNode.id] = 0;\n    const getMinDistNode = () => {\n      let minNode = null;\n      priorityQueue.forEach(nodeId => {\n        if (minNode === null || dist[nodeId] < dist[minNode]) {\n          minNode = nodeId;\n        }\n      });\n      return minNode;\n    };\n    while (priorityQueue.size > 0) {\n      const currentNodeId = getMinDistNode();\n      const currentNode = nodes.find(node => node.id === currentNodeId);\n      if (dist[currentNodeId] === Infinity) break;\n      priorityQueue.delete(currentNodeId);\n      if (currentNodeId === targetNode.id) {\n        break;\n      }\n      for (let neighborId of adjList[currentNode.id]) {\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        const edge = edges.find(e => e.from.id === currentNode.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNode.id);\n        setCurrentNode(currentNode);\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: currentEdgeColor\n        }]);\n        if (!visitedEdgeSet.has(edge)) {\n          stepIndex++;\n          if (isPausedRef.current) {\n            await new Promise(resolve => {\n              const checkStep = () => {\n                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                  resolve();\n                } else {\n                  setTimeout(checkStep, 50);\n                }\n              };\n              checkStep();\n            });\n            if (isStepModeRef.current) {\n              setIsPaused(true);\n              isPausedRef.current = true;\n            }\n          } else {\n            await sleep(totalSliderCount - sliderValueRef.current);\n          }\n          if (isStepModeRef.current) {\n            setIsPaused(true);\n            isPausedRef.current = true;\n          }\n          visitedEdgeSet.add(edge);\n        }\n        const alt = dist[currentNode.id] + calculateEdgeLength(edge);\n        if (alt < dist[neighborId]) {\n          dist[neighborId] = alt;\n          prev[neighborId] = currentNode.id;\n          setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n            ...edge,\n            color: treeEdgeColor\n          }]);\n          visitedEdgeSet.add(edge);\n        } else {\n          setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color === currentEdgeColor)));\n        }\n      }\n      visitedNodeSet.add(currentNode.id);\n      setVisitedNodes(prev => {\n        const updatedNodes = [...prev, {\n          id: currentNode.id,\n          color: treeEdgeColor\n        }];\n        return updatedNodes;\n      });\n    }\n    setStartNode(null);\n    setEndNode(null);\n    setAlgorithmStarted(false);\n    setCurrentNode(null);\n    setText(\"Algorithm Done!\");\n    const path = [];\n    let currentNodeId = targetNode.id;\n    while (currentNodeId !== null) {\n      path.unshift(currentNodeId);\n      currentNodeId = prev[currentNodeId];\n    }\n    if (path.length === 1) {\n      setText(\"No path Found!\");\n      setTimeout(resetEdges, 1000);\n      return;\n    }\n    setVisitedEdges(prev => {\n      return prev.map(e => {\n        if (path.includes(e.from.id) && path.includes(e.to.id)) {\n          return {\n            ...e,\n            color: treeEdgeColor\n          };\n        } else {\n          return {\n            ...e,\n            color: defaultEdgeColor\n          };\n        }\n      });\n    });\n    setVisitedNodes(prev => {\n      return nodes.map(node => {\n        if (path.includes(node.id)) {\n          return {\n            id: node.id,\n            color: treeEdgeColor\n          };\n        } else {\n          return {\n            id: node.id,\n            color: \"black\"\n          };\n        }\n      });\n    });\n    setTimeout(resetEdges, 1000);\n  };\n\n  // Function to color graph\n  const graphColoring = async () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setRunningAlgorithm(\"Color\");\n    setDisablePause(true);\n    setAlgorithmRunning(true);\n    setText(\"Graph Coloring in progress...\");\n    const availableColors = componentColors;\n    const colors = {};\n    const colorGraph = node => {\n      const neighborColors = adjList[node.id].map(neighborId => colors[neighborId]);\n      for (let color of availableColors) {\n        if (!neighborColors.includes(color)) {\n          colors[node.id] = color;\n          break;\n        }\n      }\n    };\n    for (let node of nodes) {\n      colorGraph(node);\n      setVisitedNodes(prev => [...prev, {\n        id: node.id,\n        color: colors[node.id]\n      }]);\n      await new Promise(resolve => setTimeout(resolve, totalSliderCount - sliderValueRef.current));\n    }\n    setText(\"Algorithm Done!\");\n    setTimeout(resetEdges, 1000);\n  };\n\n  // Function to start TSP\n  const startTSP = async () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setRunningAlgorithm(\"TSP\");\n    setIsTSP(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Node to begin TSP\");\n  };\n\n  // Function to animate TSP\n  const tsp = async node => {\n    setAlgorithmStarted(true);\n    setText(\"TSP in progress...\");\n    const startNode = node;\n    const unvisited = new Set(nodes.map(node => node.id));\n    const visited = [];\n    const stack = [];\n    let currentNode = startNode;\n    let stepIndex = 0;\n    unvisited.delete(currentNode.id);\n    visited.push(currentNode);\n    setVisitedNodes([{\n      id: currentNode.id,\n      color: treeEdgeColor\n    }]);\n    while (unvisited.size > 0) {\n      let nearestNode = null;\n      let shortestDistance = Infinity;\n      let currentEdge = null;\n      for (let neighborId of unvisited) {\n        setCurrentNode(currentNode);\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        // eslint-disable-next-line\n        const edge = edges.find(e => e.from.id === currentNode.id && e.to.id === neighborNode.id || e.from.id === neighborNode.id && e.to.id === currentNode.id);\n        if (edge) {\n          setVisitedEdges(prev => [...prev, {\n            ...edge,\n            color: currentEdgeColor\n          }]);\n          stepIndex++;\n          if (isPausedRef.current) {\n            await new Promise(resolve => {\n              const checkStep = () => {\n                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                  resolve();\n                } else {\n                  setTimeout(checkStep, 50);\n                }\n              };\n              checkStep();\n            });\n            if (isStepModeRef.current) {\n              setIsPaused(true);\n              isPausedRef.current = true;\n            }\n          } else {\n            await sleep(totalSliderCount - sliderValueRef.current);\n          }\n          if (isStepModeRef.current) {\n            setIsPaused(true);\n            isPausedRef.current = true;\n          }\n          const distance = calculateEdgeLength({\n            from: currentNode,\n            to: neighborNode\n          });\n          setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)));\n          if (distance < shortestDistance) {\n            shortestDistance = distance;\n            nearestNode = neighborNode;\n            currentEdge = edge;\n          }\n        }\n      }\n      if (nearestNode && currentEdge) {\n        stack.push({\n          currentNode,\n          nearestNode,\n          shortestDistance\n        });\n        setVisitedEdges(prev => [...prev, {\n          ...currentEdge,\n          color: treeEdgeColor\n        }]);\n        setVisitedNodes(prev => [...prev, {\n          id: nearestNode.id,\n          color: treeEdgeColor\n        }]);\n        stepIndex++;\n        if (isPausedRef.current) {\n          await new Promise(resolve => {\n            const checkStep = () => {\n              if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                resolve();\n              } else {\n                setTimeout(checkStep, 50);\n              }\n            };\n            checkStep();\n          });\n          if (isStepModeRef.current) {\n            setIsPaused(true);\n            isPausedRef.current = true;\n          }\n        } else {\n          await sleep(totalSliderCount - sliderValueRef.current);\n        }\n        if (isStepModeRef.current) {\n          setIsPaused(true);\n          isPausedRef.current = true;\n        }\n        currentNode = nearestNode;\n        unvisited.delete(currentNode.id);\n        visited.push(currentNode);\n      } else {\n        const previousState = stack.pop();\n        if (previousState) {\n          currentNode = previousState.currentNode;\n        } else {\n          break;\n        }\n      }\n    }\n    setCurrentNode(null);\n    setAlgorithmStarted(false);\n    setText(\"Algorithm Done!\");\n    setTimeout(resetEdges, 1000);\n  };\n\n  // Function to step in the algorithm\n  const nextStep = () => {\n    if (isPausedRef.current) {\n      setIsStepMode(true);\n      if (isPausedRef.current) {\n        setCurrentStep(prev => {\n          const next = prev + 1;\n          currentStepRef.current = next;\n          return next;\n        });\n      }\n      setIsPaused(false);\n      isPausedRef.current = false;\n    }\n  };\n\n  // Function to toggle button \n  const togglePlayPause = () => {\n    if (isPausedRef.current) {\n      setIsStepMode(false);\n      setIsPaused(false);\n      isPausedRef.current = false;\n      switch (runningAlgorithm) {\n        case \"DFS\":\n          setText(\"DFS in progress...\");\n          break;\n        case \"BFS\":\n          setText(\"BFS in progress...\");\n          break;\n        case \"Kruskall\":\n          setText(\"Kruskall's Algorithm in progress...\");\n          break;\n        case \"Prim\":\n          setText(\"Prim's Algorithm in progress...\");\n          break;\n        case \"SP\":\n          setText(\"Shortest Path Algorithm in progress...\");\n          break;\n        case \"TSP\":\n          setText(\"TSP in progress...\");\n          break;\n        case \"Connected\":\n          setText(\"Connected Components in progress..\");\n          break;\n        case \"Colors\":\n          setText(\"Graph Coloring in progress...\");\n          break;\n      }\n    } else {\n      setIsStepMode(false);\n      setIsPaused(true);\n      isPausedRef.current = true;\n      setText(\"Algorithm is Paused\");\n    }\n  };\n\n  // Function to sleep and check for pausing\n  const sleep = duration => {\n    return new Promise(resolve => {\n      const interval = 50;\n      let elapsed = 0;\n      const checkPauseAndSleep = () => {\n        if (isPausedRef.current) {\n          const checkPause = () => {\n            if (isStepModeRef.current) {\n              setIsStepMode(true);\n              resolve();\n            } else if (!isPausedRef.current) {\n              resolve();\n            } else {\n              setTimeout(checkPause, interval);\n            }\n          };\n          checkPause();\n        } else {\n          if (elapsed < duration) {\n            elapsed += interval;\n            setTimeout(checkPauseAndSleep, interval);\n          } else {\n            resolve();\n          }\n        }\n      };\n      checkPauseAndSleep();\n    });\n  };\n\n  // JSX for rendering the component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Graph Creation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1376,\n        columnNumber: 17\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: handleAddEdge,\n        children: \"Add Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1380,\n        columnNumber: 17\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: removeNode,\n        children: \"Remove Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1382,\n        columnNumber: 17\n      }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: addNode,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1386,\n        columnNumber: 17\n      }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: generateGraph,\n        children: \"Generate Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1388,\n        columnNumber: 17\n      }, this), !selectedNode && nodes.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: resetGraph,\n        children: \"Reset Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1390,\n        columnNumber: 17\n      }, this), !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Edge Editing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1393,\n        columnNumber: 21\n      }, this), !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: () => {\n          if (edges.length > 0) {\n            setShowWeights(!showWeights);\n          }\n        },\n        children: showWeights ? 'Hide Weights' : 'Show Weights'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1395,\n        columnNumber: 21\n      }, this), !selectedNode && edges.length >= 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: startRemovingEdge,\n        children: \"Remove Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1399,\n        columnNumber: 17\n      }, this), algorithmStarted && !disablePause && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1404,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: nextStep,\n          children: \"Next Step\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1405,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: togglePlayPause,\n          children: (isPaused || isStepMode) && !disablePause ? \"Play\" : \"Pause\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1406,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1375,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"slider-label\",\n          children: \"Algorithm Speed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1416,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Slow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1418,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"100\",\n            max: \"2000\",\n            step: \"100\",\n            value: sliderValue,\n            onChange: handleSliderChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1419,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Fast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1427,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1417,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1415,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"edges-svg\",\n          style: {\n            position: 'absolute',\n            width: '100%',\n            height: '100%'\n          },\n          children: edges.map((edge, index) => {\n            var _visitedEdges$find;\n            const midpoint = calculateMidpoint(edge);\n            const angle = calculateAngle(edge);\n            return /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                x1: edge.from.x + 10,\n                y1: edge.from.y + 10,\n                x2: edge.to.x + 10,\n                y2: edge.to.y + 10,\n                stroke: ((_visitedEdges$find = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find === void 0 ? void 0 : _visitedEdges$find.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                strokeWidth: isRemovingEdge ? 8 : 4,\n                onClick: () => handleEdgeClick(edge)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1437,\n                columnNumber: 33\n              }, this), showWeights && /*#__PURE__*/_jsxDEV(\"text\", {\n                x: midpoint.x + 10,\n                y: midpoint.y + 7,\n                fill: \"black\",\n                fontSize: \"12\",\n                transform: `rotate(${angle}, ${midpoint.x + 10}, ${midpoint.y + 10})`,\n                textAnchor: \"middle\",\n                children: Math.round(calculateEdgeLength(edge))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1447,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1436,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1431,\n          columnNumber: 17\n        }, this), nodes.map(node => {\n          var _visitedNodes$find;\n          return /*#__PURE__*/_jsxDEV(Draggable, {\n            position: {\n              x: node.x,\n              y: node.y\n            },\n            bounds: \"parent\",\n            onStart: handleMouseDown,\n            onDrag: (e, data) => handleDrag(e, data, node),\n            onStop: handleDragStop,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"graph-node\",\n              onClick: () => handleNodeClick(node),\n              style: {\n                border: isTSP || isBFS || isPrim || isDFS || isShortestPath ? startNode && startNode.id === node.id ? 'none' : '2px solid red' : selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none',\n                backgroundColor: node.id === (currentNode === null || currentNode === void 0 ? void 0 : currentNode.id) ? 'red' : visitedNodes.some(vn => vn.id === node.id) ? ((_visitedNodes$find = visitedNodes.find(vn => vn.id === node.id)) === null || _visitedNodes$find === void 0 ? void 0 : _visitedNodes$find.color) || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\" : 'black',\n                pointerEvents: 'auto',\n                position: 'absolute'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1470,\n              columnNumber: 29\n            }, this)\n          }, node.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1462,\n            columnNumber: 25\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1430,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        \"class-name\": \"status-text\",\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1488,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1414,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [edges.length > 0 && !selectedNode && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Algorithms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1494,\n        columnNumber: 17\n      }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: setClickTraversal,\n        children: \"Traversals \\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1496,\n        columnNumber: 17\n      }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: setClickMST,\n        children: \"MSTs \\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1498,\n        columnNumber: 17\n      }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: setClickPath,\n        children: \"Paths \\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1500,\n        columnNumber: 17\n      }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: animateKruskalsAlgorithm,\n        children: \"Kruskall\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1505,\n        columnNumber: 17\n      }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startPrim,\n        children: \"Prim\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1507,\n        columnNumber: 17\n      }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startDFS,\n        children: \"DFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1510,\n        columnNumber: 17\n      }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startBFS,\n        children: \"BFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1512,\n        columnNumber: 17\n      }, this), clickedPaths && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startShortestPath,\n        children: \"Shortest Path\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1515,\n        columnNumber: 17\n      }, this), clickedPaths && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startTSP,\n        children: \"TSP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1517,\n        columnNumber: 17\n      }, this), !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: findConnectedComponents,\n        children: \"Connected Components\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1520,\n        columnNumber: 17\n      }, this), !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: graphColoring,\n        children: \"Graph Coloring\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1522,\n        columnNumber: 17\n      }, this), (clickedTraversal || clickedMST || clickedPaths) && !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: goBack,\n        children: \"\\u2190 Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1528,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1491,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1374,\n    columnNumber: 9\n  }, this);\n};\n_s(Graphs, \"B/X7yBeH51OEsrfj1S5JYUw9mZ8=\");\n_c = Graphs;\nexport default Graphs;\nvar _c;\n$RefreshReg$(_c, \"Graphs\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Draggable","jsxDEV","_jsxDEV","Fragment","_Fragment","Graphs","_s","text","setText","nodes","setNodes","nodeCount","setNodeCount","edges","setEdges","selectedNode","setSelectedNode","isAddingEdge","setIsAddingEdge","dragging","setDragging","isRemovingEdge","setIsRemovingEdge","visitedNodes","setVisitedNodes","visitedEdges","setVisitedEdges","adjList","setAdjList","clickedTraversal","setClickedTraveral","clickedMST","setClickedMST","clickedPaths","setClickedPaths","isDFS","setIsDFS","isBFS","setIsBFS","isPrim","setIsPrim","isTSP","setIsTSP","algorithmRunning","setAlgorithmRunning","isShortestPath","setIsShortestPath","startNode","setStartNode","endNode","setEndNode","componentColors","components","setComponents","showWeights","setShowWeights","sliderValue","setSliderValue","currentNode","setCurrentNode","sliderValueRef","totalSliderCount","isPaused","setIsPaused","isPausedRef","currentStep","setCurrentStep","currentStepRef","isStepMode","setIsStepMode","isStepModeRef","disablePause","setDisablePause","algorithmStarted","setAlgorithmStarted","runningAlgorithm","setRunningAlgorithm","highlightedButtonColor","startingText","treeEdgeColor","currentEdgeColor","defaultEdgeColor","current","resetEdges","calculateEdgeLength","edge","dx","from","x","to","dy","y","Math","sqrt","calculateMidpoint","midX","midY","calculateAngle","angle","atan2","PI","addNode","length","alert","newNode","id","random","prevAdjList","generateGraph","numNodes","numEdges","response","prompt","isNaN","newNodes","newEdges","newAdjList","gridSize","ceil","areaWidth","areaHeight","margin","gridSpacingX","gridSpacingY","i","row","floor","col","push","edgeExists","some","newEdge","color","resetGraph","removeNode","filter","node","key","handleNodeClick","prevEdges","dfs","bfs","animatePrimsAlgorithm","findShortestPath","tsp","handleMouseDown","handleSliderChange","event","newValue","target","value","startRemovingEdge","handleAddEdge","handleEdgeClick","e","handleDrag","data","handleDragStop","setTimeout","startDFS","visitedNodeSet","Set","visitedEdgeSet","stepIndex","dfsRecursive","has","add","prev","updatedNodes","neighborId","neighborNode","find","Promise","resolve","checkStep","sleep","startBFS","queue","shift","animateKruskalsAlgorithm","sortedEdges","sort","a","b","componentIndex","currentComponentEdges","currentComponentNodes","uf","foundComponents","dfsComponent","component","forEach","animateComponentMST","UnionFind","map","edgeIndex","highlightNodesAndEdges","index","animateStep","includes","union","console","log","constructor","size","parent","Array","fill","_","rank","node1","node2","root1","root2","startPrim","edgeQueue","addEdges","edgesToHighlight","slice","fromInMST","toInMST","setClickTraversal","setClickMST","setClickPath","goBack","findConnectedComponents","componentColor","startShortestPath","targetNode","dist","priorityQueue","Infinity","getMinDistNode","minNode","nodeId","currentNodeId","delete","alt","path","unshift","graphColoring","availableColors","colors","colorGraph","neighborColors","startTSP","unvisited","visited","stack","nearestNode","shortestDistance","currentEdge","distance","previousState","pop","nextStep","next","togglePlayPause","duration","interval","elapsed","checkPauseAndSleep","checkPause","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","min","max","step","onChange","style","position","width","height","_visitedEdges$find","midpoint","x1","y1","x2","y2","stroke","strokeWidth","fontSize","transform","textAnchor","round","_visitedNodes$find","bounds","onStart","onDrag","onStop","border","backgroundColor","vn","findIndex","comp","n","pointerEvents","_c","$RefreshReg$"],"sources":["/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js"],"sourcesContent":["import React, {useState, useRef, useEffect } from 'react';\nimport Draggable from 'react-draggable';\n\nconst Graphs = () => {\n    // State variables to manage graph nodes, edges, and various UI states\n    const [text, setText] = useState(\"Add Node or Generate Graph to Begin\");\n    const [nodes, setNodes] = useState([]);\n    const [nodeCount, setNodeCount] = useState(0);\n    const [edges, setEdges] = useState([]);\n    const [selectedNode, setSelectedNode] = useState(null);\n    const [isAddingEdge, setIsAddingEdge] = useState(false);\n    const [dragging, setDragging] = useState(false);\n    const [isRemovingEdge, setIsRemovingEdge] = useState(false);\n    // eslint-disable-next-line\n    const [visitedNodes, setVisitedNodes] = useState([]);\n    const [visitedEdges, setVisitedEdges] = useState([]);\n    const [adjList, setAdjList] = useState([]);\n    const [clickedTraversal, setClickedTraveral] = useState(false);\n    const [clickedMST, setClickedMST] = useState(false);\n    const [clickedPaths, setClickedPaths] = useState(false);\n    const [isDFS, setIsDFS] = useState(false);\n    const [isBFS, setIsBFS] = useState(false);\n    const [isPrim, setIsPrim] = useState(false);\n    const [isTSP, setIsTSP] = useState(false);\n    const [algorithmRunning, setAlgorithmRunning] = useState(false);\n    const [isShortestPath, setIsShortestPath] = useState(false);\n    const [startNode, setStartNode] = useState(null);\n    const [endNode, setEndNode] = useState(null);\n    const [componentColors] = useState([\"blue\", \"green\", \"orange\", \"purple\", \"pink\", \"yellow\", \"gold\", \"coral\", \"crimson\", \"cyan\", \"darkgreen\", \"drakblue\", \"darkorange\", \"darkorchid\", \"darkred\", \"deeppink\", \"darkviolet\", \"deepskyblue\", \"forestgreen\", \"fuchsia\"]);\n    const [components, setComponents] = useState([]);\n    const [showWeights, setShowWeights] = useState(false);\n    const [sliderValue, setSliderValue] = useState(250);\n    const [currentNode, setCurrentNode] = useState(null);\n    const sliderValueRef = useRef(sliderValue);\n    const totalSliderCount = 2100;\n    const [isPaused, setIsPaused] = useState(false);\n    const isPausedRef = useRef(isPaused);\n    const [currentStep, setCurrentStep] = useState(0);\n    const currentStepRef = useRef(currentStep);\n    const [isStepMode, setIsStepMode] = useState(false);\n    const isStepModeRef = useRef(isStepMode);\n    const [disablePause, setDisablePause] = useState(false);\n    const [algorithmStarted, setAlgorithmStarted]=  useState(false);\n    const [runningAlgorithm, setRunningAlgorithm] = useState(null);\n\n    // Constants for UI text and colors\n    const highlightedButtonColor = \"lightblue\";\n    const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n    const treeEdgeColor = \"blue\"; \n    const currentEdgeColor = \"red\"; \n    const defaultEdgeColor = \"grey\";\n\n    // Use Effect to differentiate between modes\n    useEffect(() => {\n        isStepModeRef.current = isStepMode;\n    }, [isStepMode]);\n\n    // Use Effect to allow pausing mid-alg\n    useEffect(() => {\n        isPausedRef.current = isPaused;\n    }, [isPaused]);\n\n    // Use Effect to allow stopping mid-alg\n    useEffect(() => {\n        currentStepRef.current = currentStepRef;\n    }, [currentStepRef]);\n\n    // Function to reset edges to default state\n    const resetEdges = () => {\n        setVisitedEdges([]);\n        setVisitedNodes([]);\n        setText(startingText);\n        setAlgorithmRunning(false);\n        setCurrentStep(0);\n        currentStepRef.current = 0;\n        setDisablePause(false);\n        setRunningAlgorithm(null);\n    };\n\n    // Function to calculate edge length\n    const calculateEdgeLength = (edge) => {\n        const dx = edge.from.x - edge.to.x;\n        const dy = edge.from.y - edge.to.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    };\n\n    // Function to calculate midpoiint of an edge\n    const calculateMidpoint = (edge) => {\n        const midX = (edge.from.x + edge.to.x) / 2;\n        const midY = (edge.from.y + edge.to.y) / 2;\n        return { x: midX, y: midY };\n    };\n    \n    // Fucntion to calculate angle of an edge\n    const calculateAngle = (edge) => {\n        const dx = edge.to.x - edge.from.x;\n        const dy = edge.to.y - edge.from.y;\n        let angle = Math.atan2(dy, dx) * (180 / Math.PI);\n    \n        if (dx >= 0 && dy < 0) {\n            // First quadrant: leave angle as is\n        } else if (dx < 0 && dy < 0) {\n            // Second quadrant: negate angle\n            angle += 180;\n        } else if (dx < 0 && dy >= 0) {\n            // Third quadrant: negate angle\n            angle -= 180;\n        } else if (dx >= 0 && dy >= 0) {\n            // Fourth quadrant: leave angle as is\n        }\n    \n        return angle;\n    };\n\n    // Function to add a new node to the graph\n    const addNode = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        if(nodes.length >= 20){\n            alert(\"too many nodes\");\n            return;\n        }\n\n        setText(startingText);\n        const newNode = {\n            id: nodeCount,\n            x: Math.random() * 480,\n            y: Math.random() * 480,\n        };\n        setNodes([...nodes, newNode]);\n        setAdjList(prevAdjList => ({ ...prevAdjList, [newNode.id]: [] }));\n        setNodeCount(nodeCount + 1);\n    };\n\n    // Function to generate a random graph\n    const generateGraph = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n\n        var numNodes = 0;\n        var numEdges = -1;\n\n        do{\n            const response = prompt(\"Enter the number of nodes:\", \"\");\n\n            if(isNaN(response)){\n                alert(\"Invalid input. Please enter numbers only\");\n                continue;\n            }\n\n            if(response <= 0 || response > 20){\n                alert(\"Invalid input. Number of nodes must be between 1 and 20\");\n                continue;\n            }\n\n            numNodes = response;\n\n        }while(numNodes === 0);\n\n        do{\n            const response = prompt(\"Enter the number of edges:\", \"\");\n\n            if(isNaN(response)){\n                alert(\"Invalid input. Please enter numbers only\");\n                continue;\n            }\n\n            if(response > ((numNodes * (numNodes - 1)) / 2)){\n                alert(\"Invalid input. Too many edges for the graph\");\n                continue;\n            }\n\n            if(response < 0){\n                alert(\"Invalid input. Not enough edges\");\n                continue;\n            }\n\n            numEdges = response;\n\n        }while(numEdges === -1);\n\n        setNodes([]);\n        setEdges([]);\n        setAdjList({});\n        setNodeCount(0);\n        setVisitedNodes([]);\n        setVisitedEdges([]);\n        setSelectedNode(null);\n        setText(startingText);\n    \n        const newNodes = [];\n        const newEdges = [];\n        const newAdjList = {};\n    \n\n        const gridSize = Math.ceil(Math.sqrt(numNodes));\n        const areaWidth = 500; \n        const areaHeight = 500; \n        const margin = 10;\n        const gridSpacingX = (areaWidth - 2 * margin) / gridSize;\n        const gridSpacingY = (areaHeight - 2 * margin) / gridSize;\n\n        for (let i = 0; i < numNodes; i++) {\n            const row = Math.floor(i / gridSize);\n            const col = i % gridSize;\n            const x = margin + col * gridSpacingX + Math.random() * gridSpacingX * 0.9;\n            const y = margin + row * gridSpacingY + Math.random() * gridSpacingY * 0.9;\n\n            const newNode = {\n                id: i,\n                x: x,\n                y: y,\n            };\n            newNodes.push(newNode);\n            newAdjList[i] = [];\n        }\n    \n        while (newEdges.length < numEdges) {\n            const from = newNodes[Math.floor(Math.random() * numNodes)];\n            const to = newNodes[Math.floor(Math.random() * numNodes)];\n            if (from.id !== to.id) {\n                const edgeExists = newEdges.some(edge =>\n                    (edge.from.id === from.id && edge.to.id === to.id) ||\n                    (edge.from.id === to.id && edge.to.id === from.id)\n                );\n                if (!edgeExists) {\n                    const newEdge = { from, to, color: defaultEdgeColor };\n                    newEdges.push(newEdge);\n                    newAdjList[from.id].push(to.id);\n                    newAdjList[to.id].push(from.id);\n                }\n            }\n        }\n    \n        setNodes(newNodes);\n        setEdges(newEdges);\n        setAdjList(newAdjList);\n        setNodeCount(newNodes.length);\n    };\n\n    // Function to reset the graph\n    const resetGraph = () => {\n        if(algorithmRunning){\n            return;\n        }\n        setNodes([]);\n        setEdges([]);\n        setClickedMST(false);\n        setClickedTraveral(false);\n        setIsRemovingEdge(false);\n        setText(startingText);\n    };\n    \n    // Function to remove a selected node form the graph\n    const removeNode = () => {\n        if (selectedNode == null) return;\n\n        setNodes(nodes.filter(node => node.id !== selectedNode.id));\n        setEdges(edges.filter(edge => edge.from.id !== selectedNode.id && edge.to.id !== selectedNode.id));\n        setAdjList(prevAdjList => {\n            const newAdjList = { ...prevAdjList };\n            delete newAdjList[selectedNode.id];\n            for (const key in newAdjList) {\n                newAdjList[key] = newAdjList[key].filter(id => id !== selectedNode.id);\n            }\n            return newAdjList;\n        });\n        setSelectedNode(null);\n    };\n\n    // Function to handle clicking on a node\n    const handleNodeClick = (node) => {\n        if (dragging) {\n            return;\n        }\n\n        if (isAddingEdge) {\n            if (selectedNode && selectedNode.id !== node.id) {\n                const edgeExists = edges.some(edge =>\n                    (edge.from.id === selectedNode.id && edge.to.id === node.id) ||\n                    (edge.from.id === node.id && edge.to.id === selectedNode.id)\n                );\n\n                if(!edgeExists){\n                    const newEdge = { from: selectedNode, to: node, color: defaultEdgeColor };\n                    setEdges(prevEdges => [...prevEdges, newEdge]);\n\n                    setAdjList(prevAdjList => {\n                        const newAdjList = { ...prevAdjList };\n                        if (!newAdjList[selectedNode.id]) newAdjList[selectedNode.id] = [];\n                        if (!newAdjList[node.id]) newAdjList[node.id] = [];\n                        newAdjList[selectedNode.id].push(node.id);\n                        newAdjList[node.id].push(selectedNode.id);\n                        return newAdjList;\n                    })\n                }\n                \n                setIsAddingEdge(false);\n                setSelectedNode(null);\n            } else if (selectedNode && selectedNode.id === node.id) {\n                setSelectedNode(null);\n                setIsAddingEdge(false);\n            }\n            setText(startingText);\n        } else if(isDFS){\n            setVisitedNodes([]);\n            setVisitedEdges([]);\n            dfs(node);\n            setIsDFS(false);\n        } else if(isBFS){\n            setVisitedNodes([]);\n            setVisitedEdges([]);\n            bfs(node);\n            setIsBFS(false);\n        }else if(isPrim){\n            setIsPrim(false);\n            animatePrimsAlgorithm(node);\n        }else if(isShortestPath){\n            if(!startNode){\n                setStartNode(node);\n                setText(\"Select End Node for Shortest Path\");\n            }else if(!endNode){\n                setEndNode(node);\n                setText(\"Finding Shortest Path...\");\n                findShortestPath(startNode, node);\n                setIsShortestPath(false);\n            }\n        }else if(isTSP){\n            setVisitedNodes([]);\n            setVisitedEdges([]);\n            tsp(node);\n            setIsTSP(false);\n        }else{\n            if (selectedNode && selectedNode.id === node.id) {\n                setSelectedNode(null); \n                setText(startingText);\n            } else {\n                if(!algorithmRunning){\n                    setSelectedNode(node);\n                }\n                \n            }\n        }\n    }\n\n    // Function to handle mouse down event for dragging\n    const handleMouseDown = () => {\n        setDragging(false);\n    };\n\n    // Function to handle slider change\n    const handleSliderChange = (event) => {\n        const newValue = event.target.value;\n        setSliderValue(newValue);\n        sliderValueRef.current = newValue;\n    }\n\n    // Function to start removing an edge\n    const startRemovingEdge = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        if(isRemovingEdge){\n            setIsRemovingEdge(false);\n            setText(\"\");\n            return;\n        }\n\n        if(edges.length < 1){\n            alert(\"must be at least one edge\");\n            return;\n        }\n        setText(\"Click on an edge to remove it\");\n        setIsRemovingEdge(true);\n    }\n\n    // Function to initiate adding an edge\n    const handleAddEdge = () => {\n        if (selectedNode === null) return;\n\n        if(((nodes.length * (nodes.length - 1)) / 2) === edges.length){\n            alert(\"cannot add another edge\");\n            return;\n        }\n\n        if (nodes.length < 2) {\n            alert(\"You need at least two nodes to add an edge.\");\n            return;\n        }\n        setIsAddingEdge(true);\n        setText(\"Click another node to add edge\");\n    };\n\n    // Function to handle clicking on an edge\n    const handleEdgeClick = (edge) => {\n        if (isRemovingEdge) {\n            setEdges(edges.filter(e => e !== edge));\n            setIsRemovingEdge(false);\n    \n            setAdjList(prevAdjList => {\n                const newAdjList = { ...prevAdjList };\n                newAdjList[edge.from.id] = newAdjList[edge.from.id].filter(id => id !== edge.to.id);\n                newAdjList[edge.to.id] = newAdjList[edge.to.id].filter(id => id !== edge.from.id);\n                return newAdjList;\n            });\n            setText(startingText);\n        }\n    }\n\n    // Function to handle dragging a node\n    const handleDrag = (e, data, node) => {\n        setDragging(true);\n        node.x = data.x;\n        node.y = data.y;\n        setNodes([...nodes]);\n    };\n\n    // Function to handle stopping the drag of a node\n    const handleDragStop = () => {\n        setTimeout(() => {\n            setDragging(false);\n        }, 0);\n    };\n    \n    // Function to start DFS\n    const startDFS = () => {\n        if(algorithmRunning|| isRemovingEdge){\n            return;\n        }\n        setRunningAlgorithm(\"DFS\");\n        setIsDFS(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Node to begin DFS\");\n    }\n\n    // DFS implementatoin\n    const dfs = async (startNode) => {\n        setAlgorithmStarted(true);\n        setText(\"DFS in progress...\");\n\n        const visitedNodeSet = new Set();\n        const visitedEdgeSet = new Set();\n        let stepIndex = 0;\n    \n        const dfsRecursive = async (currentNode) => {\n            if (visitedNodeSet.has(currentNode.id)) {\n                return;\n            }\n    \n            visitedNodeSet.add(currentNode.id);\n            setVisitedNodes(prev => { \n                const updatedNodes = [...prev, { id: currentNode.id, color: treeEdgeColor }];\n                return updatedNodes;\n            });\n    \n            for (let neighborId of adjList[currentNode.id]) {\n                setCurrentNode(currentNode);     \n                const neighborNode = nodes.find(node => node.id === neighborId); \n                const edge = edges.find(e =>                                     \n                    (e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNode.id)\n                );\n\n                setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n               \n                if (!visitedEdgeSet.has(edge)) {\n                    stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if(isStepModeRef.current){\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n                }\n\n                if (!visitedNodeSet.has(neighborId)) { \n                    setVisitedEdges(prev => [\n                        ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                        { ...edge, color: treeEdgeColor }\n                    ]);\n                    visitedEdgeSet.add(edge);\n\n                    await dfsRecursive(neighborNode);\n                } else {\n                    setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== treeEdgeColor)));\n                }\n            }\n\n        };\n    \n        await dfsRecursive(startNode);\n        setCurrentNode(null);\n        setAlgorithmStarted(false);\n        setText(\"Algorithm Done!\");\n        setTimeout(resetEdges, 1000); \n    };\n\n    // Function to start BFS\n    const startBFS = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        setRunningAlgorithm(\"BFS\");\n        setIsBFS(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Node to begin BFS\");\n    }\n\n    // BFS implementation\n    const bfs = async (startNode) => {\n        setAlgorithmStarted(true);\n        setText(\"BFS in progress...\");\n        const visitedNodeSet = new Set();\n        const visitedEdgeSet = new Set();\n        let stepIndex = 0;\n\n    \n        const queue = [startNode];\n        visitedNodeSet.add(startNode.id);\n        setVisitedNodes([{ id: startNode.id, color: treeEdgeColor }]);\n    \n        while (queue.length > 0) {\n            const currentNode = queue.shift();\n            setCurrentNode(currentNode);\n            \n            for (let neighborId of adjList[currentNode.id]) {\n                const neighborNode = nodes.find(node => node.id === neighborId);\n                const edge = edges.find(e => \n                    (e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNode.id)\n                );\n    \n                setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n\n                if(!visitedEdgeSet.has(edge)){\n                    stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if(isStepModeRef.current){\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n                }\n\n                if (!visitedNodeSet.has(neighborId)) {\n                    visitedNodeSet.add(neighborId);\n                    queue.push(neighborNode);\n\n                    setVisitedEdges(prev => [\n                        ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                        { ...edge, color: treeEdgeColor }\n                    ]);\n                    setVisitedNodes(prev => [...prev, { id: neighborId, color: treeEdgeColor }]);\n\n                } else{\n                    setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== treeEdgeColor)));\n                }\n                \n            }\n        }\n    \n        setCurrentNode(null);\n        setAlgorithmStarted(false);\n        setText(\"Algorithm Done!\");\n        setTimeout(resetEdges, 1000); \n    };\n    \n    // Function to animate Kruskall's algorithm\n    const animateKruskalsAlgorithm = () => {\n        if (algorithmRunning || isRemovingEdge) {\n            return;\n        }\n        setRunningAlgorithm(\"Kruskall\");\n        setDisablePause(true);\n        setAlgorithmRunning(true);\n        setText(\"Kruskall's Algorithm in progress...\");\n    \n        const sortedEdges = [...edges].sort((a, b) => calculateEdgeLength(a) - calculateEdgeLength(b));\n        let componentIndex = 0;\n        let currentComponentEdges = [];\n        let currentComponentNodes = [];\n        let uf;\n    \n        const visitedNodeSet = new Set();\n        const foundComponents = [];\n    \n        const dfsComponent = (currentNode, component) => {\n            if (visitedNodeSet.has(currentNode.id)) {\n                return;\n            }\n            visitedNodeSet.add(currentNode.id);\n            component.push(currentNode);\n            adjList[currentNode.id].forEach(neighborId => {\n                const neighborNode = nodes.find(node => node.id === neighborId);\n                if (!visitedNodeSet.has(neighborId)) {\n                    dfsComponent(neighborNode, component);\n                }\n            });\n        };\n    \n        nodes.forEach(node => {\n            if (!visitedNodeSet.has(node.id)) {\n                const component = [];\n                dfsComponent(node, component);\n                foundComponents.push(component);\n            }\n        });\n    \n        setComponents(foundComponents);\n    \n        const animateComponentMST = (component) => {\n            uf = new UnionFind(nodeCount); \n            currentComponentEdges = [];\n            currentComponentNodes = component.map(node => node.id);\n            let edgeIndex = 0;\n            const color = componentColors[componentIndex % componentColors.length];\n    \n            const highlightNodesAndEdges = (index) => {\n                if (index < currentComponentEdges.length) {\n                    const { from, to } = currentComponentEdges[index];\n                    setVisitedNodes(prev => [...prev, { id: from.id, color }, { id: to.id, color }]);\n                    setVisitedEdges(prev => [...prev, currentComponentEdges[index]]);\n                    setTimeout(() => highlightNodesAndEdges(index + 1), totalSliderCount - sliderValueRef.current); \n                } else {\n                    componentIndex++;\n                    if (componentIndex < foundComponents.length) {\n                        setTimeout(() => animateComponentMST(foundComponents[componentIndex]), 0); \n                    } else {\n                        setTimeout(resetEdges, 1000);\n                        setText(\"Algorithm Done!\");\n                    }\n                }\n            };\n    \n            const animateStep = () => {\n                if (currentComponentEdges.length === component.length - 1 || edgeIndex >= sortedEdges.length) {\n                    highlightNodesAndEdges(0);\n                    return;\n                }\n    \n                const edge = sortedEdges[edgeIndex];\n                edgeIndex++;\n    \n                if (currentComponentNodes.includes(edge.from.id) && currentComponentNodes.includes(edge.to.id) &&\n                    uf.find(edge.from.id) !== uf.find(edge.to.id)) {\n                    uf.union(edge.from.id, edge.to.id);\n                    currentComponentEdges.push({ ...edge, color });\n                }\n    \n                animateStep();\n            };\n    \n            animateStep();\n        };\n    \n        if (foundComponents.length > 0) {\n            animateComponentMST(foundComponents[0]);\n        } else {\n            console.log(\"No components found.\");\n            setAlgorithmRunning(false);\n        }\n    };\n\n     // Union-Find data structure for Kruskal's algorithm\n    class UnionFind {\n        constructor(size) {\n            this.parent = Array(size).fill(null).map((_, index) => index);\n            this.rank = Array(size).fill(0);\n        }\n\n        find(node) {\n            if (this.parent[node] !== node) {\n                this.parent[node] = this.find(this.parent[node]);\n            }\n            return this.parent[node];\n        }\n\n        union(node1, node2) {\n            const root1 = this.find(node1);\n            const root2 = this.find(node2);\n\n            if (root1 !== root2) {\n                if (this.rank[root1] > this.rank[root2]) {\n                    this.parent[root2] = root1;\n                } else if (this.rank[root1] < this.rank[root2]) {\n                    this.parent[root1] = root2;\n                } else {\n                    this.parent[root2] = root1;\n                    this.rank[root1] += 1;\n                }\n            }\n        }\n    }\n\n    // Function to start Prim's algorithm\n    const startPrim = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        setRunningAlgorithm(\"Prim\");\n        setIsPrim(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Node to begin Prim's Algorithm\");\n    }\n\n    // Function to animate Prim's algorithm\n    const animatePrimsAlgorithm = async (startNode) => {\n        setAlgorithmStarted(true);\n        setText(\"Prim's Algorithm in progress...\");\n        const visitedNodeSet = new Set();\n        const edgeQueue = [];\n        let stepIndex = 0;\n    \n        const addEdges = (node) => {\n            visitedNodeSet.add(node.id);\n            setVisitedNodes(prev => [...prev, { id: node.id, color: treeEdgeColor }]);\n            (adjList[node.id] || []).forEach(neighborId => {\n                if (!visitedNodeSet.has(neighborId)) {\n                    const edge = edges.find(e => \n                        (e.from.id === node.id && e.to.id === neighborId) ||\n                        (e.from.id === neighborId && e.to.id === node.id)\n                    );\n                    if (edge) {\n                        edgeQueue.push({ ...edge, length: calculateEdgeLength(edge) });\n                    }\n                }\n            });\n            edgeQueue.sort((a, b) => a.length - b.length); \n        };\n    \n        const animateStep = async () => {\n            if (visitedNodeSet.size === nodes.length || edgeQueue.length === 0) {\n                setAlgorithmStarted(false);\n                setText(\"Algorithm Done!\");\n                setTimeout(resetEdges, 1000);\n                return;\n            }\n    \n            const edgesToHighlight = edgeQueue.slice(0, 1); \n            edgesToHighlight.forEach(edge => {\n                setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n            });\n    \n            stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if(isStepModeRef.current){\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n    \n            const edge = edgeQueue.shift();\n            const { from, to } = edge;\n            const fromInMST = visitedNodeSet.has(from.id);\n            const toInMST = visitedNodeSet.has(to.id);\n    \n            if ((fromInMST && !toInMST) || (!fromInMST && toInMST)) {\n                setVisitedEdges(prev => [\n                    ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                    { ...edge, color: treeEdgeColor }\n                ]);\n    \n                if (fromInMST && !toInMST) {\n                    addEdges(to);\n                } else if (!fromInMST && toInMST) {\n                    addEdges(from);\n                }\n            } else {\n                setVisitedEdges(prev => [\n                    ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                    { ...edge, color: defaultEdgeColor }\n                ]);\n            }\n    \n            animateStep();\n        };\n    \n        addEdges(startNode);\n        animateStep();\n    };\n    \n    // Function to set traversal mode\n    const setClickTraversal = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedTraveral(true);\n    }\n\n    // Function to set MST mode\n    const setClickMST = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedMST(true);\n    }\n\n    // Function to set Paths mode\n    const setClickPath = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedPaths(true);\n    }\n\n    // Functino to go back from algorithm selection\n    const goBack = () => {\n\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        \n        setClickedMST(false);\n        setClickedTraveral(false);\n        setClickedPaths(false);\n        setAlgorithmRunning(false);\n        setText(startingText);\n    }\n\n    // Function to find connected components in a graph\n    const findConnectedComponents = async () => {\n        setRunningAlgorithm(\"Connected\");\n        setAlgorithmStarted(true);\n        setText(\"Connected Components in progress...\");\n        setAlgorithmRunning(true);\n        const visitedNodeSet = new Set();\n        const visitedEdgeSet = new Set();\n        let componentIndex = 0;\n        let stepIndex = 0;\n    \n        const dfsRecursive = async (currentNode, componentColor) => {\n            if (visitedNodeSet.has(currentNode.id)) {\n                return;\n            }\n    \n            visitedNodeSet.add(currentNode.id);\n            setVisitedNodes(prev => { \n                const updatedNodes = [...prev, { id: currentNode.id, color: componentColor }];\n                return updatedNodes;\n            });\n    \n            for (let neighborId of adjList[currentNode.id]) {\n                setCurrentNode(currentNode);     \n                const neighborNode = nodes.find(node => node.id === neighborId); \n                const edge = edges.find(e =>                                     \n                    (e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNode.id)\n                );\n    \n                setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n    \n                if (!visitedEdgeSet.has(edge)) {\n                    stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if(isStepModeRef.current){\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n                }\n    \n                if (!visitedNodeSet.has(neighborId)) { \n                    setVisitedEdges(prev => [\n                        ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                        { ...edge, color: componentColor }\n                    ]);\n                    visitedEdgeSet.add(edge);\n    \n                    await dfsRecursive(neighborNode, componentColor);\n                } else {\n                    setVisitedEdges(prev => [\n                        ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                        { ...edge, color: componentColor }\n                    ]);\n                }\n            }\n        };\n    \n        for (let node of nodes) {\n            if (!visitedNodeSet.has(node.id)) {\n                const componentColor = componentColors[componentIndex % componentColors.length];\n                componentIndex++;\n                await dfsRecursive(node, componentColor);\n            }\n        }\n    \n        setCurrentNode(null);\n        setAlgorithmStarted(false);\n        setText(\"Algorithm Done!\");\n        setTimeout(resetEdges, 1000); \n    };\n    \n    // Function to start shortest path algorithm\n    const startShortestPath = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        setRunningAlgorithm(\"SP\");\n\n        setIsShortestPath(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Start Node for Shortest Path\");\n    }\n\n    // Function to find the shortest path between two nodes\n    const findShortestPath = async (startNode, targetNode) => {\n        setAlgorithmStarted(true);\n        setText(\"Shortest Path Algorithm in progress...\");\n        const dist = {};\n        const prev = {};\n        const visitedEdgeSet = new Set();\n        const visitedNodeSet = new Set();\n        const priorityQueue = new Set(nodes.map(node => node.id)); \n        let stepIndex = 0;\n    \n        nodes.forEach(node => {\n            dist[node.id] = Infinity;\n            prev[node.id] = null;\n        });\n        dist[startNode.id] = 0;\n    \n        const getMinDistNode = () => {\n            let minNode = null;\n            priorityQueue.forEach(nodeId => {\n                if (minNode === null || dist[nodeId] < dist[minNode]) {\n                    minNode = nodeId;\n                }\n            });\n            return minNode;\n        };\n    \n        while (priorityQueue.size > 0) {\n            const currentNodeId = getMinDistNode();\n            const currentNode = nodes.find(node => node.id === currentNodeId);\n    \n            if (dist[currentNodeId] === Infinity) break;\n    \n            priorityQueue.delete(currentNodeId);\n    \n            if (currentNodeId === targetNode.id) {\n                break;\n            }\n    \n            for (let neighborId of adjList[currentNode.id]) {\n                const neighborNode = nodes.find(node => node.id === neighborId);\n                const edge = edges.find(e => \n                    (e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNode.id)\n                );\n    \n                setCurrentNode(currentNode);\n                setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n    \n                if (!visitedEdgeSet.has(edge)) {\n                    stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if(isStepModeRef.current){\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n                    visitedEdgeSet.add(edge);\n                }\n    \n                const alt = dist[currentNode.id] + calculateEdgeLength(edge);\n    \n                if (alt < dist[neighborId]) {\n                    dist[neighborId] = alt;\n                    prev[neighborId] = currentNode.id;\n\n                    setVisitedEdges(prev => [\n                        ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                        { ...edge, color: treeEdgeColor }\n                    ]);\n    \n                    visitedEdgeSet.add(edge);\n                } else {\n                    setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color === currentEdgeColor)));\n                }\n            }\n    \n            visitedNodeSet.add(currentNode.id);\n            setVisitedNodes(prev => {\n                const updatedNodes = [...prev, { id: currentNode.id, color: treeEdgeColor }];\n                return updatedNodes;\n            });\n        }\n    \n        setStartNode(null);\n        setEndNode(null);\n        setAlgorithmStarted(false);\n        setCurrentNode(null);\n        setText(\"Algorithm Done!\");\n    \n        const path = [];\n\n        let currentNodeId = targetNode.id;\n        while (currentNodeId !== null) {\n            path.unshift(currentNodeId);\n            currentNodeId = prev[currentNodeId];\n        }\n\n        if(path.length === 1){\n            setText(\"No path Found!\");\n            setTimeout(resetEdges, 1000);\n            return;\n        }\n    \n        setVisitedEdges(prev => {\n            return prev.map(e => {\n                if (path.includes(e.from.id) && path.includes(e.to.id)) {\n                    return { ...e, color: treeEdgeColor };\n                } else {\n                    return { ...e, color: defaultEdgeColor };\n                }\n            });\n        });\n\n        setVisitedNodes(prev => {\n            return nodes.map(node => {\n                if (path.includes(node.id)) {\n                    return { id: node.id, color: treeEdgeColor };\n                } else {\n                    return { id: node.id, color: \"black\" };\n                }\n            });\n        });\n    \n        setTimeout(resetEdges, 1000);\n    };\n\n    // Function to color graph\n    const graphColoring = async () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        setRunningAlgorithm(\"Color\");\n        setDisablePause(true);\n        setAlgorithmRunning(true);\n        setText(\"Graph Coloring in progress...\");\n\n        const availableColors = componentColors;\n        const colors = {};\n\n        const colorGraph = (node) => {\n            const neighborColors = adjList[node.id].map(neighborId => colors[neighborId]);\n            for(let color of availableColors){\n                if(!neighborColors.includes(color)){\n                    colors[node.id] = color;\n                    break;\n                }\n            }\n        }\n\n        for(let node of nodes){\n            colorGraph(node);\n            setVisitedNodes(prev => [...prev, {id: node.id, color: colors[node.id]}]);\n            await new Promise(resolve => setTimeout(resolve, totalSliderCount - sliderValueRef.current));\n        }\n\n        setText(\"Algorithm Done!\");\n        setTimeout(resetEdges, 1000);\n    }\n\n    // Function to start TSP\n    const startTSP = async () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        setRunningAlgorithm(\"TSP\");\n        setIsTSP(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Node to begin TSP\");\n    }\n\n    // Function to animate TSP\n    const tsp = async (node) => {\n        setAlgorithmStarted(true);\n        setText(\"TSP in progress...\");\n        const startNode = node;\n        const unvisited = new Set(nodes.map(node => node.id));\n        const visited = [];\n        const stack = [];\n        let currentNode = startNode;\n        let stepIndex = 0;\n    \n        unvisited.delete(currentNode.id);\n        visited.push(currentNode);\n        setVisitedNodes([{ id: currentNode.id, color: treeEdgeColor }]);\n    \n        while (unvisited.size > 0) {\n            let nearestNode = null;\n            let shortestDistance = Infinity;\n            let currentEdge = null;\n    \n            for (let neighborId of unvisited) {\n                setCurrentNode(currentNode);\n                const neighborNode = nodes.find(node => node.id === neighborId);\n                // eslint-disable-next-line\n                const edge = edges.find(e =>\n                    (e.from.id === currentNode.id && e.to.id === neighborNode.id) ||\n                    (e.from.id === neighborNode.id && e.to.id === currentNode.id)\n                );\n    \n                if (edge) {\n                    setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n                    stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if(isStepModeRef.current){\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n                    const distance = calculateEdgeLength({ from: currentNode, to: neighborNode });\n                    setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)));\n                    if (distance < shortestDistance) {\n                        shortestDistance = distance;\n                        nearestNode = neighborNode;\n                        currentEdge = edge;\n                    }\n                }\n            }\n    \n            if (nearestNode && currentEdge) {\n                stack.push({ currentNode, nearestNode, shortestDistance });\n    \n                setVisitedEdges(prev => [...prev, { ...currentEdge, color: treeEdgeColor }]);\n                setVisitedNodes(prev => [...prev, { id: nearestNode.id, color: treeEdgeColor }]);\n    \n                stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if(isStepModeRef.current){\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n    \n                currentNode = nearestNode;\n                unvisited.delete(currentNode.id);\n                visited.push(currentNode);\n            } else {\n                const previousState = stack.pop();\n                if (previousState) {\n                    currentNode = previousState.currentNode;\n                } else {\n                    break;\n                }\n            }\n        }\n    \n        setCurrentNode(null);\n        setAlgorithmStarted(false);\n        setText(\"Algorithm Done!\");\n        setTimeout(resetEdges, 1000);\n    };\n\n    // Function to step in the algorithm\n    const nextStep = () => {\n        if(isPausedRef.current){\n            setIsStepMode(true);\n            if(isPausedRef.current){\n                setCurrentStep(prev => {\n                    const next = prev + 1;\n                    currentStepRef.current = next;\n                    return next;\n                });\n            }\n            setIsPaused(false);\n            isPausedRef.current = false;\n        }\n    };\n\n    // Function to toggle button \n    const togglePlayPause = () => {\n        if (isPausedRef.current) {\n            setIsStepMode(false);\n            setIsPaused(false);\n            isPausedRef.current = false;\n            switch (runningAlgorithm) {\n                case \"DFS\":\n                    setText(\"DFS in progress...\")\n                    break;\n                case \"BFS\":\n                    setText(\"BFS in progress...\")\n                    break;\n                case \"Kruskall\":\n                    setText(\"Kruskall's Algorithm in progress...\")\n                    break;\n                case \"Prim\":\n                    setText(\"Prim's Algorithm in progress...\")\n                    break;\n                case \"SP\":\n                    setText(\"Shortest Path Algorithm in progress...\")\n                    break;\n                case \"TSP\":\n                    setText(\"TSP in progress...\")\n                    break;\n                case \"Connected\":\n                    setText(\"Connected Components in progress..\")\n                    break;\n                case \"Colors\":\n                    setText(\"Graph Coloring in progress...\")\n                    break;\n                }\n        } else {\n            setIsStepMode(false);\n            setIsPaused(true);\n            isPausedRef.current = true;\n            setText(\"Algorithm is Paused\");\n        }\n    };\n\n    // Function to sleep and check for pausing\n    const sleep = (duration) => {\n        return new Promise((resolve) => {\n            const interval = 50;\n            let elapsed = 0;\n    \n            const checkPauseAndSleep = () => {\n                if (isPausedRef.current) {\n                    const checkPause = () => {\n                        if(isStepModeRef.current){\n                            setIsStepMode(true);\n                            resolve();\n                        }else if (!isPausedRef.current){\n                            resolve();\n                        }else {\n                            setTimeout(checkPause, interval);\n                        }\n                    };\n                    checkPause();\n                } else {\n                    if (elapsed < duration) {\n                        elapsed += interval;\n                        setTimeout(checkPauseAndSleep, interval);\n                    } else {\n                        resolve();\n                    }\n                }\n            };\n    \n            checkPauseAndSleep();\n        });\n    };\n\n    // JSX for rendering the component\n    return (\n        <div className=\"main-container\">\n            <div className=\"button-container\">\n                <h3>Graph Creation</h3>\n\n                {/* Graph Creation and Updating when node selected */}\n                {selectedNode && (\n                <button className=\"graph-button\" onClick={handleAddEdge}>Add Edge</button>)}\n                {selectedNode && (\n                <button className=\"graph-button\" onClick={removeNode}>Remove Node</button>)}\n\n                {/* Graph Creation and Updating */}\n                {!selectedNode && (\n                <button className=\"graph-button\" onClick={addNode}>Add Node</button>)}\n                {!selectedNode && (\n                <button className=\"graph-button\" onClick={generateGraph}>Generate Graph</button>)}\n                {!selectedNode && nodes.length > 0 && (\n                <button className=\"graph-button\" onClick={resetGraph}>Reset Graph</button>)}\n\n                {!selectedNode && edges.length > 0 && (\n                    <h3>Edge Editing</h3>)}\n                {!selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={() => {if(edges.length>0){setShowWeights(!showWeights)}}}>\n                        {showWeights ? 'Hide Weights' : 'Show Weights'}\n                    </button>)}\n                {!selectedNode && (edges.length >= 1) && (\n                <button className=\"graph-button\" onClick={startRemovingEdge}>Remove Edge</button>)}\n\n                \n                {algorithmStarted && !disablePause && (\n                    <>\n                        <h3>Control</h3>\n                        <button className=\"graph-button\" onClick={nextStep}>Next Step</button>\n                        <button className=\"graph-button\" onClick={togglePlayPause}>\n                            {((isPaused || isStepMode) && !disablePause) ? \"Play\" : \"Pause\"}\n                        </button>\n                    </>\n                )}\n\n            </div>\n                \n            <div className=\"graph-content\">\n                <div className=\"slider-container\">\n                    <h4 className=\"slider-label\">Algorithm Speed</h4>\n                    <div className=\"slider-content\">\n                        <h4>Slow</h4>\n                        <input \n                            type=\"range\" \n                            min=\"100\" \n                            max=\"2000\" \n                            step=\"100\" \n                            value={sliderValue} \n                            onChange={handleSliderChange}\n                        />\n                        <h4>Fast</h4>\n                    </div>\n                </div>\n                <div className=\"graph-box\">\n                <svg className=\"edges-svg\" style={{ position: 'absolute', width: '100%', height: '100%' }}>\n                    {edges.map((edge, index) => {\n                        const midpoint = calculateMidpoint(edge);\n                        const angle = calculateAngle(edge);\n                        return (\n                            <React.Fragment key={index}>\n                                <line\n                                    x1={edge.from.x + 10}\n                                    y1={edge.from.y + 10}\n                                    x2={edge.to.x + 10}\n                                    y2={edge.to.y + 10}\n                                    stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                    strokeWidth={isRemovingEdge ? 8 : 4}\n                                    onClick={() => handleEdgeClick(edge)}\n                                />\n                                {showWeights && (\n                                    <text\n                                        x={midpoint.x + 10}\n                                        y={midpoint.y + 7}\n                                        fill=\"black\"\n                                        fontSize=\"12\"\n                                        transform={`rotate(${angle}, ${midpoint.x + 10}, ${midpoint.y + 10})`}\n                                        textAnchor=\"middle\"\n                                    >\n                                        {Math.round(calculateEdgeLength(edge))}\n                                    </text>)}\n                            </React.Fragment>\n                        );\n                    })}\n                </svg>\n                    {nodes.map(node => (\n                        <Draggable\n                            key={node.id}\n                            position={{ x: node.x, y: node.y }}\n                            bounds=\"parent\"\n                            onStart={handleMouseDown}\n                            onDrag={(e, data) => handleDrag(e, data, node)}\n                            onStop={handleDragStop}\n                        >\n                            <div\n                                className=\"graph-node\"\n                                onClick={() => handleNodeClick(node)}\n                                style={{\n                                    border: (isTSP || isBFS || isPrim || isDFS || isShortestPath) ? (startNode && startNode.id === node.id ? 'none' : '2px solid red') : (selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none'),\n                                    backgroundColor: \n                                    node.id === currentNode?.id ? 'red' : \n                                    visitedNodes.some(vn => vn.id === node.id) ? \n                                        (visitedNodes.find(vn => vn.id === node.id)?.color || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\") \n                                        : 'black',\n                                    pointerEvents: 'auto',\n                                    position: 'absolute'\n                                }}\n                            >\n                            </div>\n                        </Draggable>\n                    ))}\n                </div>\n                <h3 class-name=\"status-text\">{text}</h3>\n            </div>\n\n            <div className=\"button-container\">    \n                {/* Traversal and MST and Path*/}\n                {edges.length > 0 && !selectedNode &&(\n                <h3>Algorithms</h3>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickTraversal}>Traversals →</button>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickMST}>MSTs →</button>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickPath}>Paths →</button>)}\n\n\n                {/* Specific Algorithms */}\n                {clickedMST && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={animateKruskalsAlgorithm}>Kruskall</button>)}\n                {clickedMST && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startPrim}>Prim</button>)}\n\n                {clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\", backgroundColor: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startDFS}>DFS</button>)}\n                {clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startBFS}>BFS</button>)}\n\n                {clickedPaths && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startShortestPath}>Shortest Path</button>)}\n                {clickedPaths && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startTSP}>TSP</button>)}\n                \n                {!clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={findConnectedComponents}>Connected Components</button>)}\n                {!clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={graphColoring}>Graph Coloring</button>)}\n                \n                \n\n                {/* Back Button */}\n                {(clickedTraversal || clickedMST || clickedPaths) && !selectedNode && (\n                <button className=\"graph-button\" onClick={goBack}>← Back</button>)} \n                \n            </div>\n        </div>\n    );\n};\n\nexport default Graphs;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}