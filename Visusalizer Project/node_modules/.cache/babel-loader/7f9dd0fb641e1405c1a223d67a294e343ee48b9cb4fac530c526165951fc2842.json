{"ast":null,"code":"var _jsxFileName = \"/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport Draggable from 'react-draggable';\nimport { addNode, generateGraph, resetGraph, removeNode, handleNodeClick, handleMouseDown, handleSliderChange, startRemovingEdge, handleAddEdge, handleEdgeClick, handleDrag, handleDragStop } from './NodeFunctions';\nimport { calculateEdgeLength, calculateMidpoint, calculateAngle, sleep } from './GraphUtilities.js';\nimport { startDFS, startBFS, startPrim, animateKruskalsAlgorithm, graphColoring, startTSP, findConnectedComponents, findStrongComponents, startShortestPath } from './Algorithms';\nimport UnionFind from './UnionFind';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Graphs = () => {\n  _s();\n  // State variables to manage graph nodes, edges, and various UI states\n  const [text, setText] = useState(\"Add Node or Generate Graph to Begin\");\n  const [nodes, setNodes] = useState([]);\n  const [nodeCount, setNodeCount] = useState(0);\n  const [edges, setEdges] = useState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isAddingEdge, setIsAddingEdge] = useState(false);\n  const [dragging, setDragging] = useState(false);\n  const [isRemovingEdge, setIsRemovingEdge] = useState(false);\n  // eslint-disable-next-line\n  const [visitedNodes, setVisitedNodes] = useState([]);\n  const [visitedEdges, setVisitedEdges] = useState([]);\n  const [adjList, setAdjList] = useState([]);\n  const [clickedTraversal, setClickedTraveral] = useState(false);\n  const [clickedMST, setClickedMST] = useState(false);\n  const [clickedPaths, setClickedPaths] = useState(false);\n  const [isDFS, setIsDFS] = useState(false);\n  const [isBFS, setIsBFS] = useState(false);\n  const [isPrim, setIsPrim] = useState(false);\n  const [isTSP, setIsTSP] = useState(false);\n  const [algorithmRunning, setAlgorithmRunning] = useState(false);\n  const [isShortestPath, setIsShortestPath] = useState(false);\n  const [startNode, setStartNode] = useState(null);\n  const [endNode, setEndNode] = useState(null);\n  const [componentColors] = useState([\"blue\", \"green\", \"orange\", \"purple\", \"pink\", \"yellow\", \"gold\", \"coral\", \"crimson\", \"cyan\", \"darkgreen\", \"drakblue\", \"darkorange\", \"darkorchid\", \"darkred\", \"deeppink\", \"darkviolet\", \"deepskyblue\", \"forestgreen\", \"fuchsia\"]);\n  const [components, setComponents] = useState([]);\n  const [showWeights, setShowWeights] = useState(false);\n  const [sliderValue, setSliderValue] = useState(250);\n  const [currentNode, setCurrentNode] = useState(null);\n  const sliderValueRef = useRef(sliderValue);\n  const totalSliderCount = 2100;\n  const [isPaused, setIsPaused] = useState(false);\n  const isPausedRef = useRef(isPaused);\n  const [currentStep, setCurrentStep] = useState(0);\n  const currentStepRef = useRef(currentStep);\n  const [isStepMode, setIsStepMode] = useState(false);\n  const isStepModeRef = useRef(isStepMode);\n  const [disablePause, setDisablePause] = useState(false);\n  const [algorithmStarted, setAlgorithmStarted] = useState(false);\n  const [runningAlgorithm, setRunningAlgorithm] = useState(null);\n  const [isDirected, setIsDirected] = useState(false);\n\n  // Constants for UI text and colors\n  const highlightedButtonColor = \"lightblue\";\n  const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n  const treeEdgeColor = \"blue\";\n  const currentEdgeColor = \"red\";\n  const defaultEdgeColor = \"grey\";\n\n  // Use Effect to differentiate between modes\n  useEffect(() => {\n    isStepModeRef.current = isStepMode;\n  }, [isStepMode]);\n\n  // Use Effect to allow pausing mid-alg\n  useEffect(() => {\n    isPausedRef.current = isPaused;\n  }, [isPaused]);\n\n  // Use Effect to allow stopping mid-alg\n  useEffect(() => {\n    currentStepRef.current = currentStepRef;\n  }, [currentStepRef]);\n\n  // Function to reset edges to default state\n  const resetEdges = () => {\n    setVisitedEdges([]);\n    setVisitedNodes([]);\n    setText(startingText);\n    setAlgorithmRunning(false);\n    setCurrentStep(0);\n    currentStepRef.current = 0;\n    setDisablePause(false);\n    setRunningAlgorithm(null);\n  };\n\n  // Function to calculate edge length\n  const calculateEdgeLength = edge => {\n    const dx = edge.from.x - edge.to.x;\n    const dy = edge.from.y - edge.to.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  };\n\n  // Function to calculate midpoiint of an edge\n  const calculateMidpoint = edge => {\n    const midX = (edge.from.x + edge.to.x) / 2;\n    const midY = (edge.from.y + edge.to.y) / 2;\n    return {\n      x: midX,\n      y: midY\n    };\n  };\n\n  // Fucntion to calculate angle of an edge\n  const calculateAngle = edge => {\n    const dx = edge.to.x - edge.from.x;\n    const dy = edge.to.y - edge.from.y;\n    let flipped = false;\n    let angle = Math.atan2(dy, dx) * (180 / Math.PI);\n    if (dx >= 0 && dy < 0) {} else if (dx < 0 && dy < 0) {\n      angle += 180;\n      flipped = true;\n    } else if (dx < 0 && dy >= 0) {\n      angle -= 180;\n      flipped = true;\n    } else if (dx >= 0 && dy >= 0) {}\n    return {\n      angle: angle,\n      flipped: flipped\n    };\n  };\n\n  // Union-Find data structure for Kruskal's algorithm\n  class UnionFind {\n    constructor(size) {\n      this.parent = Array(size).fill(null).map((_, index) => index);\n      this.rank = Array(size).fill(0);\n    }\n    find(node) {\n      if (this.parent[node] !== node) {\n        this.parent[node] = this.find(this.parent[node]);\n      }\n      return this.parent[node];\n    }\n    union(node1, node2) {\n      const root1 = this.find(node1);\n      const root2 = this.find(node2);\n      if (root1 !== root2) {\n        if (this.rank[root1] > this.rank[root2]) {\n          this.parent[root2] = root1;\n        } else if (this.rank[root1] < this.rank[root2]) {\n          this.parent[root1] = root2;\n        } else {\n          this.parent[root2] = root1;\n          this.rank[root1] += 1;\n        }\n      }\n    }\n  }\n\n  // Function to set traversal mode\n  const setClickTraversal = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedTraveral(true);\n  };\n\n  // Function to set MST mode\n  const setClickMST = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedMST(true);\n  };\n\n  // Function to set Paths mode\n  const setClickPath = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedPaths(true);\n  };\n\n  // Functino to go back from algorithm selection\n  const goBack = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setClickedMST(false);\n    setClickedTraveral(false);\n    setClickedPaths(false);\n    setAlgorithmRunning(false);\n    setText(startingText);\n  };\n\n  // Function to step in the algorithm\n  const nextStep = () => {\n    if (isPausedRef.current) {\n      setIsStepMode(true);\n      if (isPausedRef.current) {\n        setCurrentStep(prev => {\n          const next = prev + 1;\n          currentStepRef.current = next;\n          return next;\n        });\n      }\n      setIsPaused(false);\n      isPausedRef.current = false;\n    }\n  };\n\n  // Function to toggle button \n  const togglePlayPause = () => {\n    if (isPausedRef.current) {\n      setIsStepMode(false);\n      setIsPaused(false);\n      isPausedRef.current = false;\n      switch (runningAlgorithm) {\n        case \"DFS\":\n          setText(\"DFS in progress...\");\n          break;\n        case \"BFS\":\n          setText(\"BFS in progress...\");\n          break;\n        case \"Kruskall\":\n          setText(\"Kruskall's Algorithm in progress...\");\n          break;\n        case \"Prim\":\n          setText(\"Prim's Algorithm in progress...\");\n          break;\n        case \"SP\":\n          setText(\"Shortest Path Algorithm in progress...\");\n          break;\n        case \"TSP\":\n          setText(\"TSP in progress...\");\n          break;\n        case \"Connected\":\n          setText(\"Connected Components in progress..\");\n          break;\n        case \"Colors\":\n          setText(\"Graph Coloring in progress...\");\n          break;\n      }\n    } else {\n      setIsStepMode(false);\n      setIsPaused(true);\n      isPausedRef.current = true;\n      setText(\"Algorithm is Paused\");\n    }\n  };\n\n  // Function to sleep and check for pausing\n  const sleep = duration => {\n    return new Promise(resolve => {\n      const interval = 50;\n      let elapsed = 0;\n      const checkPauseAndSleep = () => {\n        if (isPausedRef.current) {\n          const checkPause = () => {\n            if (isStepModeRef.current) {\n              setIsStepMode(true);\n              resolve();\n            } else if (!isPausedRef.current) {\n              resolve();\n            } else {\n              setTimeout(checkPause, interval);\n            }\n          };\n          checkPause();\n        } else {\n          if (elapsed < duration) {\n            elapsed += interval;\n            setTimeout(checkPauseAndSleep, interval);\n          } else {\n            resolve();\n          }\n        }\n      };\n      checkPauseAndSleep();\n    });\n  };\n\n  // Function to switch between directed and undirected graphs\n  const toggleGraphType = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    if (isDirected) {\n      const consolidatedEdges = [];\n      const edgeSet = new Set();\n      edges.forEach(edge => {\n        const edgeKey = `${Math.min(edge.from.id, edge.to.id)}-${Math.max(edge.from.id, edge.to.id)}`;\n        if (!edgeSet.has(edgeKey)) {\n          edgeSet.add(edgeKey);\n          consolidatedEdges.push(edge);\n        }\n      });\n      const newAdjList = {};\n      consolidatedEdges.forEach(edge => {\n        if (!newAdjList[edge.from.id]) newAdjList[edge.from.id] = [];\n        if (!newAdjList[edge.to.id]) newAdjList[edge.to.id] = [];\n        newAdjList[edge.from.id].push(edge.to.id);\n        newAdjList[edge.to.id].push(edge.from.id);\n      });\n      setEdges(consolidatedEdges);\n      setAdjList(newAdjList);\n    }\n    setIsDirected(!isDirected);\n  };\n\n  // JSX for rendering the component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Graph Creation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 17\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: handleAddEdge,\n        children: \"Add Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: removeNode,\n        children: \"Remove Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 17\n      }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: addNode,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 17\n      }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: generateGraph,\n        children: \"Generate Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }, this), !selectedNode && nodes.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: resetGraph,\n        children: \"Reset Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 17\n      }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Edge Editing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 21\n      }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: toggleGraphType,\n        children: isDirected ? 'Set Undirected' : 'Set Directed'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 21\n      }, this), !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: () => {\n          if (edges.length > 0) {\n            setShowWeights(!showWeights);\n          }\n        },\n        children: showWeights ? 'Hide Weights' : 'Show Weights'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 21\n      }, this), !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: startRemovingEdge,\n        children: \"Remove Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 17\n      }, this), algorithmStarted && !disablePause && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: nextStep,\n          children: \"Next Step\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: togglePlayPause,\n          children: (isPaused || isStepMode) && !disablePause ? \"Play\" : \"Pause\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"slider-label\",\n          children: \"Algorithm Speed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Slow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"100\",\n            max: \"2000\",\n            step: \"100\",\n            value: sliderValue,\n            onChange: handleSliderChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Fast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"edges-svg\",\n          style: {\n            position: 'absolute',\n            width: '100%',\n            height: '100%'\n          },\n          children: edges.map((edge, index) => {\n            var _visitedEdges$find, _visitedEdges$find2, _visitedEdges$find3;\n            const midpoint = calculateMidpoint(edge);\n            const {\n              angle,\n              flipped\n            } = calculateAngle(edge);\n            const arrowLength = 15;\n            const arrowAngle = 30;\n            const nodeRadius = 10;\n            const dx = edge.to.x - edge.from.x;\n            const dy = edge.to.y - edge.from.y;\n            const length = Math.sqrt(dx * dx + dy * dy);\n            const unitDx = dx / length;\n            const unitDy = dy / length;\n            const baseX = edge.to.x - nodeRadius * unitDx;\n            const baseY = edge.to.y - nodeRadius * unitDy;\n            const edgeCount = edges.filter(e => e.from.id === edge.from.id && e.to.id === edge.to.id || e.from.id === edge.to.id && e.to.id === edge.from.id).length;\n            let offsetX = 0;\n            let offsetY = 0;\n            if (edgeCount > 1) {\n              offsetX = 5 * unitDy;\n              offsetY = -5 * unitDx;\n            }\n            const adjustedFromX = edge.from.x + 10 + offsetX;\n            const adjustedFromY = edge.from.y + 10 + offsetY;\n            const adjustedToX = baseX + 10 + offsetX;\n            const adjustedToY = baseY + 10 + offsetY;\n            const arrowBaseX = baseX + offsetX + 10;\n            const arrowBaseY = baseY + offsetY + 10;\n            let arrowX1, arrowY1, arrowX2, arrowY2;\n            if (flipped) {\n              arrowX1 = arrowBaseX + arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n              arrowY1 = arrowBaseY + arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n              arrowX2 = arrowBaseX + arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n              arrowY2 = arrowBaseY + arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n            } else {\n              arrowX1 = arrowBaseX - arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n              arrowY1 = arrowBaseY - arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n              arrowX2 = arrowBaseX - arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n              arrowY2 = arrowBaseY - arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n            }\n            return /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                x1: adjustedFromX,\n                y1: adjustedFromY,\n                x2: adjustedToX,\n                y2: adjustedToY,\n                stroke: ((_visitedEdges$find = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find === void 0 ? void 0 : _visitedEdges$find.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                strokeWidth: isRemovingEdge ? 8 : 4,\n                onClick: () => handleEdgeClick(edge)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 433,\n                columnNumber: 33\n              }, this), isDirected && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                  x1: adjustedToX,\n                  y1: adjustedToY,\n                  x2: arrowX1,\n                  y2: arrowY1,\n                  stroke: ((_visitedEdges$find2 = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find2 === void 0 ? void 0 : _visitedEdges$find2.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                  strokeWidth: isRemovingEdge ? 8 : 4\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 444,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n                  x1: adjustedToX,\n                  y1: adjustedToY,\n                  x2: arrowX2,\n                  y2: arrowY2,\n                  stroke: ((_visitedEdges$find3 = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find3 === void 0 ? void 0 : _visitedEdges$find3.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                  strokeWidth: isRemovingEdge ? 8 : 4\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 452,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true), showWeights && /*#__PURE__*/_jsxDEV(\"text\", {\n                x: midpoint.x + 10,\n                y: edgeCount > 1 ? midpoint.y + 2 : midpoint.y + 7,\n                fill: \"black\",\n                fontSize: \"12\",\n                transform: `rotate(${angle}, ${midpoint.x + 10}, ${midpoint.y + 10})`,\n                textAnchor: \"middle\",\n                children: Math.round(calculateEdgeLength(edge))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 463,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 17\n        }, this), nodes.map(node => {\n          var _visitedNodes$find;\n          return /*#__PURE__*/_jsxDEV(Draggable, {\n            position: {\n              x: node.x,\n              y: node.y\n            },\n            bounds: \"parent\",\n            onStart: handleMouseDown,\n            onDrag: (e, data) => handleDrag(e, data, node),\n            onStop: handleDragStop,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"graph-node\",\n              onClick: () => handleNodeClick(node),\n              style: {\n                border: isTSP || isBFS || isPrim || isDFS || isShortestPath ? startNode && startNode.id === node.id ? 'none' : '2px solid red' : selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none',\n                backgroundColor: node.id === (currentNode === null || currentNode === void 0 ? void 0 : currentNode.id) ? 'red' : visitedNodes.some(vn => vn.id === node.id) ? ((_visitedNodes$find = visitedNodes.find(vn => vn.id === node.id)) === null || _visitedNodes$find === void 0 ? void 0 : _visitedNodes$find.color) || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\" : 'black',\n                pointerEvents: 'auto',\n                position: 'absolute'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 29\n            }, this)\n          }, node.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 25\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        \"class-name\": \"status-text\",\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [edges.length > 0 && !selectedNode && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Algorithms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 17\n      }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: setClickTraversal,\n        children: \"Traversals \\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 17\n      }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: setClickMST,\n        children: \"MSTs \\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 17\n      }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: setClickPath,\n        children: \"Paths \\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 17\n      }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: animateKruskalsAlgorithm,\n        children: \"Kruskall\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 17\n      }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startPrim,\n        children: \"Prim\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 17\n      }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startDFS,\n        children: \"DFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 17\n      }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startBFS,\n        children: \"BFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 17\n      }, this), clickedPaths && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startShortestPath,\n        children: \"Shortest Path\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 17\n      }, this), clickedPaths && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startTSP,\n        children: \"TSP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 17\n      }, this), !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: graphColoring,\n        children: \"Graph Coloring\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 17\n      }, this), !isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: findConnectedComponents,\n        children: \"Connected Components\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 17\n      }, this), isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: findStrongComponents,\n        children: \"Strong Components\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 17\n      }, this), (clickedTraversal || clickedMST || clickedPaths) && !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: goBack,\n        children: \"\\u2190 Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 316,\n    columnNumber: 9\n  }, this);\n};\n_s(Graphs, \"iFzOVKttWLMgDwn1ifwMn+7M1Ys=\");\n_c = Graphs;\nexport default Graphs;\nvar _c;\n$RefreshReg$(_c, \"Graphs\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Draggable","addNode","generateGraph","resetGraph","removeNode","handleNodeClick","handleMouseDown","handleSliderChange","startRemovingEdge","handleAddEdge","handleEdgeClick","handleDrag","handleDragStop","calculateEdgeLength","calculateMidpoint","calculateAngle","sleep","startDFS","startBFS","startPrim","animateKruskalsAlgorithm","graphColoring","startTSP","findConnectedComponents","findStrongComponents","startShortestPath","UnionFind","jsxDEV","_jsxDEV","Fragment","_Fragment","Graphs","_s","text","setText","nodes","setNodes","nodeCount","setNodeCount","edges","setEdges","selectedNode","setSelectedNode","isAddingEdge","setIsAddingEdge","dragging","setDragging","isRemovingEdge","setIsRemovingEdge","visitedNodes","setVisitedNodes","visitedEdges","setVisitedEdges","adjList","setAdjList","clickedTraversal","setClickedTraveral","clickedMST","setClickedMST","clickedPaths","setClickedPaths","isDFS","setIsDFS","isBFS","setIsBFS","isPrim","setIsPrim","isTSP","setIsTSP","algorithmRunning","setAlgorithmRunning","isShortestPath","setIsShortestPath","startNode","setStartNode","endNode","setEndNode","componentColors","components","setComponents","showWeights","setShowWeights","sliderValue","setSliderValue","currentNode","setCurrentNode","sliderValueRef","totalSliderCount","isPaused","setIsPaused","isPausedRef","currentStep","setCurrentStep","currentStepRef","isStepMode","setIsStepMode","isStepModeRef","disablePause","setDisablePause","algorithmStarted","setAlgorithmStarted","runningAlgorithm","setRunningAlgorithm","isDirected","setIsDirected","highlightedButtonColor","startingText","treeEdgeColor","currentEdgeColor","defaultEdgeColor","current","resetEdges","edge","dx","from","x","to","dy","y","Math","sqrt","midX","midY","flipped","angle","atan2","PI","constructor","size","parent","Array","fill","map","_","index","rank","find","node","union","node1","node2","root1","root2","setClickTraversal","setClickMST","setClickPath","goBack","nextStep","prev","next","togglePlayPause","duration","Promise","resolve","interval","elapsed","checkPauseAndSleep","checkPause","setTimeout","toggleGraphType","consolidatedEdges","edgeSet","Set","forEach","edgeKey","min","id","max","has","add","push","newAdjList","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","type","step","value","onChange","style","position","width","height","_visitedEdges$find","_visitedEdges$find2","_visitedEdges$find3","midpoint","arrowLength","arrowAngle","nodeRadius","unitDx","unitDy","baseX","baseY","edgeCount","filter","e","offsetX","offsetY","adjustedFromX","adjustedFromY","adjustedToX","adjustedToY","arrowBaseX","arrowBaseY","arrowX1","arrowY1","arrowX2","arrowY2","cos","sin","x1","y1","x2","y2","stroke","color","strokeWidth","fontSize","transform","textAnchor","round","_visitedNodes$find","bounds","onStart","onDrag","data","onStop","border","backgroundColor","some","vn","findIndex","comp","n","pointerEvents","_c","$RefreshReg$"],"sources":["/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js"],"sourcesContent":["import React, {useState, useRef, useEffect } from 'react';\nimport Draggable from 'react-draggable';\nimport { addNode, generateGraph, resetGraph, removeNode, handleNodeClick, handleMouseDown, handleSliderChange, startRemovingEdge, handleAddEdge, handleEdgeClick, handleDrag, handleDragStop } from './NodeFunctions';\nimport { calculateEdgeLength, calculateMidpoint, calculateAngle, sleep } from './GraphUtilities.js';\nimport { startDFS, startBFS, startPrim, animateKruskalsAlgorithm, graphColoring, startTSP, findConnectedComponents, findStrongComponents, startShortestPath } from './Algorithms';\nimport UnionFind from './UnionFind';\n\nconst Graphs = () => {\n    // State variables to manage graph nodes, edges, and various UI states\n    const [text, setText] = useState(\"Add Node or Generate Graph to Begin\");\n    const [nodes, setNodes] = useState([]);\n    const [nodeCount, setNodeCount] = useState(0);\n    const [edges, setEdges] = useState([]);\n    const [selectedNode, setSelectedNode] = useState(null);\n    const [isAddingEdge, setIsAddingEdge] = useState(false);\n    const [dragging, setDragging] = useState(false);\n    const [isRemovingEdge, setIsRemovingEdge] = useState(false);\n    // eslint-disable-next-line\n    const [visitedNodes, setVisitedNodes] = useState([]);\n    const [visitedEdges, setVisitedEdges] = useState([]);\n    const [adjList, setAdjList] = useState([]);\n    const [clickedTraversal, setClickedTraveral] = useState(false);\n    const [clickedMST, setClickedMST] = useState(false);\n    const [clickedPaths, setClickedPaths] = useState(false);\n    const [isDFS, setIsDFS] = useState(false);\n    const [isBFS, setIsBFS] = useState(false);\n    const [isPrim, setIsPrim] = useState(false);\n    const [isTSP, setIsTSP] = useState(false);\n    const [algorithmRunning, setAlgorithmRunning] = useState(false);\n    const [isShortestPath, setIsShortestPath] = useState(false);\n    const [startNode, setStartNode] = useState(null);\n    const [endNode, setEndNode] = useState(null);\n    const [componentColors] = useState([\"blue\", \"green\", \"orange\", \"purple\", \"pink\", \"yellow\", \"gold\", \"coral\", \"crimson\", \"cyan\", \"darkgreen\", \"drakblue\", \"darkorange\", \"darkorchid\", \"darkred\", \"deeppink\", \"darkviolet\", \"deepskyblue\", \"forestgreen\", \"fuchsia\"]);\n    const [components, setComponents] = useState([]);\n    const [showWeights, setShowWeights] = useState(false);\n    const [sliderValue, setSliderValue] = useState(250);\n    const [currentNode, setCurrentNode] = useState(null);\n    const sliderValueRef = useRef(sliderValue);\n    const totalSliderCount = 2100;\n    const [isPaused, setIsPaused] = useState(false);\n    const isPausedRef = useRef(isPaused);\n    const [currentStep, setCurrentStep] = useState(0);\n    const currentStepRef = useRef(currentStep);\n    const [isStepMode, setIsStepMode] = useState(false);\n    const isStepModeRef = useRef(isStepMode);\n    const [disablePause, setDisablePause] = useState(false);\n    const [algorithmStarted, setAlgorithmStarted]=  useState(false);\n    const [runningAlgorithm, setRunningAlgorithm] = useState(null);\n    const [isDirected, setIsDirected] = useState(false);\n\n    // Constants for UI text and colors\n    const highlightedButtonColor = \"lightblue\";\n    const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n    const treeEdgeColor = \"blue\"; \n    const currentEdgeColor = \"red\"; \n    const defaultEdgeColor = \"grey\";\n\n    // Use Effect to differentiate between modes\n    useEffect(() => {\n        isStepModeRef.current = isStepMode;\n    }, [isStepMode]);\n\n    // Use Effect to allow pausing mid-alg\n    useEffect(() => {\n        isPausedRef.current = isPaused;\n    }, [isPaused]);\n\n    // Use Effect to allow stopping mid-alg\n    useEffect(() => {\n        currentStepRef.current = currentStepRef;\n    }, [currentStepRef]);\n\n    // Function to reset edges to default state\n    const resetEdges = () => {\n        setVisitedEdges([]);\n        setVisitedNodes([]);\n        setText(startingText);\n        setAlgorithmRunning(false);\n        setCurrentStep(0);\n        currentStepRef.current = 0;\n        setDisablePause(false);\n        setRunningAlgorithm(null);\n    };\n\n    // Function to calculate edge length\n    const calculateEdgeLength = (edge) => {\n        const dx = edge.from.x - edge.to.x;\n        const dy = edge.from.y - edge.to.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    };\n\n    // Function to calculate midpoiint of an edge\n    const calculateMidpoint = (edge) => {\n        const midX = (edge.from.x + edge.to.x) / 2;\n        const midY = (edge.from.y + edge.to.y) / 2;\n        return { x: midX, y: midY };\n    };\n    \n    // Fucntion to calculate angle of an edge\n    const calculateAngle = (edge) => {\n        const dx = edge.to.x - edge.from.x;\n        const dy = edge.to.y - edge.from.y;\n        let flipped = false;\n        let angle = Math.atan2(dy, dx) * (180 / Math.PI);\n    \n        if (dx >= 0 && dy < 0) {\n        } else if (dx < 0 && dy < 0) {\n            angle += 180;\n            flipped = true;\n        } else if (dx < 0 && dy >= 0) {\n            angle -= 180;\n            flipped = true;\n        } else if (dx >= 0 && dy >= 0) {\n        }\n    \n        return {\n            angle: angle,\n            flipped: flipped\n        };\n    };\n\n     // Union-Find data structure for Kruskal's algorithm\n    class UnionFind {\n        constructor(size) {\n            this.parent = Array(size).fill(null).map((_, index) => index);\n            this.rank = Array(size).fill(0);\n        }\n\n        find(node) {\n            if (this.parent[node] !== node) {\n                this.parent[node] = this.find(this.parent[node]);\n            }\n            return this.parent[node];\n        }\n\n        union(node1, node2) {\n            const root1 = this.find(node1);\n            const root2 = this.find(node2);\n\n            if (root1 !== root2) {\n                if (this.rank[root1] > this.rank[root2]) {\n                    this.parent[root2] = root1;\n                } else if (this.rank[root1] < this.rank[root2]) {\n                    this.parent[root1] = root2;\n                } else {\n                    this.parent[root2] = root1;\n                    this.rank[root1] += 1;\n                }\n            }\n        }\n    }\n    \n    // Function to set traversal mode\n    const setClickTraversal = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedTraveral(true);\n    }\n\n    // Function to set MST mode\n    const setClickMST = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedMST(true);\n    }\n\n    // Function to set Paths mode\n    const setClickPath = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedPaths(true);\n    }\n\n    // Functino to go back from algorithm selection\n    const goBack = () => {\n\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        \n        setClickedMST(false);\n        setClickedTraveral(false);\n        setClickedPaths(false);\n        setAlgorithmRunning(false);\n        setText(startingText);\n    }\n\n    // Function to step in the algorithm\n    const nextStep = () => {\n        if(isPausedRef.current){\n            setIsStepMode(true);\n            if(isPausedRef.current){\n                setCurrentStep(prev => {\n                    const next = prev + 1;\n                    currentStepRef.current = next;\n                    return next;\n                });\n            }\n            setIsPaused(false);\n            isPausedRef.current = false;\n        }\n    };\n\n    // Function to toggle button \n    const togglePlayPause = () => {\n        if (isPausedRef.current) {\n            setIsStepMode(false);\n            setIsPaused(false);\n            isPausedRef.current = false;\n            switch (runningAlgorithm) {\n                case \"DFS\":\n                    setText(\"DFS in progress...\")\n                    break;\n                case \"BFS\":\n                    setText(\"BFS in progress...\")\n                    break;\n                case \"Kruskall\":\n                    setText(\"Kruskall's Algorithm in progress...\")\n                    break;\n                case \"Prim\":\n                    setText(\"Prim's Algorithm in progress...\")\n                    break;\n                case \"SP\":\n                    setText(\"Shortest Path Algorithm in progress...\")\n                    break;\n                case \"TSP\":\n                    setText(\"TSP in progress...\")\n                    break;\n                case \"Connected\":\n                    setText(\"Connected Components in progress..\")\n                    break;\n                case \"Colors\":\n                    setText(\"Graph Coloring in progress...\")\n                    break;\n                }\n        } else {\n            setIsStepMode(false);\n            setIsPaused(true);\n            isPausedRef.current = true;\n            setText(\"Algorithm is Paused\");\n        }\n    };\n\n    // Function to sleep and check for pausing\n    const sleep = (duration) => {\n        return new Promise((resolve) => {\n            const interval = 50;\n            let elapsed = 0;\n    \n            const checkPauseAndSleep = () => {\n                if (isPausedRef.current) {\n                    const checkPause = () => {\n                        if(isStepModeRef.current){\n                            setIsStepMode(true);\n                            resolve();\n                        }else if (!isPausedRef.current){\n                            resolve();\n                        }else {\n                            setTimeout(checkPause, interval);\n                        }\n                    };\n                    checkPause();\n                } else {\n                    if (elapsed < duration) {\n                        elapsed += interval;\n                        setTimeout(checkPauseAndSleep, interval);\n                    } else {\n                        resolve();\n                    }\n                }\n            };\n    \n            checkPauseAndSleep();\n        });\n    };\n    \n    // Function to switch between directed and undirected graphs\n    const toggleGraphType = () => {\n        if(algorithmRunning){\n            return;\n        }\n        if (isDirected) {\n            const consolidatedEdges = [];\n            const edgeSet = new Set();\n    \n            edges.forEach(edge => {\n                const edgeKey = `${Math.min(edge.from.id, edge.to.id)}-${Math.max(edge.from.id, edge.to.id)}`;\n                if (!edgeSet.has(edgeKey)) {\n                    edgeSet.add(edgeKey);\n                    consolidatedEdges.push(edge);\n                }\n            });\n    \n            const newAdjList = {};\n            consolidatedEdges.forEach(edge => {\n                if (!newAdjList[edge.from.id]) newAdjList[edge.from.id] = [];\n                if (!newAdjList[edge.to.id]) newAdjList[edge.to.id] = [];\n                newAdjList[edge.from.id].push(edge.to.id);\n                newAdjList[edge.to.id].push(edge.from.id);\n            });\n    \n            setEdges(consolidatedEdges);\n            setAdjList(newAdjList);\n        }\n        setIsDirected(!isDirected);\n    }\n\n    // JSX for rendering the component\n    return (\n        <div className=\"main-container\">\n            <div className=\"button-container\">\n                <h3>Graph Creation</h3>\n\n                {/* Graph Creation and Updating when node selected */}\n                {selectedNode && (\n                <button className=\"graph-button\" onClick={handleAddEdge}>Add Edge</button>)}\n                {selectedNode && (\n                <button className=\"graph-button\" onClick={removeNode}>Remove Node</button>)}\n\n                {/* Graph Creation and Updating */}\n                {!selectedNode && (\n                <button className=\"graph-button\" onClick={addNode}>Add Node</button>)}\n                {!selectedNode && (\n                <button className=\"graph-button\" onClick={generateGraph}>Generate Graph</button>)}\n                {!selectedNode && nodes.length > 0 && (\n                <button className=\"graph-button\" onClick={resetGraph}>Reset Graph</button>)}\n\n                {/* Edge Editing */}\n                {!selectedNode && (\n                    <h3>Edge Editing</h3>)}\n                {!selectedNode && (\n                    <button className=\"graph-button\" onClick={toggleGraphType}>\n                        {isDirected ? 'Set Undirected' : 'Set Directed'}\n                    </button>)}\n                {!selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={() => {if(edges.length>0){setShowWeights(!showWeights)}}}>\n                        {showWeights ? 'Hide Weights' : 'Show Weights'}\n                    </button>)}\n                {!selectedNode && edges.length > 0 && (\n                <button className=\"graph-button\" onClick={startRemovingEdge}>Remove Edge</button>)}\n\n                \n                {algorithmStarted && !disablePause && (\n                    <>\n                        <h3>Control</h3>\n                        <button className=\"graph-button\" onClick={nextStep}>Next Step</button>\n                        <button className=\"graph-button\" onClick={togglePlayPause}>\n                            {((isPaused || isStepMode) && !disablePause) ? \"Play\" : \"Pause\"}\n                        </button>\n                    </>\n                )}\n\n            </div>\n                \n            <div className=\"graph-content\">\n                <div className=\"slider-container\">\n                    <h4 className=\"slider-label\">Algorithm Speed</h4>\n                    <div className=\"slider-content\">\n                        <h4>Slow</h4>\n                        <input \n                            type=\"range\" \n                            min=\"100\" \n                            max=\"2000\" \n                            step=\"100\" \n                            value={sliderValue} \n                            onChange={handleSliderChange}\n                        />\n                        <h4>Fast</h4>\n                    </div>\n                </div>\n                <div className=\"graph-box\">\n                <svg className=\"edges-svg\" style={{ position: 'absolute', width: '100%', height: '100%' }}>\n                    {edges.map((edge, index) => {\n                        const midpoint = calculateMidpoint(edge);\n                        const { angle, flipped } = calculateAngle(edge);\n                        const arrowLength = 15;\n                        const arrowAngle = 30;\n                        const nodeRadius = 10;\n                \n                        \n                        const dx = edge.to.x - edge.from.x;\n                        const dy = edge.to.y - edge.from.y;\n                        const length = Math.sqrt(dx * dx + dy * dy);\n                        const unitDx = dx / length;\n                        const unitDy = dy / length;\n                        \n                        const baseX = edge.to.x - nodeRadius * unitDx;\n                        const baseY = edge.to.y - nodeRadius * unitDy;\n                        \n                        const edgeCount = edges.filter(e => \n                            (e.from.id === edge.from.id && e.to.id === edge.to.id) || \n                            (e.from.id === edge.to.id && e.to.id === edge.from.id)\n                        ).length;\n\n                        let offsetX = 0;\n                        let offsetY = 0;\n\n                        if (edgeCount > 1) {\n                            offsetX = 5 * unitDy; \n                            offsetY = -5 * unitDx;\n                        }\n\n                        const adjustedFromX = edge.from.x + 10 + offsetX;\n                        const adjustedFromY = edge.from.y + 10 + offsetY;\n                        const adjustedToX = baseX + 10 + offsetX ;\n                        const adjustedToY = baseY + 10 + offsetY;\n\n                        const arrowBaseX = baseX + offsetX + 10;\n                        const arrowBaseY = baseY + offsetY + 10;\n                \n                        let arrowX1, arrowY1, arrowX2, arrowY2;\n                        if (flipped) {\n                            arrowX1 = arrowBaseX + arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                            arrowY1 = arrowBaseY + arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n                            arrowX2 = arrowBaseX + arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                            arrowY2 = arrowBaseY + arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n                        } else {\n                            arrowX1 = arrowBaseX - arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                            arrowY1 = arrowBaseY - arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n                            arrowX2 = arrowBaseX - arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                            arrowY2 = arrowBaseY - arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n                        }\n\n\n                        return (\n                            <React.Fragment key={index}>\n                                <line\n                                    x1={adjustedFromX}\n                                    y1={adjustedFromY}\n                                    x2={adjustedToX}\n                                    y2={adjustedToY}\n                                    stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                    strokeWidth={isRemovingEdge ? 8 : 4}\n                                    onClick={() => handleEdgeClick(edge)}\n                                />\n                                {isDirected && (\n                                   <>\n                                        <line\n                                            x1={adjustedToX}\n                                            y1={adjustedToY}\n                                            x2={arrowX1}\n                                            y2={arrowY1}\n                                            stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                            strokeWidth={isRemovingEdge ? 8 : 4}\n                                        />\n                                        <line\n                                           x1={adjustedToX}\n                                           y1={adjustedToY}\n                                           x2={arrowX2}\n                                           y2={arrowY2}\n                                            stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                            strokeWidth={isRemovingEdge ? 8 : 4}\n                                        />\n                                    </>\n                                )}\n                                {showWeights && (\n                                    <text\n                                        x={midpoint.x + 10}\n                                        y={edgeCount > 1 ? midpoint.y + 2 : midpoint.y + 7}\n                                        fill=\"black\"\n                                        fontSize=\"12\"\n                                        transform={`rotate(${angle}, ${midpoint.x + 10}, ${midpoint.y + 10})`}\n                                        textAnchor=\"middle\"\n                                    >\n                                        {Math.round(calculateEdgeLength(edge))}\n                                    </text>)}\n                            </React.Fragment>\n                        );\n                    })}\n                </svg>\n                    {nodes.map(node => (\n                        <Draggable\n                            key={node.id}\n                            position={{ x: node.x, y: node.y }}\n                            bounds=\"parent\"\n                            onStart={handleMouseDown}\n                            onDrag={(e, data) => handleDrag(e, data, node)}\n                            onStop={handleDragStop}\n                        >\n                            <div\n                                className=\"graph-node\"\n                                onClick={() => handleNodeClick(node)}\n                                style={{\n                                    border: (isTSP || isBFS || isPrim || isDFS || isShortestPath) ? (startNode && startNode.id === node.id ? 'none' : '2px solid red') : (selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none'),\n                                    backgroundColor: \n                                    node.id === currentNode?.id ? 'red' : \n                                    visitedNodes.some(vn => vn.id === node.id) ? \n                                        (visitedNodes.find(vn => vn.id === node.id)?.color || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\") \n                                        : 'black',\n                                    pointerEvents: 'auto',\n                                    position: 'absolute'\n                                }}\n                            >\n                            </div>\n                        </Draggable>\n                    ))}\n                </div>\n                <h3 class-name=\"status-text\">{text}</h3>\n            </div>\n\n            <div className=\"button-container\">    \n                {/* Traversal and MST and Path*/}\n                {edges.length > 0 && !selectedNode &&(\n                <h3>Algorithms</h3>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickTraversal}>Traversals →</button>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickMST}>MSTs →</button>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickPath}>Paths →</button>)}\n\n\n                {/* Specific Algorithms */}\n                {clickedMST && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={animateKruskalsAlgorithm}>Kruskall</button>)}\n                {clickedMST && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startPrim}>Prim</button>)}\n\n                {clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\", backgroundColor: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startDFS}>DFS</button>)}\n                {clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startBFS}>BFS</button>)}\n\n                {clickedPaths && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startShortestPath}>Shortest Path</button>)}\n                {clickedPaths && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startTSP}>TSP</button>)}\n                \n                {!clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={graphColoring}>Graph Coloring</button>)}\n                {!isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={findConnectedComponents}>Connected Components</button>)}\n                {isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={findStrongComponents}>Strong Components</button>)}\n\n                {/* Back Button */}\n                {(clickedTraversal || clickedMST || clickedPaths) && !selectedNode && (\n                <button className=\"graph-button\" onClick={goBack}>← Back</button>)} \n                \n            </div>\n        </div>\n    );\n};\n\nexport default Graphs;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}