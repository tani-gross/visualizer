{"ast":null,"code":"var _jsxFileName = \"/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport Draggable from 'react-draggable';\nimport { useGraphStates } from './GraphsContext';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GraphComponent = () => {\n  _s();\n  const {\n    nodes,\n    edges,\n    adjList,\n    setVisitedNodes,\n    setVisitedEdges,\n    setAlgorithmStarted,\n    setText,\n    resetEdges,\n    setCurrentNode,\n    isPausedRef,\n    currentStepRef,\n    isStepModeRef,\n    sliderValueRef,\n    totalSliderCount,\n    componentColors,\n    setComponents,\n    algorithmRunning,\n    isRemovingEdge,\n    setRunningAlgorithm,\n    setIsDFS,\n    setAlgorithmRunning,\n    treeEdgeColor,\n    isDirected,\n    currentEdgeColor,\n    setIsPaused,\n    startNode,\n    setIsBFS,\n    setIsPrim,\n    setIsDirected,\n    defaultEdgeColor,\n    setDisablePause,\n    nodeCount,\n    setIsShortestPath,\n    setStartNode,\n    setEndNode,\n    setIsTSP,\n    sleep\n  } = useGraphStates();\n  console.log(useGraphStates);\n\n  // Constants for UI text and colors\n  const highlightedButtonColor = \"lightblue\";\n  const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n\n  // Use Effect to differentiate between modes\n  /* useEffect(() => {\n       isStepModeRef.current = isStepMode;\n   }, [isStepMode]);\n    // Use sEffect to allow pausing mid-alg\n   useEffect(() => {\n       isPausedRef.current = isPaused;\n   }, [isPaused]);\n    // Use Effect to allow stopping mid-alg\n   useEffect(() => {\n       currentStepRef.current = currentStepRef;\n   }, [currentStepRef]);\n    // Function to reset edges to default state\n   const resetEdges = () => {\n       setVisitedEdges([]);\n       setVisitedNodes([]);\n       setText(startingText);\n       setAlgorithmRunning(false);\n       setCurrentStep(0);\n       currentStepRef.current = 0;\n       setDisablePause(false);\n       setRunningAlgorithm(null);\n   };\n    // Function to set traversal mode\n   const setClickTraversal = () => {\n       if(algorithmRunning){\n           return;\n       }\n        setClickedTraveral(true);\n   }\n    // Function to set MST mode\n   const setClickMST = () => {\n       if(algorithmRunning){\n           return;\n       }\n        setClickedMST(true);\n   }\n    // Function to set Paths mode\n   const setClickPath = () => {\n       if(algorithmRunning){\n           return;\n       }\n        setClickedPaths(true);\n   }\n    // Functino to go back from algorithm selection\n   const goBack = () => {\n        if(algorithmRunning || isRemovingEdge){\n           return;\n       }\n       \n       setClickedMST(false);\n       setClickedTraveral(false);\n       setClickedPaths(false);\n       setAlgorithmRunning(false);\n       setText(startingText);\n   }\n    // Function to step in the algorithm\n   const nextStep = () => {\n       if(isPausedRef.current){\n           setIsStepMode(true);\n           if(isPausedRef.current){\n               setCurrentStep(prev => {\n                   const next = prev + 1;\n                   currentStepRef.current = next;\n                   return next;\n               });\n           }\n           setIsPaused(false);\n           isPausedRef.current = false;\n       }\n   };\n    // Function to toggle button \n   const togglePlayPause = () => {\n       if (isPausedRef.current) {\n           setIsStepMode(false);\n           setIsPaused(false);\n           isPausedRef.current = false;\n           switch (runningAlgorithm) {\n               case \"DFS\":\n                   setText(\"DFS in progress...\")\n                   break;\n               case \"BFS\":\n                   setText(\"BFS in progress...\")\n                   break;\n               case \"Kruskall\":\n                   setText(\"Kruskall's Algorithm in progress...\")\n                   break;\n               case \"Prim\":\n                   setText(\"Prim's Algorithm in progress...\")\n                   break;\n               case \"SP\":\n                   setText(\"Shortest Path Algorithm in progress...\")\n                   break;\n               case \"TSP\":\n                   setText(\"TSP in progress...\")\n                   break;\n               case \"Connected\":\n                   setText(\"Connected Components in progress..\")\n                   break;\n               case \"Colors\":\n                   setText(\"Graph Coloring in progress...\")\n                   break;\n               }\n       } else {\n           setIsStepMode(false);\n           setIsPaused(true);\n           isPausedRef.current = true;\n           setText(\"Algorithm is Paused\");\n       }\n   };\n   \n   // Function to switch between directed and undirected graphs\n   const toggleGraphType = () => {\n       if(algorithmRunning){\n           return;\n       }\n       if (isDirected) {\n           const consolidatedEdges = [];\n           const edgeSet = new Set();\n   \n           edges.forEach(edge => {\n               const edgeKey = `${Math.min(edge.from.id, edge.to.id)}-${Math.max(edge.from.id, edge.to.id)}`;\n               if (!edgeSet.has(edgeKey)) {\n                   edgeSet.add(edgeKey);\n                   consolidatedEdges.push(edge);\n               }\n           });\n   \n           const newAdjList = {};\n           consolidatedEdges.forEach(edge => {\n               if (!newAdjList[edge.from.id]) newAdjList[edge.from.id] = [];\n               if (!newAdjList[edge.to.id]) newAdjList[edge.to.id] = [];\n               newAdjList[edge.from.id].push(edge.to.id);\n               newAdjList[edge.to.id].push(edge.from.id);\n           });\n   \n           setEdges(consolidatedEdges);\n           setAdjList(newAdjList);\n       }\n       setIsDirected(!isDirected);\n   }*/\n\n  // JSX for rendering the component\n\n  return /*#__PURE__*/_jsxDEV(GraphsProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Graph Creation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 17\n        }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: handleAddEdge,\n          children: \"Add Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 17\n        }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: removeNode,\n          children: \"Remove Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 17\n        }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: addNode,\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 17\n        }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: generateGraph,\n          children: \"Generate Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 17\n        }, this), !selectedNode && nodes.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: resetGraph,\n          children: \"Reset Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 17\n        }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Edge Editing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: toggleGraphType,\n          children: isDirected ? 'Set Undirected' : 'Set Directed'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this), !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: () => {\n            if (edges.length > 0) {\n              setShowWeights(!showWeights);\n            }\n          },\n          children: showWeights ? 'Hide Weights' : 'Show Weights'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }, this), !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: startRemovingEdge,\n          children: \"Remove Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 17\n        }, this), algorithmStarted && !disablePause && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Control\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"graph-button\",\n            onClick: nextStep,\n            children: \"Next Step\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"graph-button\",\n            onClick: togglePlayPause,\n            children: (isPaused || isStepMode) && !disablePause ? \"Play\" : \"Pause\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"slider-label\",\n            children: \"Algorithm Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slider-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Slow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"100\",\n              max: \"2000\",\n              step: \"100\",\n              value: sliderValue,\n              onChange: handleSliderChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Fast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"graph-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"edges-svg\",\n            style: {\n              position: 'absolute',\n              width: '100%',\n              height: '100%'\n            },\n            children: edges.map((edge, index) => {\n              var _visitedEdges$find, _visitedEdges$find2, _visitedEdges$find3;\n              const midpoint = calculateMidpoint(edge);\n              const {\n                angle,\n                flipped\n              } = calculateAngle(edge);\n              const arrowLength = 15;\n              const arrowAngle = 30;\n              const nodeRadius = 10;\n              const dx = edge.to.x - edge.from.x;\n              const dy = edge.to.y - edge.from.y;\n              const length = Math.sqrt(dx * dx + dy * dy);\n              const unitDx = dx / length;\n              const unitDy = dy / length;\n              const baseX = edge.to.x - nodeRadius * unitDx;\n              const baseY = edge.to.y - nodeRadius * unitDy;\n              const edgeCount = edges.filter(e => e.from.id === edge.from.id && e.to.id === edge.to.id || e.from.id === edge.to.id && e.to.id === edge.from.id).length;\n              let offsetX = 0;\n              let offsetY = 0;\n              if (edgeCount > 1) {\n                offsetX = 5 * unitDy;\n                offsetY = -5 * unitDx;\n              }\n              const adjustedFromX = edge.from.x + 10 + offsetX;\n              const adjustedFromY = edge.from.y + 10 + offsetY;\n              const adjustedToX = baseX + 10 + offsetX;\n              const adjustedToY = baseY + 10 + offsetY;\n              const arrowBaseX = baseX + offsetX + 10;\n              const arrowBaseY = baseY + offsetY + 10;\n              let arrowX1, arrowY1, arrowX2, arrowY2;\n              if (flipped) {\n                arrowX1 = arrowBaseX + arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                arrowY1 = arrowBaseY + arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n                arrowX2 = arrowBaseX + arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                arrowY2 = arrowBaseY + arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n              } else {\n                arrowX1 = arrowBaseX - arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                arrowY1 = arrowBaseY - arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n                arrowX2 = arrowBaseX - arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                arrowY2 = arrowBaseY - arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n              }\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                  x1: adjustedFromX,\n                  y1: adjustedFromY,\n                  x2: adjustedToX,\n                  y2: adjustedToY,\n                  stroke: ((_visitedEdges$find = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find === void 0 ? void 0 : _visitedEdges$find.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                  strokeWidth: isRemovingEdge ? 8 : 4,\n                  onClick: () => handleEdgeClick(edge)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 297,\n                  columnNumber: 33\n                }, this), isDirected && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                    x1: adjustedToX,\n                    y1: adjustedToY,\n                    x2: arrowX1,\n                    y2: arrowY1,\n                    stroke: ((_visitedEdges$find2 = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find2 === void 0 ? void 0 : _visitedEdges$find2.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                    strokeWidth: isRemovingEdge ? 8 : 4\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 308,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n                    x1: adjustedToX,\n                    y1: adjustedToY,\n                    x2: arrowX2,\n                    y2: arrowY2,\n                    stroke: ((_visitedEdges$find3 = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find3 === void 0 ? void 0 : _visitedEdges$find3.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                    strokeWidth: isRemovingEdge ? 8 : 4\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 316,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true), showWeights && /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: midpoint.x + 10,\n                  y: edgeCount > 1 ? midpoint.y + 2 : midpoint.y + 7,\n                  fill: \"black\",\n                  fontSize: \"12\",\n                  transform: `rotate(${angle}, ${midpoint.x + 10}, ${midpoint.y + 10})`,\n                  textAnchor: \"middle\",\n                  children: Math.round(calculateEdgeLength(edge))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 37\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 29\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 17\n          }, this), nodes.map(node => {\n            var _currentNode, _visitedNodes$find;\n            return /*#__PURE__*/_jsxDEV(Draggable, {\n              position: {\n                x: node.x,\n                y: node.y\n              },\n              bounds: \"parent\",\n              onStart: handleMouseDown,\n              onDrag: (e, data) => handleDrag(e, data, node),\n              onStop: handleDragStop,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"graph-node\",\n                onClick: () => handleNodeClick(node),\n                style: {\n                  border: isTSP || isBFS || isPrim || isDFS || isShortestPath ? startNode && startNode.id === node.id ? 'none' : '2px solid red' : selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none',\n                  backgroundColor: node.id === ((_currentNode = currentNode) === null || _currentNode === void 0 ? void 0 : _currentNode.id) ? 'red' : visitedNodes.some(vn => vn.id === node.id) ? ((_visitedNodes$find = visitedNodes.find(vn => vn.id === node.id)) === null || _visitedNodes$find === void 0 ? void 0 : _visitedNodes$find.color) || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\" : 'black',\n                  pointerEvents: 'auto',\n                  position: 'absolute'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 29\n              }, this)\n            }, node.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 25\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          \"class-name\": \"status-text\",\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [edges.length > 0 && !selectedNode && /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Algorithms\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 17\n        }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: setClickTraversal,\n          children: \"Traversals \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 17\n        }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: setClickMST,\n          children: \"MSTs \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 17\n        }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: setClickPath,\n          children: \"Paths \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 17\n        }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: animateKruskalsAlgorithm,\n          children: \"Kruskall\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 17\n        }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: startPrim,\n          children: \"Prim\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 17\n        }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: startDFS,\n          children: \"DFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 17\n        }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: startBFS,\n          children: \"BFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 17\n        }, this), clickedPaths && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: startShortestPath,\n          children: \"Shortest Path\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 17\n        }, this), clickedPaths && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: startTSP,\n          children: \"TSP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 17\n        }, this), !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: graphColoring,\n          children: \"Graph Coloring\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 17\n        }, this), !isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: findConnectedComponents,\n          children: \"Connected Components\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 17\n        }, this), isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: findStrongComponents,\n          children: \"Strong Components\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 17\n        }, this), (clickedTraversal || clickedMST || clickedPaths) && !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: goBack,\n          children: \"\\u2190 Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 9\n  }, this);\n};\n_s(GraphComponent, \"Dkfk1YRw6zDOpeRdqKV73/+YA/Y=\", false, function () {\n  return [useGraphStates];\n});\n_c = GraphComponent;\nconst Graphs = () => {\n  /*#__PURE__*/_jsxDEV(GraphsProvider, {\n    children: /*#__PURE__*/_jsxDEV(GraphsComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 419,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Graphs;\nexport default Graphs;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"Graphs\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Draggable","useGraphStates","jsxDEV","_jsxDEV","Fragment","_Fragment","GraphComponent","_s","nodes","edges","adjList","setVisitedNodes","setVisitedEdges","setAlgorithmStarted","setText","resetEdges","setCurrentNode","isPausedRef","currentStepRef","isStepModeRef","sliderValueRef","totalSliderCount","componentColors","setComponents","algorithmRunning","isRemovingEdge","setRunningAlgorithm","setIsDFS","setAlgorithmRunning","treeEdgeColor","isDirected","currentEdgeColor","setIsPaused","startNode","setIsBFS","setIsPrim","setIsDirected","defaultEdgeColor","setDisablePause","nodeCount","setIsShortestPath","setStartNode","setEndNode","setIsTSP","sleep","console","log","highlightedButtonColor","startingText","GraphsProvider","children","className","fileName","_jsxFileName","lineNumber","columnNumber","selectedNode","onClick","handleAddEdge","removeNode","addNode","generateGraph","length","resetGraph","toggleGraphType","setShowWeights","showWeights","startRemovingEdge","algorithmStarted","disablePause","nextStep","togglePlayPause","isPaused","isStepMode","type","min","max","step","value","sliderValue","onChange","handleSliderChange","style","position","width","height","map","edge","index","_visitedEdges$find","_visitedEdges$find2","_visitedEdges$find3","midpoint","calculateMidpoint","angle","flipped","calculateAngle","arrowLength","arrowAngle","nodeRadius","dx","to","x","from","dy","y","Math","sqrt","unitDx","unitDy","baseX","baseY","edgeCount","filter","e","id","offsetX","offsetY","adjustedFromX","adjustedFromY","adjustedToX","adjustedToY","arrowBaseX","arrowBaseY","arrowX1","arrowY1","arrowX2","arrowY2","cos","PI","sin","x1","y1","x2","y2","stroke","visitedEdges","find","color","strokeWidth","handleEdgeClick","fill","fontSize","transform","textAnchor","round","calculateEdgeLength","node","_currentNode","_visitedNodes$find","bounds","onStart","handleMouseDown","onDrag","data","handleDrag","onStop","handleDragStop","handleNodeClick","border","isTSP","isBFS","isPrim","isDFS","isShortestPath","backgroundColor","currentNode","visitedNodes","some","vn","components","findIndex","comp","n","pointerEvents","text","clickedTraversal","clickedMST","clickedPaths","setClickTraversal","setClickMST","setClickPath","runningAlgorithm","animateKruskalsAlgorithm","startPrim","startDFS","startBFS","startShortestPath","startTSP","graphColoring","findConnectedComponents","findStrongComponents","goBack","_c","Graphs","GraphsComponent","_c2","$RefreshReg$"],"sources":["/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js"],"sourcesContent":["import React, {useState, useRef, useEffect } from 'react';\nimport Draggable from 'react-draggable';\nimport {useGraphStates } from './GraphsContext';\n\n\nconst GraphComponent = () => {\n    const {\n        nodes, edges, adjList, setVisitedNodes, setVisitedEdges, setAlgorithmStarted, setText, resetEdges,\n        setCurrentNode, isPausedRef, currentStepRef, isStepModeRef, sliderValueRef, totalSliderCount, \n        componentColors, setComponents, algorithmRunning, isRemovingEdge, setRunningAlgorithm, setIsDFS, setAlgorithmRunning,\n        treeEdgeColor, isDirected, currentEdgeColor, setIsPaused, startNode, setIsBFS, setIsPrim, setIsDirected, defaultEdgeColor,\n        setDisablePause, nodeCount, setIsShortestPath, setStartNode, setEndNode, setIsTSP, sleep\n    } = useGraphStates();\n    \n    console.log(useGraphStates);\n\n    // Constants for UI text and colors\n    const highlightedButtonColor = \"lightblue\";\n    const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n\n    // Use Effect to differentiate between modes\n   /* useEffect(() => {\n        isStepModeRef.current = isStepMode;\n    }, [isStepMode]);\n\n    // Use sEffect to allow pausing mid-alg\n    useEffect(() => {\n        isPausedRef.current = isPaused;\n    }, [isPaused]);\n\n    // Use Effect to allow stopping mid-alg\n    useEffect(() => {\n        currentStepRef.current = currentStepRef;\n    }, [currentStepRef]);\n\n    // Function to reset edges to default state\n    const resetEdges = () => {\n        setVisitedEdges([]);\n        setVisitedNodes([]);\n        setText(startingText);\n        setAlgorithmRunning(false);\n        setCurrentStep(0);\n        currentStepRef.current = 0;\n        setDisablePause(false);\n        setRunningAlgorithm(null);\n    };\n\n    // Function to set traversal mode\n    const setClickTraversal = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedTraveral(true);\n    }\n\n    // Function to set MST mode\n    const setClickMST = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedMST(true);\n    }\n\n    // Function to set Paths mode\n    const setClickPath = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedPaths(true);\n    }\n\n    // Functino to go back from algorithm selection\n    const goBack = () => {\n\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        \n        setClickedMST(false);\n        setClickedTraveral(false);\n        setClickedPaths(false);\n        setAlgorithmRunning(false);\n        setText(startingText);\n    }\n\n    // Function to step in the algorithm\n    const nextStep = () => {\n        if(isPausedRef.current){\n            setIsStepMode(true);\n            if(isPausedRef.current){\n                setCurrentStep(prev => {\n                    const next = prev + 1;\n                    currentStepRef.current = next;\n                    return next;\n                });\n            }\n            setIsPaused(false);\n            isPausedRef.current = false;\n        }\n    };\n\n    // Function to toggle button \n    const togglePlayPause = () => {\n        if (isPausedRef.current) {\n            setIsStepMode(false);\n            setIsPaused(false);\n            isPausedRef.current = false;\n            switch (runningAlgorithm) {\n                case \"DFS\":\n                    setText(\"DFS in progress...\")\n                    break;\n                case \"BFS\":\n                    setText(\"BFS in progress...\")\n                    break;\n                case \"Kruskall\":\n                    setText(\"Kruskall's Algorithm in progress...\")\n                    break;\n                case \"Prim\":\n                    setText(\"Prim's Algorithm in progress...\")\n                    break;\n                case \"SP\":\n                    setText(\"Shortest Path Algorithm in progress...\")\n                    break;\n                case \"TSP\":\n                    setText(\"TSP in progress...\")\n                    break;\n                case \"Connected\":\n                    setText(\"Connected Components in progress..\")\n                    break;\n                case \"Colors\":\n                    setText(\"Graph Coloring in progress...\")\n                    break;\n                }\n        } else {\n            setIsStepMode(false);\n            setIsPaused(true);\n            isPausedRef.current = true;\n            setText(\"Algorithm is Paused\");\n        }\n    };\n    \n    // Function to switch between directed and undirected graphs\n    const toggleGraphType = () => {\n        if(algorithmRunning){\n            return;\n        }\n        if (isDirected) {\n            const consolidatedEdges = [];\n            const edgeSet = new Set();\n    \n            edges.forEach(edge => {\n                const edgeKey = `${Math.min(edge.from.id, edge.to.id)}-${Math.max(edge.from.id, edge.to.id)}`;\n                if (!edgeSet.has(edgeKey)) {\n                    edgeSet.add(edgeKey);\n                    consolidatedEdges.push(edge);\n                }\n            });\n    \n            const newAdjList = {};\n            consolidatedEdges.forEach(edge => {\n                if (!newAdjList[edge.from.id]) newAdjList[edge.from.id] = [];\n                if (!newAdjList[edge.to.id]) newAdjList[edge.to.id] = [];\n                newAdjList[edge.from.id].push(edge.to.id);\n                newAdjList[edge.to.id].push(edge.from.id);\n            });\n    \n            setEdges(consolidatedEdges);\n            setAdjList(newAdjList);\n        }\n        setIsDirected(!isDirected);\n    }*/\n\n    // JSX for rendering the component\n    \n    return (\n        <GraphsProvider>\n        <div className=\"main-container\">\n            <div className=\"button-container\">\n                <h3>Graph Creation</h3>\n\n                {/* Graph Creation and Updating when node selected */}\n                {selectedNode && (\n                <button className=\"graph-button\" onClick={handleAddEdge}>Add Edge</button>)}\n                {selectedNode && (\n                <button className=\"graph-button\" onClick={removeNode}>Remove Node</button>)}\n\n                {/* Graph Creation and Updating */}\n                {!selectedNode && (\n                <button className=\"graph-button\" onClick={addNode}>Add Node</button>)}\n                {!selectedNode && (\n                <button className=\"graph-button\" onClick={generateGraph}>Generate Graph</button>)}\n                {!selectedNode && nodes.length > 0 && (\n                <button className=\"graph-button\" onClick={resetGraph}>Reset Graph</button>)}\n\n                {/* Edge Editing */}\n                {!selectedNode && (\n                    <h3>Edge Editing</h3>)}\n                {!selectedNode && (\n                    <button className=\"graph-button\" onClick={toggleGraphType}>\n                        {isDirected ? 'Set Undirected' : 'Set Directed'}\n                    </button>)}\n                {!selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={() => {if(edges.length>0){setShowWeights(!showWeights)}}}>\n                        {showWeights ? 'Hide Weights' : 'Show Weights'}\n                    </button>)}\n                {!selectedNode && edges.length > 0 && (\n                <button className=\"graph-button\" onClick={startRemovingEdge}>Remove Edge</button>)}\n\n                \n                {algorithmStarted && !disablePause && (\n                    <>\n                        <h3>Control</h3>\n                        <button className=\"graph-button\" onClick={nextStep}>Next Step</button>\n                        <button className=\"graph-button\" onClick={togglePlayPause}>\n                            {((isPaused || isStepMode) && !disablePause) ? \"Play\" : \"Pause\"}\n                        </button>\n                    </>\n                )}\n\n            </div>\n                \n            <div className=\"graph-content\">\n                <div className=\"slider-container\">\n                    <h4 className=\"slider-label\">Algorithm Speed</h4>\n                    <div className=\"slider-content\">\n                        <h4>Slow</h4>\n                        <input \n                            type=\"range\" \n                            min=\"100\" \n                            max=\"2000\" \n                            step=\"100\" \n                            value={sliderValue} \n                            onChange={handleSliderChange}\n                        />\n                        <h4>Fast</h4>\n                    </div>\n                </div>\n                <div className=\"graph-box\">\n                <svg className=\"edges-svg\" style={{ position: 'absolute', width: '100%', height: '100%' }}>\n                    {edges.map((edge, index) => {\n                        const midpoint = calculateMidpoint(edge);\n                        const { angle, flipped } = calculateAngle(edge);\n                        const arrowLength = 15;\n                        const arrowAngle = 30;\n                        const nodeRadius = 10;\n                \n                        \n                        const dx = edge.to.x - edge.from.x;\n                        const dy = edge.to.y - edge.from.y;\n                        const length = Math.sqrt(dx * dx + dy * dy);\n                        const unitDx = dx / length;\n                        const unitDy = dy / length;\n                        \n                        const baseX = edge.to.x - nodeRadius * unitDx;\n                        const baseY = edge.to.y - nodeRadius * unitDy;\n                        \n                        const edgeCount = edges.filter(e => \n                            (e.from.id === edge.from.id && e.to.id === edge.to.id) || \n                            (e.from.id === edge.to.id && e.to.id === edge.from.id)\n                        ).length;\n\n                        let offsetX = 0;\n                        let offsetY = 0;\n\n                        if (edgeCount > 1) {\n                            offsetX = 5 * unitDy; \n                            offsetY = -5 * unitDx;\n                        }\n\n                        const adjustedFromX = edge.from.x + 10 + offsetX;\n                        const adjustedFromY = edge.from.y + 10 + offsetY;\n                        const adjustedToX = baseX + 10 + offsetX ;\n                        const adjustedToY = baseY + 10 + offsetY;\n\n                        const arrowBaseX = baseX + offsetX + 10;\n                        const arrowBaseY = baseY + offsetY + 10;\n                \n                        let arrowX1, arrowY1, arrowX2, arrowY2;\n                        if (flipped) {\n                            arrowX1 = arrowBaseX + arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                            arrowY1 = arrowBaseY + arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n                            arrowX2 = arrowBaseX + arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                            arrowY2 = arrowBaseY + arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n                        } else {\n                            arrowX1 = arrowBaseX - arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                            arrowY1 = arrowBaseY - arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n                            arrowX2 = arrowBaseX - arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                            arrowY2 = arrowBaseY - arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n                        }\n\n\n                        return (\n                            <React.Fragment key={index}>\n                                <line\n                                    x1={adjustedFromX}\n                                    y1={adjustedFromY}\n                                    x2={adjustedToX}\n                                    y2={adjustedToY}\n                                    stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                    strokeWidth={isRemovingEdge ? 8 : 4}\n                                    onClick={() => handleEdgeClick(edge)}\n                                />\n                                {isDirected && (\n                                   <>\n                                        <line\n                                            x1={adjustedToX}\n                                            y1={adjustedToY}\n                                            x2={arrowX1}\n                                            y2={arrowY1}\n                                            stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                            strokeWidth={isRemovingEdge ? 8 : 4}\n                                        />\n                                        <line\n                                           x1={adjustedToX}\n                                           y1={adjustedToY}\n                                           x2={arrowX2}\n                                           y2={arrowY2}\n                                            stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                            strokeWidth={isRemovingEdge ? 8 : 4}\n                                        />\n                                    </>\n                                )}\n                                {showWeights && (\n                                    <text\n                                        x={midpoint.x + 10}\n                                        y={edgeCount > 1 ? midpoint.y + 2 : midpoint.y + 7}\n                                        fill=\"black\"\n                                        fontSize=\"12\"\n                                        transform={`rotate(${angle}, ${midpoint.x + 10}, ${midpoint.y + 10})`}\n                                        textAnchor=\"middle\"\n                                    >\n                                        {Math.round(calculateEdgeLength(edge))}\n                                    </text>)}\n                            </React.Fragment>\n                        );\n                    })}\n                </svg>\n                    {nodes.map(node => (\n                        <Draggable\n                            key={node.id}\n                            position={{ x: node.x, y: node.y }}\n                            bounds=\"parent\"\n                            onStart={handleMouseDown}\n                            onDrag={(e, data) => handleDrag(e, data, node)}\n                            onStop={handleDragStop}\n                        >\n                            <div\n                                className=\"graph-node\"\n                                onClick={() => handleNodeClick(node)}\n                                style={{\n                                    border: (isTSP || isBFS || isPrim || isDFS || isShortestPath) ? (startNode && startNode.id === node.id ? 'none' : '2px solid red') : (selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none'),\n                                    backgroundColor: \n                                    node.id === currentNode?.id ? 'red' : \n                                    visitedNodes.some(vn => vn.id === node.id) ? \n                                        (visitedNodes.find(vn => vn.id === node.id)?.color || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\") \n                                        : 'black',\n                                    pointerEvents: 'auto',\n                                    position: 'absolute'\n                                }}\n                            >\n                            </div>\n                        </Draggable>\n                    ))}\n                </div>\n                <h3 class-name=\"status-text\">{text}</h3>\n            </div>\n\n            <div className=\"button-container\">    \n                {/* Traversal and MST and Path*/}\n                {edges.length > 0 && !selectedNode &&(\n                <h3>Algorithms</h3>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickTraversal}>Traversals →</button>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickMST}>MSTs →</button>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickPath}>Paths →</button>)}\n\n\n                {/* Specific Algorithms */}\n                {clickedMST && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={animateKruskalsAlgorithm}>Kruskall</button>)}\n                {clickedMST && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startPrim}>Prim</button>)}\n\n                {clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\", backgroundColor: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startDFS}>DFS</button>)}\n                {clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startBFS}>BFS</button>)}\n\n                {clickedPaths && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startShortestPath}>Shortest Path</button>)}\n                {clickedPaths && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startTSP}>TSP</button>)}\n                \n                {!clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={graphColoring}>Graph Coloring</button>)}\n                {!isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={findConnectedComponents}>Connected Components</button>)}\n                {isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={findStrongComponents}>Strong Components</button>)}\n\n                {/* Back Button */}\n                {(clickedTraversal || clickedMST || clickedPaths) && !selectedNode && (\n                <button className=\"graph-button\" onClick={goBack}>← Back</button>)} \n                \n            </div>\n        </div>\n        </GraphsProvider>\n    );\n}\n\n\n\nconst Graphs = () => {\n    <GraphsProvider>\n        <GraphsComponent />\n    </GraphsProvider>\n}\n    \n\n    \n\nexport default Graphs;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}