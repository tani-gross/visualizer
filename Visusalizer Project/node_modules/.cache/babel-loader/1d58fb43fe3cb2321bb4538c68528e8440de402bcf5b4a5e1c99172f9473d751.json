{"ast":null,"code":"var _jsxFileName = \"/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport Draggable from 'react-draggable';\nimport { GraphsProvider } from './GraphsContext';\nimport { useNodeFunctions } from './NodeFunctions';\nimport { useAlgorithms } from './Algorithms';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const useGraphStates = () => {\n  _s();\n  // State variables to manage graph nodes, edges, and various UI states\n  const [text, setText] = useState(\"Add Node or Generate Graph to Begin\");\n  const [nodes, setNodes] = useState([]);\n  const [nodeCount, setNodeCount] = useState(0);\n  const [edges, setEdges] = useState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isAddingEdge, setIsAddingEdge] = useState(false);\n  const [dragging, setDragging] = useState(false);\n  const [isRemovingEdge, setIsRemovingEdge] = useState(false);\n  const [visitedNodes, setVisitedNodes] = useState([]);\n  const [visitedEdges, setVisitedEdges] = useState([]);\n  const [adjList, setAdjList] = useState([]);\n  const [clickedTraversal, setClickedTraveral] = useState(false);\n  const [clickedMST, setClickedMST] = useState(false);\n  const [clickedPaths, setClickedPaths] = useState(false);\n  const [isDFS, setIsDFS] = useState(false);\n  const [isBFS, setIsBFS] = useState(false);\n  const [isPrim, setIsPrim] = useState(false);\n  const [isTSP, setIsTSP] = useState(false);\n  const [algorithmRunning, setAlgorithmRunning] = useState(false);\n  const [isShortestPath, setIsShortestPath] = useState(false);\n  const [startNode, setStartNode] = useState(null);\n  const [endNode, setEndNode] = useState(null);\n  const [componentColors] = useState([\"blue\", \"green\", \"orange\", \"purple\", \"pink\", \"yellow\", \"gold\", \"coral\", \"crimson\", \"cyan\", \"darkgreen\", \"drakblue\", \"darkorange\", \"darkorchid\", \"darkred\", \"deeppink\", \"darkviolet\", \"deepskyblue\", \"forestgreen\", \"fuchsia\"]);\n  const [components, setComponents] = useState([]);\n  const [showWeights, setShowWeights] = useState(false);\n  const [sliderValue, setSliderValue] = useState(250);\n  const [currentNode, setCurrentNode] = useState(null);\n  const sliderValueRef = useRef(sliderValue);\n  const totalSliderCount = 2100;\n  const [isPaused, setIsPaused] = useState(false);\n  const isPausedRef = useRef(isPaused);\n  const [currentStep, setCurrentStep] = useState(0);\n  const currentStepRef = useRef(currentStep);\n  const [isStepMode, setIsStepMode] = useState(false);\n  const isStepModeRef = useRef(isStepMode);\n  const [disablePause, setDisablePause] = useState(false);\n  const [algorithmStarted, setAlgorithmStarted] = useState(false);\n  const [runningAlgorithm, setRunningAlgorithm] = useState(null);\n  const [isDirected, setIsDirected] = useState(false);\n  return {\n    text,\n    setText,\n    nodes,\n    setNodes,\n    nodeCount,\n    setNodeCount,\n    edges,\n    setEdges,\n    selectedNode,\n    setSelectedNode,\n    isAddingEdge,\n    setIsAddingEdge,\n    dragging,\n    setDragging,\n    isRemovingEdge,\n    setIsRemovingEdge,\n    visitedNodes,\n    setVisitedNodes,\n    visitedEdges,\n    setVisitedEdges,\n    adjList,\n    setAdjList,\n    clickedTraversal,\n    setClickedTraversal,\n    clickedMST,\n    setClickedMST,\n    clickedPaths,\n    setClickedPaths,\n    isDFS,\n    setIsDFS,\n    isBFS,\n    setIsBFS,\n    isPrim,\n    setIsPrim,\n    isTSP,\n    setIsTSP,\n    algorithmRunning,\n    setAlgorithmRunning,\n    isShortestPath,\n    setIsShortestPath,\n    startNode,\n    setStartNode,\n    endNode,\n    setEndNode,\n    componentColors,\n    components,\n    setComponents,\n    showWeights,\n    setShowWeights,\n    sliderValue,\n    setSliderValue,\n    currentNode,\n    setCurrentNode,\n    sliderValueRef,\n    totalSliderCount,\n    isPaused,\n    setIsPaused,\n    isPausedRef,\n    currentStep,\n    setCurrentStep,\n    currentStepRef,\n    isStepMode,\n    setIsStepMode,\n    isStepModeRef,\n    disablePause,\n    setDisablePause,\n    algorithmStarted,\n    setAlgorithmStarted,\n    runningAlgorithm,\n    setRunningAlgorithm,\n    isDirected,\n    setIsDirected\n  };\n};\n_s(useGraphStates, \"mBWTSd+Y81XKNOrQD4ShAwE11Cs=\");\nconst Graphs = () => {\n  _s2();\n  const graphStates = useGraphStates();\n\n  // Constants for UI text and colors\n  const highlightedButtonColor = \"lightblue\";\n  const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n  const treeEdgeColor = \"blue\";\n  const currentEdgeColor = \"red\";\n  const defaultEdgeColor = \"grey\";\n\n  // Use Effect to differentiate between modes\n  useEffect(() => {\n    isStepModeRef.current = isStepMode;\n  }, [isStepMode]);\n\n  // Use Effect to allow pausing mid-alg\n  useEffect(() => {\n    isPausedRef.current = isPaused;\n  }, [isPaused]);\n\n  // Use Effect to allow stopping mid-alg\n  useEffect(() => {\n    currentStepRef.current = currentStepRef;\n  }, [currentStepRef]);\n\n  // Function to reset edges to default state\n  const resetEdges = () => {\n    setVisitedEdges([]);\n    setVisitedNodes([]);\n    setText(startingText);\n    setAlgorithmRunning(false);\n    setCurrentStep(0);\n    currentStepRef.current = 0;\n    setDisablePause(false);\n    setRunningAlgorithm(null);\n  };\n\n  // Function to set traversal mode\n  const setClickTraversal = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedTraveral(true);\n  };\n\n  // Function to set MST mode\n  const setClickMST = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedMST(true);\n  };\n\n  // Function to set Paths mode\n  const setClickPath = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedPaths(true);\n  };\n\n  // Functino to go back from algorithm selection\n  const goBack = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setClickedMST(false);\n    setClickedTraveral(false);\n    setClickedPaths(false);\n    setAlgorithmRunning(false);\n    setText(startingText);\n  };\n\n  // Function to step in the algorithm\n  const nextStep = () => {\n    if (isPausedRef.current) {\n      setIsStepMode(true);\n      if (isPausedRef.current) {\n        setCurrentStep(prev => {\n          const next = prev + 1;\n          currentStepRef.current = next;\n          return next;\n        });\n      }\n      setIsPaused(false);\n      isPausedRef.current = false;\n    }\n  };\n\n  // Function to toggle button \n  const togglePlayPause = () => {\n    if (isPausedRef.current) {\n      setIsStepMode(false);\n      setIsPaused(false);\n      isPausedRef.current = false;\n      switch (runningAlgorithm) {\n        case \"DFS\":\n          setText(\"DFS in progress...\");\n          break;\n        case \"BFS\":\n          setText(\"BFS in progress...\");\n          break;\n        case \"Kruskall\":\n          setText(\"Kruskall's Algorithm in progress...\");\n          break;\n        case \"Prim\":\n          setText(\"Prim's Algorithm in progress...\");\n          break;\n        case \"SP\":\n          setText(\"Shortest Path Algorithm in progress...\");\n          break;\n        case \"TSP\":\n          setText(\"TSP in progress...\");\n          break;\n        case \"Connected\":\n          setText(\"Connected Components in progress..\");\n          break;\n        case \"Colors\":\n          setText(\"Graph Coloring in progress...\");\n          break;\n      }\n    } else {\n      setIsStepMode(false);\n      setIsPaused(true);\n      isPausedRef.current = true;\n      setText(\"Algorithm is Paused\");\n    }\n  };\n\n  // Function to switch between directed and undirected graphs\n  const toggleGraphType = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    if (isDirected) {\n      const consolidatedEdges = [];\n      const edgeSet = new Set();\n      edges.forEach(edge => {\n        const edgeKey = `${Math.min(edge.from.id, edge.to.id)}-${Math.max(edge.from.id, edge.to.id)}`;\n        if (!edgeSet.has(edgeKey)) {\n          edgeSet.add(edgeKey);\n          consolidatedEdges.push(edge);\n        }\n      });\n      const newAdjList = {};\n      consolidatedEdges.forEach(edge => {\n        if (!newAdjList[edge.from.id]) newAdjList[edge.from.id] = [];\n        if (!newAdjList[edge.to.id]) newAdjList[edge.to.id] = [];\n        newAdjList[edge.from.id].push(edge.to.id);\n        newAdjList[edge.to.id].push(edge.from.id);\n      });\n      setEdges(consolidatedEdges);\n      setAdjList(newAdjList);\n    }\n    setIsDirected(!isDirected);\n  };\n\n  // Function to sleep and check for pausing\n  const sleep = duration => {\n    return new Promise(resolve => {\n      const interval = 50;\n      let elapsed = 0;\n      const checkPauseAndSleep = () => {\n        if (isPausedRef.current) {\n          const checkPause = () => {\n            if (isStepModeRef.current) {\n              setIsStepMode(true);\n              resolve();\n            } else if (!isPausedRef.current) {\n              resolve();\n            } else {\n              setTimeout(checkPause, interval);\n            }\n          };\n          checkPause();\n        } else {\n          if (elapsed < duration) {\n            elapsed += interval;\n            setTimeout(checkPauseAndSleep, interval);\n          } else {\n            resolve();\n          }\n        }\n      };\n      checkPauseAndSleep();\n    });\n  };\n\n  // JSX for rendering the component\n  return /*#__PURE__*/_jsxDEV(GraphsProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Graph Creation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 17\n        }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: handleAddEdge,\n          children: \"Add Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 17\n        }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: removeNode,\n          children: \"Remove Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 17\n        }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: addNode,\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 17\n        }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: generateGraph,\n          children: \"Generate Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 17\n        }, this), !selectedNode && nodes.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: resetGraph,\n          children: \"Reset Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 17\n        }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Edge Editing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 21\n        }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: toggleGraphType,\n          children: isDirected ? 'Set Undirected' : 'Set Directed'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this), !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: () => {\n            if (edges.length > 0) {\n              setShowWeights(!showWeights);\n            }\n          },\n          children: showWeights ? 'Hide Weights' : 'Show Weights'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 21\n        }, this), !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: startRemovingEdge,\n          children: \"Remove Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 17\n        }, this), algorithmStarted && !disablePause && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Control\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"graph-button\",\n            onClick: nextStep,\n            children: \"Next Step\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"graph-button\",\n            onClick: togglePlayPause,\n            children: (isPaused || isStepMode) && !disablePause ? \"Play\" : \"Pause\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"slider-label\",\n            children: \"Algorithm Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slider-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Slow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"100\",\n              max: \"2000\",\n              step: \"100\",\n              value: sliderValue,\n              onChange: handleSliderChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Fast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"graph-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"edges-svg\",\n            style: {\n              position: 'absolute',\n              width: '100%',\n              height: '100%'\n            },\n            children: edges.map((edge, index) => {\n              var _visitedEdges$find, _visitedEdges$find2, _visitedEdges$find3;\n              const midpoint = calculateMidpoint(edge);\n              const {\n                angle,\n                flipped\n              } = calculateAngle(edge);\n              const arrowLength = 15;\n              const arrowAngle = 30;\n              const nodeRadius = 10;\n              const dx = edge.to.x - edge.from.x;\n              const dy = edge.to.y - edge.from.y;\n              const length = Math.sqrt(dx * dx + dy * dy);\n              const unitDx = dx / length;\n              const unitDy = dy / length;\n              const baseX = edge.to.x - nodeRadius * unitDx;\n              const baseY = edge.to.y - nodeRadius * unitDy;\n              const edgeCount = edges.filter(e => e.from.id === edge.from.id && e.to.id === edge.to.id || e.from.id === edge.to.id && e.to.id === edge.from.id).length;\n              let offsetX = 0;\n              let offsetY = 0;\n              if (edgeCount > 1) {\n                offsetX = 5 * unitDy;\n                offsetY = -5 * unitDx;\n              }\n              const adjustedFromX = edge.from.x + 10 + offsetX;\n              const adjustedFromY = edge.from.y + 10 + offsetY;\n              const adjustedToX = baseX + 10 + offsetX;\n              const adjustedToY = baseY + 10 + offsetY;\n              const arrowBaseX = baseX + offsetX + 10;\n              const arrowBaseY = baseY + offsetY + 10;\n              let arrowX1, arrowY1, arrowX2, arrowY2;\n              if (flipped) {\n                arrowX1 = arrowBaseX + arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                arrowY1 = arrowBaseY + arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n                arrowX2 = arrowBaseX + arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                arrowY2 = arrowBaseY + arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n              } else {\n                arrowX1 = arrowBaseX - arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                arrowY1 = arrowBaseY - arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n                arrowX2 = arrowBaseX - arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                arrowY2 = arrowBaseY - arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n              }\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                  x1: adjustedFromX,\n                  y1: adjustedFromY,\n                  x2: adjustedToX,\n                  y2: adjustedToY,\n                  stroke: ((_visitedEdges$find = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find === void 0 ? void 0 : _visitedEdges$find.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                  strokeWidth: isRemovingEdge ? 8 : 4,\n                  onClick: () => handleEdgeClick(edge)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 380,\n                  columnNumber: 33\n                }, this), isDirected && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                    x1: adjustedToX,\n                    y1: adjustedToY,\n                    x2: arrowX1,\n                    y2: arrowY1,\n                    stroke: ((_visitedEdges$find2 = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find2 === void 0 ? void 0 : _visitedEdges$find2.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                    strokeWidth: isRemovingEdge ? 8 : 4\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 391,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n                    x1: adjustedToX,\n                    y1: adjustedToY,\n                    x2: arrowX2,\n                    y2: arrowY2,\n                    stroke: ((_visitedEdges$find3 = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find3 === void 0 ? void 0 : _visitedEdges$find3.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                    strokeWidth: isRemovingEdge ? 8 : 4\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 399,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true), showWeights && /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: midpoint.x + 10,\n                  y: edgeCount > 1 ? midpoint.y + 2 : midpoint.y + 7,\n                  fill: \"black\",\n                  fontSize: \"12\",\n                  transform: `rotate(${angle}, ${midpoint.x + 10}, ${midpoint.y + 10})`,\n                  textAnchor: \"middle\",\n                  children: Math.round(calculateEdgeLength(edge))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 410,\n                  columnNumber: 37\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 29\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 17\n          }, this), nodes.map(node => {\n            var _currentNode, _visitedNodes$find;\n            return /*#__PURE__*/_jsxDEV(Draggable, {\n              position: {\n                x: node.x,\n                y: node.y\n              },\n              bounds: \"parent\",\n              onStart: handleMouseDown,\n              onDrag: (e, data) => handleDrag(e, data, node),\n              onStop: handleDragStop,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"graph-node\",\n                onClick: () => handleNodeClick(node),\n                style: {\n                  border: isTSP || isBFS || isPrim || isDFS || isShortestPath ? startNode && startNode.id === node.id ? 'none' : '2px solid red' : selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none',\n                  backgroundColor: node.id === ((_currentNode = currentNode) === null || _currentNode === void 0 ? void 0 : _currentNode.id) ? 'red' : visitedNodes.some(vn => vn.id === node.id) ? ((_visitedNodes$find = visitedNodes.find(vn => vn.id === node.id)) === null || _visitedNodes$find === void 0 ? void 0 : _visitedNodes$find.color) || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\" : 'black',\n                  pointerEvents: 'auto',\n                  position: 'absolute'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 433,\n                columnNumber: 29\n              }, this)\n            }, node.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 25\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          \"class-name\": \"status-text\",\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [edges.length > 0 && !selectedNode && /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Algorithms\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 17\n        }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: setClickTraversal,\n          children: \"Traversals \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 17\n        }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: setClickMST,\n          children: \"MSTs \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 17\n        }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: setClickPath,\n          children: \"Paths \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 17\n        }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: animateKruskalsAlgorithm,\n          children: \"Kruskall\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 17\n        }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: startPrim,\n          children: \"Prim\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 17\n        }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: startDFS,\n          children: \"DFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 17\n        }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: startBFS,\n          children: \"BFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 17\n        }, this), clickedPaths && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: startShortestPath,\n          children: \"Shortest Path\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 17\n        }, this), clickedPaths && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: startTSP,\n          children: \"TSP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 17\n        }, this), !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: graphColoring,\n          children: \"Graph Coloring\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 17\n        }, this), !isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: findConnectedComponents,\n          children: \"Connected Components\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 17\n        }, this), isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: findStrongComponents,\n          children: \"Strong Components\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 17\n        }, this), (clickedTraversal || clickedMST || clickedPaths) && !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: goBack,\n          children: \"\\u2190 Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 9\n  }, this);\n};\n_s2(Graphs, \"lmKIB/0eX56NgagUorqb5+J5r24=\", false, function () {\n  return [useGraphStates];\n});\n_c = Graphs;\nexport default Graphs;\nvar _c;\n$RefreshReg$(_c, \"Graphs\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Draggable","GraphsProvider","useNodeFunctions","useAlgorithms","jsxDEV","_jsxDEV","Fragment","_Fragment","useGraphStates","_s","text","setText","nodes","setNodes","nodeCount","setNodeCount","edges","setEdges","selectedNode","setSelectedNode","isAddingEdge","setIsAddingEdge","dragging","setDragging","isRemovingEdge","setIsRemovingEdge","visitedNodes","setVisitedNodes","visitedEdges","setVisitedEdges","adjList","setAdjList","clickedTraversal","setClickedTraveral","clickedMST","setClickedMST","clickedPaths","setClickedPaths","isDFS","setIsDFS","isBFS","setIsBFS","isPrim","setIsPrim","isTSP","setIsTSP","algorithmRunning","setAlgorithmRunning","isShortestPath","setIsShortestPath","startNode","setStartNode","endNode","setEndNode","componentColors","components","setComponents","showWeights","setShowWeights","sliderValue","setSliderValue","currentNode","setCurrentNode","sliderValueRef","totalSliderCount","isPaused","setIsPaused","isPausedRef","currentStep","setCurrentStep","currentStepRef","isStepMode","setIsStepMode","isStepModeRef","disablePause","setDisablePause","algorithmStarted","setAlgorithmStarted","runningAlgorithm","setRunningAlgorithm","isDirected","setIsDirected","setClickedTraversal","Graphs","_s2","graphStates","highlightedButtonColor","startingText","treeEdgeColor","currentEdgeColor","defaultEdgeColor","current","resetEdges","setClickTraversal","setClickMST","setClickPath","goBack","nextStep","prev","next","togglePlayPause","toggleGraphType","consolidatedEdges","edgeSet","Set","forEach","edge","edgeKey","Math","min","from","id","to","max","has","add","push","newAdjList","sleep","duration","Promise","resolve","interval","elapsed","checkPauseAndSleep","checkPause","setTimeout","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","handleAddEdge","removeNode","addNode","generateGraph","length","resetGraph","startRemovingEdge","type","step","value","onChange","handleSliderChange","style","position","width","height","map","index","_visitedEdges$find","_visitedEdges$find2","_visitedEdges$find3","midpoint","calculateMidpoint","angle","flipped","calculateAngle","arrowLength","arrowAngle","nodeRadius","dx","x","dy","y","sqrt","unitDx","unitDy","baseX","baseY","edgeCount","filter","e","offsetX","offsetY","adjustedFromX","adjustedFromY","adjustedToX","adjustedToY","arrowBaseX","arrowBaseY","arrowX1","arrowY1","arrowX2","arrowY2","cos","PI","sin","x1","y1","x2","y2","stroke","find","color","strokeWidth","handleEdgeClick","fill","fontSize","transform","textAnchor","round","calculateEdgeLength","node","_currentNode","_visitedNodes$find","bounds","onStart","handleMouseDown","onDrag","data","handleDrag","onStop","handleDragStop","handleNodeClick","border","backgroundColor","some","vn","findIndex","comp","n","pointerEvents","animateKruskalsAlgorithm","startPrim","startDFS","startBFS","startShortestPath","startTSP","graphColoring","findConnectedComponents","findStrongComponents","_c","$RefreshReg$"],"sources":["/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js"],"sourcesContent":["import React, {useState, useRef, useEffect } from 'react';\nimport Draggable from 'react-draggable';\nimport { GraphsProvider } from './GraphsContext';\nimport { useNodeFunctions } from './NodeFunctions';\nimport { useAlgorithms } from './Algorithms';\n\nexport const useGraphStates = () => {\n    // State variables to manage graph nodes, edges, and various UI states\n    const [text, setText] = useState(\"Add Node or Generate Graph to Begin\");\n    const [nodes, setNodes] = useState([]);\n    const [nodeCount, setNodeCount] = useState(0);\n    const [edges, setEdges] = useState([]);\n    const [selectedNode, setSelectedNode] = useState(null);\n    const [isAddingEdge, setIsAddingEdge] = useState(false);\n    const [dragging, setDragging] = useState(false);\n    const [isRemovingEdge, setIsRemovingEdge] = useState(false);\n    const [visitedNodes, setVisitedNodes] = useState([]);\n    const [visitedEdges, setVisitedEdges] = useState([]);\n    const [adjList, setAdjList] = useState([]);\n    const [clickedTraversal, setClickedTraveral] = useState(false);\n    const [clickedMST, setClickedMST] = useState(false);\n    const [clickedPaths, setClickedPaths] = useState(false);\n    const [isDFS, setIsDFS] = useState(false);\n    const [isBFS, setIsBFS] = useState(false);\n    const [isPrim, setIsPrim] = useState(false);\n    const [isTSP, setIsTSP] = useState(false);\n    const [algorithmRunning, setAlgorithmRunning] = useState(false);\n    const [isShortestPath, setIsShortestPath] = useState(false);\n    const [startNode, setStartNode] = useState(null);\n    const [endNode, setEndNode] = useState(null);\n    const [componentColors] = useState([\"blue\", \"green\", \"orange\", \"purple\", \"pink\", \"yellow\", \"gold\", \"coral\", \"crimson\", \"cyan\", \"darkgreen\", \"drakblue\", \"darkorange\", \"darkorchid\", \"darkred\", \"deeppink\", \"darkviolet\", \"deepskyblue\", \"forestgreen\", \"fuchsia\"]);\n    const [components, setComponents] = useState([]);\n    const [showWeights, setShowWeights] = useState(false);\n    const [sliderValue, setSliderValue] = useState(250);\n    const [currentNode, setCurrentNode] = useState(null);\n    const sliderValueRef = useRef(sliderValue);\n    const totalSliderCount = 2100;\n    const [isPaused, setIsPaused] = useState(false);\n    const isPausedRef = useRef(isPaused);\n    const [currentStep, setCurrentStep] = useState(0);\n    const currentStepRef = useRef(currentStep);\n    const [isStepMode, setIsStepMode] = useState(false);\n    const isStepModeRef = useRef(isStepMode);\n    const [disablePause, setDisablePause] = useState(false);\n    const [algorithmStarted, setAlgorithmStarted]=  useState(false);\n    const [runningAlgorithm, setRunningAlgorithm] = useState(null);\n    const [isDirected, setIsDirected] = useState(false);\n\n    return {\n        text, setText, nodes, setNodes, nodeCount, setNodeCount, edges, setEdges, selectedNode, setSelectedNode,\n        isAddingEdge, setIsAddingEdge, dragging, setDragging, isRemovingEdge, setIsRemovingEdge, visitedNodes,\n        setVisitedNodes, visitedEdges, setVisitedEdges, adjList, setAdjList, clickedTraversal, setClickedTraversal,\n        clickedMST, setClickedMST, clickedPaths, setClickedPaths, isDFS, setIsDFS, isBFS, setIsBFS, isPrim, setIsPrim,\n        isTSP, setIsTSP, algorithmRunning, setAlgorithmRunning, isShortestPath, setIsShortestPath, startNode, setStartNode,\n        endNode, setEndNode, componentColors, components, setComponents, showWeights, setShowWeights, sliderValue,\n        setSliderValue, currentNode, setCurrentNode, sliderValueRef, totalSliderCount, isPaused, setIsPaused, isPausedRef,\n        currentStep, setCurrentStep, currentStepRef, isStepMode, setIsStepMode, isStepModeRef, disablePause, setDisablePause,\n        algorithmStarted, setAlgorithmStarted, runningAlgorithm, setRunningAlgorithm, isDirected, setIsDirected\n    };\n}\n\nconst Graphs = () => {\n    const graphStates = useGraphStates();\n\n    // Constants for UI text and colors\n    const highlightedButtonColor = \"lightblue\";\n    const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n    const treeEdgeColor = \"blue\"; \n    const currentEdgeColor = \"red\"; \n    const defaultEdgeColor = \"grey\";\n\n    // Use Effect to differentiate between modes\n    useEffect(() => {\n        isStepModeRef.current = isStepMode;\n    }, [isStepMode]);\n\n    // Use Effect to allow pausing mid-alg\n    useEffect(() => {\n        isPausedRef.current = isPaused;\n    }, [isPaused]);\n\n    // Use Effect to allow stopping mid-alg\n    useEffect(() => {\n        currentStepRef.current = currentStepRef;\n    }, [currentStepRef]);\n\n    // Function to reset edges to default state\n    const resetEdges = () => {\n        setVisitedEdges([]);\n        setVisitedNodes([]);\n        setText(startingText);\n        setAlgorithmRunning(false);\n        setCurrentStep(0);\n        currentStepRef.current = 0;\n        setDisablePause(false);\n        setRunningAlgorithm(null);\n    };\n\n    // Function to set traversal mode\n    const setClickTraversal = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedTraveral(true);\n    }\n\n    // Function to set MST mode\n    const setClickMST = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedMST(true);\n    }\n\n    // Function to set Paths mode\n    const setClickPath = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedPaths(true);\n    }\n\n    // Functino to go back from algorithm selection\n    const goBack = () => {\n\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        \n        setClickedMST(false);\n        setClickedTraveral(false);\n        setClickedPaths(false);\n        setAlgorithmRunning(false);\n        setText(startingText);\n    }\n\n    // Function to step in the algorithm\n    const nextStep = () => {\n        if(isPausedRef.current){\n            setIsStepMode(true);\n            if(isPausedRef.current){\n                setCurrentStep(prev => {\n                    const next = prev + 1;\n                    currentStepRef.current = next;\n                    return next;\n                });\n            }\n            setIsPaused(false);\n            isPausedRef.current = false;\n        }\n    };\n\n    // Function to toggle button \n    const togglePlayPause = () => {\n        if (isPausedRef.current) {\n            setIsStepMode(false);\n            setIsPaused(false);\n            isPausedRef.current = false;\n            switch (runningAlgorithm) {\n                case \"DFS\":\n                    setText(\"DFS in progress...\")\n                    break;\n                case \"BFS\":\n                    setText(\"BFS in progress...\")\n                    break;\n                case \"Kruskall\":\n                    setText(\"Kruskall's Algorithm in progress...\")\n                    break;\n                case \"Prim\":\n                    setText(\"Prim's Algorithm in progress...\")\n                    break;\n                case \"SP\":\n                    setText(\"Shortest Path Algorithm in progress...\")\n                    break;\n                case \"TSP\":\n                    setText(\"TSP in progress...\")\n                    break;\n                case \"Connected\":\n                    setText(\"Connected Components in progress..\")\n                    break;\n                case \"Colors\":\n                    setText(\"Graph Coloring in progress...\")\n                    break;\n                }\n        } else {\n            setIsStepMode(false);\n            setIsPaused(true);\n            isPausedRef.current = true;\n            setText(\"Algorithm is Paused\");\n        }\n    };\n    \n    // Function to switch between directed and undirected graphs\n    const toggleGraphType = () => {\n        if(algorithmRunning){\n            return;\n        }\n        if (isDirected) {\n            const consolidatedEdges = [];\n            const edgeSet = new Set();\n    \n            edges.forEach(edge => {\n                const edgeKey = `${Math.min(edge.from.id, edge.to.id)}-${Math.max(edge.from.id, edge.to.id)}`;\n                if (!edgeSet.has(edgeKey)) {\n                    edgeSet.add(edgeKey);\n                    consolidatedEdges.push(edge);\n                }\n            });\n    \n            const newAdjList = {};\n            consolidatedEdges.forEach(edge => {\n                if (!newAdjList[edge.from.id]) newAdjList[edge.from.id] = [];\n                if (!newAdjList[edge.to.id]) newAdjList[edge.to.id] = [];\n                newAdjList[edge.from.id].push(edge.to.id);\n                newAdjList[edge.to.id].push(edge.from.id);\n            });\n    \n            setEdges(consolidatedEdges);\n            setAdjList(newAdjList);\n        }\n        setIsDirected(!isDirected);\n    }\n\n    // Function to sleep and check for pausing\n    const sleep = (duration) => {\n        return new Promise((resolve) => {\n            const interval = 50;\n            let elapsed = 0;\n\n            const checkPauseAndSleep = () => {\n                if (isPausedRef.current) {\n                    const checkPause = () => {\n                        if(isStepModeRef.current){\n                            setIsStepMode(true);\n                            resolve();\n                        }else if (!isPausedRef.current){\n                            resolve();\n                        }else {\n                            setTimeout(checkPause, interval);\n                        }\n                    };\n                    checkPause();\n                } else {\n                    if (elapsed < duration) {\n                        elapsed += interval;\n                        setTimeout(checkPauseAndSleep, interval);\n                    } else {\n                        resolve();\n                    }\n                }\n            };\n\n            checkPauseAndSleep();\n        });\n    };\n\n    // JSX for rendering the component\n    return (\n        <GraphsProvider>\n        <div className=\"main-container\">\n            <div className=\"button-container\">\n                <h3>Graph Creation</h3>\n\n                {/* Graph Creation and Updating when node selected */}\n                {selectedNode && (\n                <button className=\"graph-button\" onClick={handleAddEdge}>Add Edge</button>)}\n                {selectedNode && (\n                <button className=\"graph-button\" onClick={removeNode}>Remove Node</button>)}\n\n                {/* Graph Creation and Updating */}\n                {!selectedNode && (\n                <button className=\"graph-button\" onClick={addNode}>Add Node</button>)}\n                {!selectedNode && (\n                <button className=\"graph-button\" onClick={generateGraph}>Generate Graph</button>)}\n                {!selectedNode && nodes.length > 0 && (\n                <button className=\"graph-button\" onClick={resetGraph}>Reset Graph</button>)}\n\n                {/* Edge Editing */}\n                {!selectedNode && (\n                    <h3>Edge Editing</h3>)}\n                {!selectedNode && (\n                    <button className=\"graph-button\" onClick={toggleGraphType}>\n                        {isDirected ? 'Set Undirected' : 'Set Directed'}\n                    </button>)}\n                {!selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={() => {if(edges.length>0){setShowWeights(!showWeights)}}}>\n                        {showWeights ? 'Hide Weights' : 'Show Weights'}\n                    </button>)}\n                {!selectedNode && edges.length > 0 && (\n                <button className=\"graph-button\" onClick={startRemovingEdge}>Remove Edge</button>)}\n\n                \n                {algorithmStarted && !disablePause && (\n                    <>\n                        <h3>Control</h3>\n                        <button className=\"graph-button\" onClick={nextStep}>Next Step</button>\n                        <button className=\"graph-button\" onClick={togglePlayPause}>\n                            {((isPaused || isStepMode) && !disablePause) ? \"Play\" : \"Pause\"}\n                        </button>\n                    </>\n                )}\n\n            </div>\n                \n            <div className=\"graph-content\">\n                <div className=\"slider-container\">\n                    <h4 className=\"slider-label\">Algorithm Speed</h4>\n                    <div className=\"slider-content\">\n                        <h4>Slow</h4>\n                        <input \n                            type=\"range\" \n                            min=\"100\" \n                            max=\"2000\" \n                            step=\"100\" \n                            value={sliderValue} \n                            onChange={handleSliderChange}\n                        />\n                        <h4>Fast</h4>\n                    </div>\n                </div>\n                <div className=\"graph-box\">\n                <svg className=\"edges-svg\" style={{ position: 'absolute', width: '100%', height: '100%' }}>\n                    {edges.map((edge, index) => {\n                        const midpoint = calculateMidpoint(edge);\n                        const { angle, flipped } = calculateAngle(edge);\n                        const arrowLength = 15;\n                        const arrowAngle = 30;\n                        const nodeRadius = 10;\n                \n                        \n                        const dx = edge.to.x - edge.from.x;\n                        const dy = edge.to.y - edge.from.y;\n                        const length = Math.sqrt(dx * dx + dy * dy);\n                        const unitDx = dx / length;\n                        const unitDy = dy / length;\n                        \n                        const baseX = edge.to.x - nodeRadius * unitDx;\n                        const baseY = edge.to.y - nodeRadius * unitDy;\n                        \n                        const edgeCount = edges.filter(e => \n                            (e.from.id === edge.from.id && e.to.id === edge.to.id) || \n                            (e.from.id === edge.to.id && e.to.id === edge.from.id)\n                        ).length;\n\n                        let offsetX = 0;\n                        let offsetY = 0;\n\n                        if (edgeCount > 1) {\n                            offsetX = 5 * unitDy; \n                            offsetY = -5 * unitDx;\n                        }\n\n                        const adjustedFromX = edge.from.x + 10 + offsetX;\n                        const adjustedFromY = edge.from.y + 10 + offsetY;\n                        const adjustedToX = baseX + 10 + offsetX ;\n                        const adjustedToY = baseY + 10 + offsetY;\n\n                        const arrowBaseX = baseX + offsetX + 10;\n                        const arrowBaseY = baseY + offsetY + 10;\n                \n                        let arrowX1, arrowY1, arrowX2, arrowY2;\n                        if (flipped) {\n                            arrowX1 = arrowBaseX + arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                            arrowY1 = arrowBaseY + arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n                            arrowX2 = arrowBaseX + arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                            arrowY2 = arrowBaseY + arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n                        } else {\n                            arrowX1 = arrowBaseX - arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                            arrowY1 = arrowBaseY - arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n                            arrowX2 = arrowBaseX - arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                            arrowY2 = arrowBaseY - arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n                        }\n\n\n                        return (\n                            <React.Fragment key={index}>\n                                <line\n                                    x1={adjustedFromX}\n                                    y1={adjustedFromY}\n                                    x2={adjustedToX}\n                                    y2={adjustedToY}\n                                    stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                    strokeWidth={isRemovingEdge ? 8 : 4}\n                                    onClick={() => handleEdgeClick(edge)}\n                                />\n                                {isDirected && (\n                                   <>\n                                        <line\n                                            x1={adjustedToX}\n                                            y1={adjustedToY}\n                                            x2={arrowX1}\n                                            y2={arrowY1}\n                                            stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                            strokeWidth={isRemovingEdge ? 8 : 4}\n                                        />\n                                        <line\n                                           x1={adjustedToX}\n                                           y1={adjustedToY}\n                                           x2={arrowX2}\n                                           y2={arrowY2}\n                                            stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                            strokeWidth={isRemovingEdge ? 8 : 4}\n                                        />\n                                    </>\n                                )}\n                                {showWeights && (\n                                    <text\n                                        x={midpoint.x + 10}\n                                        y={edgeCount > 1 ? midpoint.y + 2 : midpoint.y + 7}\n                                        fill=\"black\"\n                                        fontSize=\"12\"\n                                        transform={`rotate(${angle}, ${midpoint.x + 10}, ${midpoint.y + 10})`}\n                                        textAnchor=\"middle\"\n                                    >\n                                        {Math.round(calculateEdgeLength(edge))}\n                                    </text>)}\n                            </React.Fragment>\n                        );\n                    })}\n                </svg>\n                    {nodes.map(node => (\n                        <Draggable\n                            key={node.id}\n                            position={{ x: node.x, y: node.y }}\n                            bounds=\"parent\"\n                            onStart={handleMouseDown}\n                            onDrag={(e, data) => handleDrag(e, data, node)}\n                            onStop={handleDragStop}\n                        >\n                            <div\n                                className=\"graph-node\"\n                                onClick={() => handleNodeClick(node)}\n                                style={{\n                                    border: (isTSP || isBFS || isPrim || isDFS || isShortestPath) ? (startNode && startNode.id === node.id ? 'none' : '2px solid red') : (selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none'),\n                                    backgroundColor: \n                                    node.id === currentNode?.id ? 'red' : \n                                    visitedNodes.some(vn => vn.id === node.id) ? \n                                        (visitedNodes.find(vn => vn.id === node.id)?.color || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\") \n                                        : 'black',\n                                    pointerEvents: 'auto',\n                                    position: 'absolute'\n                                }}\n                            >\n                            </div>\n                        </Draggable>\n                    ))}\n                </div>\n                <h3 class-name=\"status-text\">{text}</h3>\n            </div>\n\n            <div className=\"button-container\">    \n                {/* Traversal and MST and Path*/}\n                {edges.length > 0 && !selectedNode &&(\n                <h3>Algorithms</h3>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickTraversal}>Traversals →</button>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickMST}>MSTs →</button>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickPath}>Paths →</button>)}\n\n\n                {/* Specific Algorithms */}\n                {clickedMST && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={animateKruskalsAlgorithm}>Kruskall</button>)}\n                {clickedMST && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startPrim}>Prim</button>)}\n\n                {clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\", backgroundColor: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startDFS}>DFS</button>)}\n                {clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startBFS}>BFS</button>)}\n\n                {clickedPaths && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startShortestPath}>Shortest Path</button>)}\n                {clickedPaths && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startTSP}>TSP</button>)}\n                \n                {!clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={graphColoring}>Graph Coloring</button>)}\n                {!isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={findConnectedComponents}>Connected Components</button>)}\n                {isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={findStrongComponents}>Strong Components</button>)}\n\n                {/* Back Button */}\n                {(clickedTraversal || clickedMST || clickedPaths) && !selectedNode && (\n                <button className=\"graph-button\" onClick={goBack}>← Back</button>)} \n                \n            </div>\n        </div>\n        </GraphsProvider>\n    );\n};\n\nexport default Graphs;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}