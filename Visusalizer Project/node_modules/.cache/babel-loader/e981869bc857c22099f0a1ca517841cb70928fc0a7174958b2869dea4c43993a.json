{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport Draggable from 'react-draggable';\nimport { useGraphStates } from './GraphsContext';\nconst GraphComponent = () => {\n  _s();\n  const {\n    nodes,\n    edges,\n    adjList,\n    setVisitedNodes,\n    setVisitedEdges,\n    setAlgorithmStarted,\n    setText,\n    resetEdges,\n    setCurrentNode,\n    isPausedRef,\n    currentStepRef,\n    isStepModeRef,\n    sliderValueRef,\n    totalSliderCount,\n    componentColors,\n    setComponents,\n    algorithmRunning,\n    isRemovingEdge,\n    setRunningAlgorithm,\n    setIsDFS,\n    setAlgorithmRunning,\n    treeEdgeColor,\n    isDirected,\n    currentEdgeColor,\n    setIsPaused,\n    startNode,\n    setIsBFS,\n    setIsPrim,\n    setIsDirected,\n    defaultEdgeColor,\n    setDisablePause,\n    nodeCount,\n    setIsShortestPath,\n    setStartNode,\n    setEndNode,\n    setIsTSP,\n    sleep\n  } = useGraphStates();\n  console.log(useGraphStates);\n\n  // Constants for UI text and colors\n  const highlightedButtonColor = \"lightblue\";\n  const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n\n  // Use Effect to differentiate between modes\n  /* useEffect(() => {\n       isStepModeRef.current = isStepMode;\n   }, [isStepMode]);\n    // Use sEffect to allow pausing mid-alg\n   useEffect(() => {\n       isPausedRef.current = isPaused;\n   }, [isPaused]);\n    // Use Effect to allow stopping mid-alg\n   useEffect(() => {\n       currentStepRef.current = currentStepRef;\n   }, [currentStepRef]);\n    // Function to reset edges to default state\n   const resetEdges = () => {\n       setVisitedEdges([]);\n       setVisitedNodes([]);\n       setText(startingText);\n       setAlgorithmRunning(false);\n       setCurrentStep(0);\n       currentStepRef.current = 0;\n       setDisablePause(false);\n       setRunningAlgorithm(null);\n   };\n    // Function to set traversal mode\n   const setClickTraversal = () => {\n       if(algorithmRunning){\n           return;\n       }\n        setClickedTraveral(true);\n   }\n    // Function to set MST mode\n   const setClickMST = () => {\n       if(algorithmRunning){\n           return;\n       }\n        setClickedMST(true);\n   }\n    // Function to set Paths mode\n   const setClickPath = () => {\n       if(algorithmRunning){\n           return;\n       }\n        setClickedPaths(true);\n   }\n    // Functino to go back from algorithm selection\n   const goBack = () => {\n        if(algorithmRunning || isRemovingEdge){\n           return;\n       }\n       \n       setClickedMST(false);\n       setClickedTraveral(false);\n       setClickedPaths(false);\n       setAlgorithmRunning(false);\n       setText(startingText);\n   }\n    // Function to step in the algorithm\n   const nextStep = () => {\n       if(isPausedRef.current){\n           setIsStepMode(true);\n           if(isPausedRef.current){\n               setCurrentStep(prev => {\n                   const next = prev + 1;\n                   currentStepRef.current = next;\n                   return next;\n               });\n           }\n           setIsPaused(false);\n           isPausedRef.current = false;\n       }\n   };\n    // Function to toggle button \n   const togglePlayPause = () => {\n       if (isPausedRef.current) {\n           setIsStepMode(false);\n           setIsPaused(false);\n           isPausedRef.current = false;\n           switch (runningAlgorithm) {\n               case \"DFS\":\n                   setText(\"DFS in progress...\")\n                   break;\n               case \"BFS\":\n                   setText(\"BFS in progress...\")\n                   break;\n               case \"Kruskall\":\n                   setText(\"Kruskall's Algorithm in progress...\")\n                   break;\n               case \"Prim\":\n                   setText(\"Prim's Algorithm in progress...\")\n                   break;\n               case \"SP\":\n                   setText(\"Shortest Path Algorithm in progress...\")\n                   break;\n               case \"TSP\":\n                   setText(\"TSP in progress...\")\n                   break;\n               case \"Connected\":\n                   setText(\"Connected Components in progress..\")\n                   break;\n               case \"Colors\":\n                   setText(\"Graph Coloring in progress...\")\n                   break;\n               }\n       } else {\n           setIsStepMode(false);\n           setIsPaused(true);\n           isPausedRef.current = true;\n           setText(\"Algorithm is Paused\");\n       }\n   };\n   \n   // Function to switch between directed and undirected graphs\n   const toggleGraphType = () => {\n       if(algorithmRunning){\n           return;\n       }\n       if (isDirected) {\n           const consolidatedEdges = [];\n           const edgeSet = new Set();\n   \n           edges.forEach(edge => {\n               const edgeKey = `${Math.min(edge.from.id, edge.to.id)}-${Math.max(edge.from.id, edge.to.id)}`;\n               if (!edgeSet.has(edgeKey)) {\n                   edgeSet.add(edgeKey);\n                   consolidatedEdges.push(edge);\n               }\n           });\n   \n           const newAdjList = {};\n           consolidatedEdges.forEach(edge => {\n               if (!newAdjList[edge.from.id]) newAdjList[edge.from.id] = [];\n               if (!newAdjList[edge.to.id]) newAdjList[edge.to.id] = [];\n               newAdjList[edge.from.id].push(edge.to.id);\n               newAdjList[edge.to.id].push(edge.from.id);\n           });\n   \n           setEdges(consolidatedEdges);\n           setAdjList(newAdjList);\n       }\n       setIsDirected(!isDirected);\n   }*/\n\n  // JSX for rendering the component\n};\n_s(GraphComponent, \"Dkfk1YRw6zDOpeRdqKV73/+YA/Y=\", false, function () {\n  return [useGraphStates];\n});\n_c = GraphComponent;\nconst Graphs = () => {};\n_c2 = Graphs;\nexport default Graphs;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"Graphs\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Draggable","useGraphStates","GraphComponent","_s","nodes","edges","adjList","setVisitedNodes","setVisitedEdges","setAlgorithmStarted","setText","resetEdges","setCurrentNode","isPausedRef","currentStepRef","isStepModeRef","sliderValueRef","totalSliderCount","componentColors","setComponents","algorithmRunning","isRemovingEdge","setRunningAlgorithm","setIsDFS","setAlgorithmRunning","treeEdgeColor","isDirected","currentEdgeColor","setIsPaused","startNode","setIsBFS","setIsPrim","setIsDirected","defaultEdgeColor","setDisablePause","nodeCount","setIsShortestPath","setStartNode","setEndNode","setIsTSP","sleep","console","log","highlightedButtonColor","startingText","_c","Graphs","_c2","$RefreshReg$"],"sources":["/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js"],"sourcesContent":["import React, {useState, useRef, useEffect } from 'react';\nimport Draggable from 'react-draggable';\nimport {useGraphStates } from './GraphsContext';\n\n\nconst GraphComponent = () => {\n    const {\n        nodes, edges, adjList, setVisitedNodes, setVisitedEdges, setAlgorithmStarted, setText, resetEdges,\n        setCurrentNode, isPausedRef, currentStepRef, isStepModeRef, sliderValueRef, totalSliderCount, \n        componentColors, setComponents, algorithmRunning, isRemovingEdge, setRunningAlgorithm, setIsDFS, setAlgorithmRunning,\n        treeEdgeColor, isDirected, currentEdgeColor, setIsPaused, startNode, setIsBFS, setIsPrim, setIsDirected, defaultEdgeColor,\n        setDisablePause, nodeCount, setIsShortestPath, setStartNode, setEndNode, setIsTSP, sleep\n    } = useGraphStates();\n    \n    console.log(useGraphStates);\n\n    // Constants for UI text and colors\n    const highlightedButtonColor = \"lightblue\";\n    const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n\n    // Use Effect to differentiate between modes\n   /* useEffect(() => {\n        isStepModeRef.current = isStepMode;\n    }, [isStepMode]);\n\n    // Use sEffect to allow pausing mid-alg\n    useEffect(() => {\n        isPausedRef.current = isPaused;\n    }, [isPaused]);\n\n    // Use Effect to allow stopping mid-alg\n    useEffect(() => {\n        currentStepRef.current = currentStepRef;\n    }, [currentStepRef]);\n\n    // Function to reset edges to default state\n    const resetEdges = () => {\n        setVisitedEdges([]);\n        setVisitedNodes([]);\n        setText(startingText);\n        setAlgorithmRunning(false);\n        setCurrentStep(0);\n        currentStepRef.current = 0;\n        setDisablePause(false);\n        setRunningAlgorithm(null);\n    };\n\n    // Function to set traversal mode\n    const setClickTraversal = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedTraveral(true);\n    }\n\n    // Function to set MST mode\n    const setClickMST = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedMST(true);\n    }\n\n    // Function to set Paths mode\n    const setClickPath = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedPaths(true);\n    }\n\n    // Functino to go back from algorithm selection\n    const goBack = () => {\n\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        \n        setClickedMST(false);\n        setClickedTraveral(false);\n        setClickedPaths(false);\n        setAlgorithmRunning(false);\n        setText(startingText);\n    }\n\n    // Function to step in the algorithm\n    const nextStep = () => {\n        if(isPausedRef.current){\n            setIsStepMode(true);\n            if(isPausedRef.current){\n                setCurrentStep(prev => {\n                    const next = prev + 1;\n                    currentStepRef.current = next;\n                    return next;\n                });\n            }\n            setIsPaused(false);\n            isPausedRef.current = false;\n        }\n    };\n\n    // Function to toggle button \n    const togglePlayPause = () => {\n        if (isPausedRef.current) {\n            setIsStepMode(false);\n            setIsPaused(false);\n            isPausedRef.current = false;\n            switch (runningAlgorithm) {\n                case \"DFS\":\n                    setText(\"DFS in progress...\")\n                    break;\n                case \"BFS\":\n                    setText(\"BFS in progress...\")\n                    break;\n                case \"Kruskall\":\n                    setText(\"Kruskall's Algorithm in progress...\")\n                    break;\n                case \"Prim\":\n                    setText(\"Prim's Algorithm in progress...\")\n                    break;\n                case \"SP\":\n                    setText(\"Shortest Path Algorithm in progress...\")\n                    break;\n                case \"TSP\":\n                    setText(\"TSP in progress...\")\n                    break;\n                case \"Connected\":\n                    setText(\"Connected Components in progress..\")\n                    break;\n                case \"Colors\":\n                    setText(\"Graph Coloring in progress...\")\n                    break;\n                }\n        } else {\n            setIsStepMode(false);\n            setIsPaused(true);\n            isPausedRef.current = true;\n            setText(\"Algorithm is Paused\");\n        }\n    };\n    \n    // Function to switch between directed and undirected graphs\n    const toggleGraphType = () => {\n        if(algorithmRunning){\n            return;\n        }\n        if (isDirected) {\n            const consolidatedEdges = [];\n            const edgeSet = new Set();\n    \n            edges.forEach(edge => {\n                const edgeKey = `${Math.min(edge.from.id, edge.to.id)}-${Math.max(edge.from.id, edge.to.id)}`;\n                if (!edgeSet.has(edgeKey)) {\n                    edgeSet.add(edgeKey);\n                    consolidatedEdges.push(edge);\n                }\n            });\n    \n            const newAdjList = {};\n            consolidatedEdges.forEach(edge => {\n                if (!newAdjList[edge.from.id]) newAdjList[edge.from.id] = [];\n                if (!newAdjList[edge.to.id]) newAdjList[edge.to.id] = [];\n                newAdjList[edge.from.id].push(edge.to.id);\n                newAdjList[edge.to.id].push(edge.from.id);\n            });\n    \n            setEdges(consolidatedEdges);\n            setAdjList(newAdjList);\n        }\n        setIsDirected(!isDirected);\n    }*/\n\n    // JSX for rendering the component\n    \n    \n}\n\n\n\nconst Graphs = () => {\n}\n    \n\n    \n\nexport default Graphs;"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACzD,OAAOC,SAAS,MAAM,iBAAiB;AACvC,SAAQC,cAAc,QAAQ,iBAAiB;AAG/C,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IACFC,KAAK;IAAEC,KAAK;IAAEC,OAAO;IAAEC,eAAe;IAAEC,eAAe;IAAEC,mBAAmB;IAAEC,OAAO;IAAEC,UAAU;IACjGC,cAAc;IAAEC,WAAW;IAAEC,cAAc;IAAEC,aAAa;IAAEC,cAAc;IAAEC,gBAAgB;IAC5FC,eAAe;IAAEC,aAAa;IAAEC,gBAAgB;IAAEC,cAAc;IAAEC,mBAAmB;IAAEC,QAAQ;IAAEC,mBAAmB;IACpHC,aAAa;IAAEC,UAAU;IAAEC,gBAAgB;IAAEC,WAAW;IAAEC,SAAS;IAAEC,QAAQ;IAAEC,SAAS;IAAEC,aAAa;IAAEC,gBAAgB;IACzHC,eAAe;IAAEC,SAAS;IAAEC,iBAAiB;IAAEC,YAAY;IAAEC,UAAU;IAAEC,QAAQ;IAAEC;EACvF,CAAC,GAAGvC,cAAc,CAAC,CAAC;EAEpBwC,OAAO,CAACC,GAAG,CAACzC,cAAc,CAAC;;EAE3B;EACA,MAAM0C,sBAAsB,GAAG,WAAW;EAC1C,MAAMC,YAAY,GAAG,qDAAqeI;AAGJ,CAAC;AAAAzC,EAAA,CA7KKD,cAAc;EAAA,QAOZD,cAAc;AAAA;AAAA4C,EAAA,GAPhB3C,cAAc;AAiLpB,MAAM4C,MAAM,GAAGA,CAAA,KAAM,CACrB,CAAC;AAAAC,GAAA,GADKD,MAAM;AAMZ,eAAeA,MAAM;AAAC,IAAAD,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}