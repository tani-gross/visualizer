{"ast":null,"code":"var _jsxFileName = \"/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport Draggable from 'react-draggable';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Graphs = () => {\n  _s();\n  // State variables to manage graph nodes, edges, and various UI states\n  const [text, setText] = useState(\"Add Node or Generate Graph to Begin\");\n  const [nodes, setNodes] = useState([]);\n  const [nodeCount, setNodeCount] = useState(0);\n  const [edges, setEdges] = useState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isAddingEdge, setIsAddingEdge] = useState(false);\n  const [dragging, setDragging] = useState(false);\n  const [isRemovingEdge, setIsRemovingEdge] = useState(false);\n  // eslint-disable-next-line\n  const [visitedNodes, setVisitedNodes] = useState([]);\n  const [visitedEdges, setVisitedEdges] = useState([]);\n  const [adjList, setAdjList] = useState([]);\n  const [clickedTraversal, setClickedTraveral] = useState(false);\n  const [clickedMST, setClickedMST] = useState(false);\n  const [clickedPaths, setClickedPaths] = useState(false);\n  const [isDFS, setIsDFS] = useState(false);\n  const [isBFS, setIsBFS] = useState(false);\n  const [isPrim, setIsPrim] = useState(false);\n  const [isTSP, setIsTSP] = useState(false);\n  const [algorithmRunning, setAlgorithmRunning] = useState(false);\n  const [isShortestPath, setIsShortestPath] = useState(false);\n  const [startNode, setStartNode] = useState(null);\n  const [endNode, setEndNode] = useState(null);\n  const [componentColors] = useState([\"blue\", \"green\", \"orange\", \"purple\", \"pink\", \"yellow\", \"gold\", \"coral\", \"crimson\", \"cyan\", \"darkgreen\", \"drakblue\", \"darkorange\", \"darkorchid\", \"darkred\", \"deeppink\", \"darkviolet\", \"deepskyblue\", \"forestgreen\", \"fuchsia\"]);\n  const [components, setComponents] = useState([]);\n  const [showWeights, setShowWeights] = useState(false);\n  const [sliderValue, setSliderValue] = useState(250);\n  const [currentNode, setCurrentNode] = useState(null);\n  const sliderValueRef = useRef(sliderValue);\n  const totalSliderCount = 2100;\n  const [isPaused, setIsPaused] = useState(false);\n  const isPausedRef = useRef(isPaused);\n  const [currentStep, setCurrentStep] = useState(0);\n  const currentStepRef = useRef(currentStep);\n  const [isStepMode, setIsStepMode] = useState(false);\n  const isStepModeRef = useRef(isStepMode);\n  const [disablePause, setDisablePause] = useState(false);\n  const [algorithmStarted, setAlgorithmStarted] = useState(false);\n  const [runningAlgorithm, setRunningAlgorithm] = useState(null);\n  const [isDirected, setIsDirected] = useState(false);\n\n  // Constants for UI text and colors\n  const highlightedButtonColor = \"lightblue\";\n  const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n  const treeEdgeColor = \"blue\";\n  const currentEdgeColor = \"red\";\n  const defaultEdgeColor = \"grey\";\n\n  // Use Effect to differentiate between modes\n  useEffect(() => {\n    isStepModeRef.current = isStepMode;\n  }, [isStepMode]);\n\n  // Use Effect to allow pausing mid-alg\n  useEffect(() => {\n    isPausedRef.current = isPaused;\n  }, [isPaused]);\n\n  // Use Effect to allow stopping mid-alg\n  useEffect(() => {\n    currentStepRef.current = currentStepRef;\n  }, [currentStepRef]);\n\n  // Function to reset edges to default state\n  const resetEdges = () => {\n    setVisitedEdges([]);\n    setVisitedNodes([]);\n    setText(startingText);\n    setAlgorithmRunning(false);\n    setCurrentStep(0);\n    currentStepRef.current = 0;\n    setDisablePause(false);\n    setRunningAlgorithm(null);\n  };\n\n  // Function to calculate edge length\n  const calculateEdgeLength = edge => {\n    const dx = edge.from.x - edge.to.x;\n    const dy = edge.from.y - edge.to.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  };\n\n  // Function to calculate midpoiint of an edge\n  const calculateMidpoint = edge => {\n    const midX = (edge.from.x + edge.to.x) / 2;\n    const midY = (edge.from.y + edge.to.y) / 2;\n    return {\n      x: midX,\n      y: midY\n    };\n  };\n\n  // Fucntion to calculate angle of an edge\n  const calculateAngle = edge => {\n    const dx = edge.to.x - edge.from.x;\n    const dy = edge.to.y - edge.from.y;\n    let flipped = false;\n    let angle = Math.atan2(dy, dx) * (180 / Math.PI);\n    if (dx >= 0 && dy < 0) {} else if (dx < 0 && dy < 0) {\n      angle += 180;\n      flipped = true;\n    } else if (dx < 0 && dy >= 0) {\n      angle -= 180;\n      flipped = true;\n    } else if (dx >= 0 && dy >= 0) {}\n    return {\n      angle: angle,\n      flipped: flipped\n    };\n  };\n\n  // Function to add a new node to the graph\n  const addNode = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    if (nodes.length >= 20) {\n      alert(\"too many nodes\");\n      return;\n    }\n    setText(startingText);\n    const newNode = {\n      id: nodeCount,\n      x: Math.random() * 480,\n      y: Math.random() * 480\n    };\n    setNodes([...nodes, newNode]);\n    setAdjList(prevAdjList => ({\n      ...prevAdjList,\n      [newNode.id]: []\n    }));\n    setNodeCount(nodeCount + 1);\n  };\n\n  // Function to generate a random graph\n  const generateGraph = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    var numNodes = 0;\n    var numEdges = -1;\n    do {\n      const response = prompt(\"Enter the number of nodes:\", \"\");\n      if (isNaN(response)) {\n        alert(\"Invalid input. Please enter numbers only\");\n        continue;\n      }\n      if (response <= 0 || response > 20) {\n        alert(\"Invalid input. Number of nodes must be between 1 and 20\");\n        continue;\n      }\n      numNodes = response;\n    } while (numNodes === 0);\n    do {\n      const response = prompt(\"Enter the number of edges:\", \"\");\n      if (isNaN(response)) {\n        alert(\"Invalid input. Please enter numbers only\");\n        continue;\n      }\n      if (response > numNodes * (numNodes - 1) / 2) {\n        alert(\"Invalid input. Too many edges for the graph\");\n        continue;\n      }\n      if (response < 0) {\n        alert(\"Invalid input. Not enough edges\");\n        continue;\n      }\n      numEdges = response;\n    } while (numEdges === -1);\n    setNodes([]);\n    setEdges([]);\n    setAdjList({});\n    setNodeCount(0);\n    setVisitedNodes([]);\n    setVisitedEdges([]);\n    setSelectedNode(null);\n    setText(startingText);\n    const newNodes = [];\n    const newEdges = [];\n    const newAdjList = {};\n    const gridSize = Math.ceil(Math.sqrt(numNodes));\n    const areaWidth = 500;\n    const areaHeight = 500;\n    const margin = 10;\n    const gridSpacingX = (areaWidth - 2 * margin) / gridSize;\n    const gridSpacingY = (areaHeight - 2 * margin) / gridSize;\n    for (let i = 0; i < numNodes; i++) {\n      const row = Math.floor(i / gridSize);\n      const col = i % gridSize;\n      const x = margin + col * gridSpacingX + Math.random() * gridSpacingX * 0.9;\n      const y = margin + row * gridSpacingY + Math.random() * gridSpacingY * 0.9;\n      const newNode = {\n        id: i,\n        x: x,\n        y: y\n      };\n      newNodes.push(newNode);\n      newAdjList[i] = [];\n    }\n    while (newEdges.length < numEdges) {\n      const from = newNodes[Math.floor(Math.random() * numNodes)];\n      const to = newNodes[Math.floor(Math.random() * numNodes)];\n      if (from.id !== to.id) {\n        const edgeExists = newEdges.some(edge => edge.from.id === from.id && edge.to.id === to.id || edge.from.id === to.id && edge.to.id === from.id);\n        if (!edgeExists) {\n          const newEdge = {\n            from,\n            to,\n            color: defaultEdgeColor\n          };\n          newEdges.push(newEdge);\n          newAdjList[from.id].push(to.id);\n          newAdjList[to.id].push(from.id);\n        }\n      }\n    }\n    setNodes(newNodes);\n    setEdges(newEdges);\n    setAdjList(newAdjList);\n    setNodeCount(newNodes.length);\n  };\n\n  // Function to reset the graph\n  const resetGraph = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setNodes([]);\n    setEdges([]);\n    setClickedMST(false);\n    setClickedTraveral(false);\n    setIsRemovingEdge(false);\n    setText(startingText);\n  };\n\n  // Function to remove a selected node form the graph\n  const removeNode = () => {\n    if (selectedNode == null) return;\n    setNodes(nodes.filter(node => node.id !== selectedNode.id));\n    setEdges(edges.filter(edge => edge.from.id !== selectedNode.id && edge.to.id !== selectedNode.id));\n    setAdjList(prevAdjList => {\n      const newAdjList = {\n        ...prevAdjList\n      };\n      delete newAdjList[selectedNode.id];\n      for (const key in newAdjList) {\n        newAdjList[key] = newAdjList[key].filter(id => id !== selectedNode.id);\n      }\n      return newAdjList;\n    });\n    setSelectedNode(null);\n  };\n\n  // Function to handle clicking on a node\n  const handleNodeClick = node => {\n    if (dragging) {\n      return;\n    }\n    if (isAddingEdge) {\n      if (selectedNode && selectedNode.id !== node.id) {\n        const edgeExists = edges.some(edge => edge.from.id === selectedNode.id && edge.to.id === node.id || edge.from.id === node.id && edge.to.id === selectedNode.id);\n        if (!edgeExists) {\n          const newEdge = {\n            from: selectedNode,\n            to: node,\n            color: defaultEdgeColor\n          };\n          setEdges(prevEdges => [...prevEdges, newEdge]);\n          setAdjList(prevAdjList => {\n            const newAdjList = {\n              ...prevAdjList\n            };\n            if (!newAdjList[selectedNode.id]) newAdjList[selectedNode.id] = [];\n            if (!newAdjList[node.id]) newAdjList[node.id] = [];\n            newAdjList[selectedNode.id].push(node.id);\n            newAdjList[node.id].push(selectedNode.id);\n            return newAdjList;\n          });\n        }\n        setIsAddingEdge(false);\n        setSelectedNode(null);\n      } else if (selectedNode && selectedNode.id === node.id) {\n        setSelectedNode(null);\n        setIsAddingEdge(false);\n      }\n      setText(startingText);\n    } else if (isDFS) {\n      setVisitedNodes([]);\n      setVisitedEdges([]);\n      dfs(node);\n      setIsDFS(false);\n    } else if (isBFS) {\n      setVisitedNodes([]);\n      setVisitedEdges([]);\n      bfs(node);\n      setIsBFS(false);\n    } else if (isPrim) {\n      setIsPrim(false);\n      animatePrimsAlgorithm(node);\n    } else if (isShortestPath) {\n      if (!startNode) {\n        setStartNode(node);\n        setText(\"Select End Node for Shortest Path\");\n      } else if (!endNode) {\n        setEndNode(node);\n        setText(\"Finding Shortest Path...\");\n        findShortestPath(startNode, node);\n        setIsShortestPath(false);\n      }\n    } else if (isTSP) {\n      setVisitedNodes([]);\n      setVisitedEdges([]);\n      tsp(node);\n      setIsTSP(false);\n    } else {\n      if (selectedNode && selectedNode.id === node.id) {\n        setSelectedNode(null);\n        setText(startingText);\n      } else {\n        if (!algorithmRunning) {\n          setSelectedNode(node);\n        }\n      }\n    }\n  };\n\n  // Function to handle mouse down event for dragging\n  const handleMouseDown = () => {\n    setDragging(false);\n  };\n\n  // Function to handle slider change\n  const handleSliderChange = event => {\n    const newValue = event.target.value;\n    setSliderValue(newValue);\n    sliderValueRef.current = newValue;\n  };\n\n  // Function to start removing an edge\n  const startRemovingEdge = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    if (isRemovingEdge) {\n      setIsRemovingEdge(false);\n      setText(\"\");\n      return;\n    }\n    if (edges.length < 1) {\n      alert(\"must be at least one edge\");\n      return;\n    }\n    setText(\"Click on an edge to remove it\");\n    setIsRemovingEdge(true);\n  };\n\n  // Function to initiate adding an edge\n  const handleAddEdge = () => {\n    if (selectedNode === null) return;\n    if (nodes.length * (nodes.length - 1) / 2 === edges.length) {\n      alert(\"cannot add another edge\");\n      return;\n    }\n    if (nodes.length < 2) {\n      alert(\"You need at least two nodes to add an edge.\");\n      return;\n    }\n    setIsAddingEdge(true);\n    setText(\"Click another node to add edge\");\n  };\n\n  // Function to handle clicking on an edge\n  const handleEdgeClick = edge => {\n    if (isRemovingEdge) {\n      setEdges(edges.filter(e => e !== edge));\n      setIsRemovingEdge(false);\n      setAdjList(prevAdjList => {\n        const newAdjList = {\n          ...prevAdjList\n        };\n        newAdjList[edge.from.id] = newAdjList[edge.from.id].filter(id => id !== edge.to.id);\n        newAdjList[edge.to.id] = newAdjList[edge.to.id].filter(id => id !== edge.from.id);\n        return newAdjList;\n      });\n      setText(startingText);\n    }\n  };\n\n  // Function to handle dragging a node\n  const handleDrag = (e, data, node) => {\n    setDragging(true);\n    node.x = data.x;\n    node.y = data.y;\n    setNodes([...nodes]);\n  };\n\n  // Function to handle stopping the drag of a node\n  const handleDragStop = () => {\n    setTimeout(() => {\n      setDragging(false);\n    }, 0);\n  };\n\n  // Function to start DFS\n  const startDFS = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setRunningAlgorithm(\"DFS\");\n    setIsDFS(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Node to begin DFS\");\n  };\n\n  // DFS implementatoin\n  const dfs = async startNode => {\n    setAlgorithmStarted(true);\n    setText(\"DFS in progress...\");\n    const visitedNodeSet = new Set();\n    const visitedEdgeSet = new Set();\n    let stepIndex = 0;\n    const dfsRecursive = async currentNode => {\n      if (visitedNodeSet.has(currentNode.id)) {\n        return;\n      }\n      visitedNodeSet.add(currentNode.id);\n      setVisitedNodes(prev => {\n        const updatedNodes = [...prev, {\n          id: currentNode.id,\n          color: treeEdgeColor\n        }];\n        return updatedNodes;\n      });\n      for (let neighborId of adjList[currentNode.id]) {\n        setCurrentNode(currentNode);\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        const edge = edges.find(e => e.from.id === currentNode.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNode.id);\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: currentEdgeColor\n        }]);\n        if (!visitedEdgeSet.has(edge)) {\n          stepIndex++;\n          if (isPausedRef.current) {\n            await new Promise(resolve => {\n              const checkStep = () => {\n                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                  resolve();\n                } else {\n                  setTimeout(checkStep, 50);\n                }\n              };\n              checkStep();\n            });\n            if (isStepModeRef.current) {\n              setIsPaused(true);\n              isPausedRef.current = true;\n            }\n          } else {\n            await sleep(totalSliderCount - sliderValueRef.current);\n          }\n          if (isStepModeRef.current) {\n            setIsPaused(true);\n            isPausedRef.current = true;\n          }\n        }\n        if (!visitedNodeSet.has(neighborId)) {\n          setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n            ...edge,\n            color: treeEdgeColor\n          }]);\n          visitedEdgeSet.add(edge);\n          await dfsRecursive(neighborNode);\n        } else {\n          setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== treeEdgeColor)));\n        }\n      }\n    };\n    await dfsRecursive(startNode);\n    setCurrentNode(null);\n    setAlgorithmStarted(false);\n    setText(\"Algorithm Done!\");\n    setTimeout(resetEdges, 1000);\n  };\n\n  // Function to start BFS\n  const startBFS = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setRunningAlgorithm(\"BFS\");\n    setIsBFS(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Node to begin BFS\");\n  };\n\n  // BFS implementation\n  const bfs = async startNode => {\n    setAlgorithmStarted(true);\n    setText(\"BFS in progress...\");\n    const visitedNodeSet = new Set();\n    const visitedEdgeSet = new Set();\n    let stepIndex = 0;\n    const queue = [startNode];\n    visitedNodeSet.add(startNode.id);\n    setVisitedNodes([{\n      id: startNode.id,\n      color: treeEdgeColor\n    }]);\n    while (queue.length > 0) {\n      const currentNode = queue.shift();\n      setCurrentNode(currentNode);\n      for (let neighborId of adjList[currentNode.id]) {\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        const edge = edges.find(e => e.from.id === currentNode.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNode.id);\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: currentEdgeColor\n        }]);\n        if (!visitedEdgeSet.has(edge)) {\n          stepIndex++;\n          if (isPausedRef.current) {\n            await new Promise(resolve => {\n              const checkStep = () => {\n                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                  resolve();\n                } else {\n                  setTimeout(checkStep, 50);\n                }\n              };\n              checkStep();\n            });\n            if (isStepModeRef.current) {\n              setIsPaused(true);\n              isPausedRef.current = true;\n            }\n          } else {\n            await sleep(totalSliderCount - sliderValueRef.current);\n          }\n          if (isStepModeRef.current) {\n            setIsPaused(true);\n            isPausedRef.current = true;\n          }\n        }\n        if (!visitedNodeSet.has(neighborId)) {\n          visitedNodeSet.add(neighborId);\n          queue.push(neighborNode);\n          setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n            ...edge,\n            color: treeEdgeColor\n          }]);\n          setVisitedNodes(prev => [...prev, {\n            id: neighborId,\n            color: treeEdgeColor\n          }]);\n        } else {\n          setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== treeEdgeColor)));\n        }\n      }\n    }\n    setCurrentNode(null);\n    setAlgorithmStarted(false);\n    setText(\"Algorithm Done!\");\n    setTimeout(resetEdges, 1000);\n  };\n\n  // Function to animate Kruskall's algorithm\n  const animateKruskalsAlgorithm = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setRunningAlgorithm(\"Kruskall\");\n    setDisablePause(true);\n    setAlgorithmRunning(true);\n    setText(\"Kruskall's Algorithm in progress...\");\n    const sortedEdges = [...edges].sort((a, b) => calculateEdgeLength(a) - calculateEdgeLength(b));\n    let componentIndex = 0;\n    let currentComponentEdges = [];\n    let currentComponentNodes = [];\n    let uf;\n    const visitedNodeSet = new Set();\n    const foundComponents = [];\n    const dfsComponent = (currentNode, component) => {\n      if (visitedNodeSet.has(currentNode.id)) {\n        return;\n      }\n      visitedNodeSet.add(currentNode.id);\n      component.push(currentNode);\n      adjList[currentNode.id].forEach(neighborId => {\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        if (!visitedNodeSet.has(neighborId)) {\n          dfsComponent(neighborNode, component);\n        }\n      });\n    };\n    nodes.forEach(node => {\n      if (!visitedNodeSet.has(node.id)) {\n        const component = [];\n        dfsComponent(node, component);\n        foundComponents.push(component);\n      }\n    });\n    setComponents(foundComponents);\n    const animateComponentMST = component => {\n      uf = new UnionFind(nodeCount);\n      currentComponentEdges = [];\n      currentComponentNodes = component.map(node => node.id);\n      let edgeIndex = 0;\n      const color = componentColors[componentIndex % componentColors.length];\n      const highlightNodesAndEdges = index => {\n        if (index < currentComponentEdges.length) {\n          const {\n            from,\n            to\n          } = currentComponentEdges[index];\n          setVisitedNodes(prev => [...prev, {\n            id: from.id,\n            color\n          }, {\n            id: to.id,\n            color\n          }]);\n          setVisitedEdges(prev => [...prev, currentComponentEdges[index]]);\n          setTimeout(() => highlightNodesAndEdges(index + 1), totalSliderCount - sliderValueRef.current);\n        } else {\n          componentIndex++;\n          if (componentIndex < foundComponents.length) {\n            setTimeout(() => animateComponentMST(foundComponents[componentIndex]), 0);\n          } else {\n            setTimeout(resetEdges, 1000);\n            setText(\"Algorithm Done!\");\n          }\n        }\n      };\n      const animateStep = () => {\n        if (currentComponentEdges.length === component.length - 1 || edgeIndex >= sortedEdges.length) {\n          highlightNodesAndEdges(0);\n          return;\n        }\n        const edge = sortedEdges[edgeIndex];\n        edgeIndex++;\n        if (currentComponentNodes.includes(edge.from.id) && currentComponentNodes.includes(edge.to.id) && uf.find(edge.from.id) !== uf.find(edge.to.id)) {\n          uf.union(edge.from.id, edge.to.id);\n          currentComponentEdges.push({\n            ...edge,\n            color\n          });\n        }\n        animateStep();\n      };\n      animateStep();\n    };\n    if (foundComponents.length > 0) {\n      animateComponentMST(foundComponents[0]);\n    } else {\n      console.log(\"No components found.\");\n      setAlgorithmRunning(false);\n    }\n  };\n\n  // Union-Find data structure for Kruskal's algorithm\n  class UnionFind {\n    constructor(size) {\n      this.parent = Array(size).fill(null).map((_, index) => index);\n      this.rank = Array(size).fill(0);\n    }\n    find(node) {\n      if (this.parent[node] !== node) {\n        this.parent[node] = this.find(this.parent[node]);\n      }\n      return this.parent[node];\n    }\n    union(node1, node2) {\n      const root1 = this.find(node1);\n      const root2 = this.find(node2);\n      if (root1 !== root2) {\n        if (this.rank[root1] > this.rank[root2]) {\n          this.parent[root2] = root1;\n        } else if (this.rank[root1] < this.rank[root2]) {\n          this.parent[root1] = root2;\n        } else {\n          this.parent[root2] = root1;\n          this.rank[root1] += 1;\n        }\n      }\n    }\n  }\n\n  // Function to start Prim's algorithm\n  const startPrim = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setRunningAlgorithm(\"Prim\");\n    setIsPrim(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Node to begin Prim's Algorithm\");\n  };\n\n  // Function to animate Prim's algorithm\n  const animatePrimsAlgorithm = async startNode => {\n    setAlgorithmStarted(true);\n    setText(\"Prim's Algorithm in progress...\");\n    const visitedNodeSet = new Set();\n    const edgeQueue = [];\n    let stepIndex = 0;\n    const addEdges = node => {\n      visitedNodeSet.add(node.id);\n      setVisitedNodes(prev => [...prev, {\n        id: node.id,\n        color: treeEdgeColor\n      }]);\n      (adjList[node.id] || []).forEach(neighborId => {\n        if (!visitedNodeSet.has(neighborId)) {\n          const edge = edges.find(e => e.from.id === node.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === node.id);\n          if (edge) {\n            edgeQueue.push({\n              ...edge,\n              length: calculateEdgeLength(edge)\n            });\n          }\n        }\n      });\n      edgeQueue.sort((a, b) => a.length - b.length);\n    };\n    const animateStep = async () => {\n      if (visitedNodeSet.size === nodes.length || edgeQueue.length === 0) {\n        setAlgorithmStarted(false);\n        setText(\"Algorithm Done!\");\n        setTimeout(resetEdges, 1000);\n        return;\n      }\n      const edgesToHighlight = edgeQueue.slice(0, 1);\n      edgesToHighlight.forEach(edge => {\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: currentEdgeColor\n        }]);\n      });\n      stepIndex++;\n      if (isPausedRef.current) {\n        await new Promise(resolve => {\n          const checkStep = () => {\n            if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n              resolve();\n            } else {\n              setTimeout(checkStep, 50);\n            }\n          };\n          checkStep();\n        });\n        if (isStepModeRef.current) {\n          setIsPaused(true);\n          isPausedRef.current = true;\n        }\n      } else {\n        await sleep(totalSliderCount - sliderValueRef.current);\n      }\n      if (isStepModeRef.current) {\n        setIsPaused(true);\n        isPausedRef.current = true;\n      }\n      const edge = edgeQueue.shift();\n      const {\n        from,\n        to\n      } = edge;\n      const fromInMST = visitedNodeSet.has(from.id);\n      const toInMST = visitedNodeSet.has(to.id);\n      if (fromInMST && !toInMST || !fromInMST && toInMST) {\n        setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n          ...edge,\n          color: treeEdgeColor\n        }]);\n        if (fromInMST && !toInMST) {\n          addEdges(to);\n        } else if (!fromInMST && toInMST) {\n          addEdges(from);\n        }\n      } else {\n        setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n          ...edge,\n          color: defaultEdgeColor\n        }]);\n      }\n      animateStep();\n    };\n    addEdges(startNode);\n    animateStep();\n  };\n\n  // Function to set traversal mode\n  const setClickTraversal = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedTraveral(true);\n  };\n\n  // Function to set MST mode\n  const setClickMST = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedMST(true);\n  };\n\n  // Function to set Paths mode\n  const setClickPath = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedPaths(true);\n  };\n\n  // Functino to go back from algorithm selection\n  const goBack = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setClickedMST(false);\n    setClickedTraveral(false);\n    setClickedPaths(false);\n    setAlgorithmRunning(false);\n    setText(startingText);\n  };\n\n  // Function to find connected components in a graph\n  const findConnectedComponents = async () => {\n    setRunningAlgorithm(\"Connected\");\n    setAlgorithmStarted(true);\n    setText(\"Connected Components in progress...\");\n    setAlgorithmRunning(true);\n    const visitedNodeSet = new Set();\n    const visitedEdgeSet = new Set();\n    let componentIndex = 0;\n    let stepIndex = 0;\n    const dfsRecursive = async (currentNode, componentColor) => {\n      if (visitedNodeSet.has(currentNode.id)) {\n        return;\n      }\n      visitedNodeSet.add(currentNode.id);\n      setVisitedNodes(prev => {\n        const updatedNodes = [...prev, {\n          id: currentNode.id,\n          color: componentColor\n        }];\n        return updatedNodes;\n      });\n      for (let neighborId of adjList[currentNode.id]) {\n        setCurrentNode(currentNode);\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        const edge = edges.find(e => e.from.id === currentNode.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNode.id);\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: currentEdgeColor\n        }]);\n        if (!visitedEdgeSet.has(edge)) {\n          stepIndex++;\n          if (isPausedRef.current) {\n            await new Promise(resolve => {\n              const checkStep = () => {\n                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                  resolve();\n                } else {\n                  setTimeout(checkStep, 50);\n                }\n              };\n              checkStep();\n            });\n            if (isStepModeRef.current) {\n              setIsPaused(true);\n              isPausedRef.current = true;\n            }\n          } else {\n            await sleep(totalSliderCount - sliderValueRef.current);\n          }\n          if (isStepModeRef.current) {\n            setIsPaused(true);\n            isPausedRef.current = true;\n          }\n        }\n        if (!visitedNodeSet.has(neighborId)) {\n          setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n            ...edge,\n            color: componentColor\n          }]);\n          visitedEdgeSet.add(edge);\n          await dfsRecursive(neighborNode, componentColor);\n        } else {\n          setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n            ...edge,\n            color: componentColor\n          }]);\n        }\n      }\n    };\n    for (let node of nodes) {\n      if (!visitedNodeSet.has(node.id)) {\n        const componentColor = componentColors[componentIndex % componentColors.length];\n        componentIndex++;\n        await dfsRecursive(node, componentColor);\n      }\n    }\n    setCurrentNode(null);\n    setAlgorithmStarted(false);\n    setText(\"Algorithm Done!\");\n    setTimeout(resetEdges, 1000);\n  };\n\n  // Function to start shortest path algorithm\n  const startShortestPath = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setRunningAlgorithm(\"SP\");\n    setIsShortestPath(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Start Node for Shortest Path\");\n  };\n\n  // Function to find the shortest path between two nodes\n  const findShortestPath = async (startNode, targetNode) => {\n    setAlgorithmStarted(true);\n    setText(\"Shortest Path Algorithm in progress...\");\n    const dist = {};\n    const prev = {};\n    const visitedEdgeSet = new Set();\n    const visitedNodeSet = new Set();\n    const priorityQueue = new Set(nodes.map(node => node.id));\n    let stepIndex = 0;\n    nodes.forEach(node => {\n      dist[node.id] = Infinity;\n      prev[node.id] = null;\n    });\n    dist[startNode.id] = 0;\n    const getMinDistNode = () => {\n      let minNode = null;\n      priorityQueue.forEach(nodeId => {\n        if (minNode === null || dist[nodeId] < dist[minNode]) {\n          minNode = nodeId;\n        }\n      });\n      return minNode;\n    };\n    while (priorityQueue.size > 0) {\n      const currentNodeId = getMinDistNode();\n      const currentNode = nodes.find(node => node.id === currentNodeId);\n      if (dist[currentNodeId] === Infinity) break;\n      priorityQueue.delete(currentNodeId);\n      if (currentNodeId === targetNode.id) {\n        break;\n      }\n      for (let neighborId of adjList[currentNode.id]) {\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        const edge = edges.find(e => e.from.id === currentNode.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNode.id);\n        setCurrentNode(currentNode);\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: currentEdgeColor\n        }]);\n        if (!visitedEdgeSet.has(edge)) {\n          stepIndex++;\n          if (isPausedRef.current) {\n            await new Promise(resolve => {\n              const checkStep = () => {\n                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                  resolve();\n                } else {\n                  setTimeout(checkStep, 50);\n                }\n              };\n              checkStep();\n            });\n            if (isStepModeRef.current) {\n              setIsPaused(true);\n              isPausedRef.current = true;\n            }\n          } else {\n            await sleep(totalSliderCount - sliderValueRef.current);\n          }\n          if (isStepModeRef.current) {\n            setIsPaused(true);\n            isPausedRef.current = true;\n          }\n          visitedEdgeSet.add(edge);\n        }\n        const alt = dist[currentNode.id] + calculateEdgeLength(edge);\n        if (alt < dist[neighborId]) {\n          dist[neighborId] = alt;\n          prev[neighborId] = currentNode.id;\n          setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n            ...edge,\n            color: treeEdgeColor\n          }]);\n          visitedEdgeSet.add(edge);\n        } else {\n          setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color === currentEdgeColor)));\n        }\n      }\n      visitedNodeSet.add(currentNode.id);\n      setVisitedNodes(prev => {\n        const updatedNodes = [...prev, {\n          id: currentNode.id,\n          color: treeEdgeColor\n        }];\n        return updatedNodes;\n      });\n    }\n    setStartNode(null);\n    setEndNode(null);\n    setAlgorithmStarted(false);\n    setCurrentNode(null);\n    setText(\"Algorithm Done!\");\n    const path = [];\n    let currentNodeId = targetNode.id;\n    while (currentNodeId !== null) {\n      path.unshift(currentNodeId);\n      currentNodeId = prev[currentNodeId];\n    }\n    if (path.length === 1) {\n      setText(\"No path Found!\");\n      setTimeout(resetEdges, 1000);\n      return;\n    }\n    setVisitedEdges(prev => {\n      return prev.map(e => {\n        if (path.includes(e.from.id) && path.includes(e.to.id)) {\n          return {\n            ...e,\n            color: treeEdgeColor\n          };\n        } else {\n          return {\n            ...e,\n            color: defaultEdgeColor\n          };\n        }\n      });\n    });\n    setVisitedNodes(prev => {\n      return nodes.map(node => {\n        if (path.includes(node.id)) {\n          return {\n            id: node.id,\n            color: treeEdgeColor\n          };\n        } else {\n          return {\n            id: node.id,\n            color: \"black\"\n          };\n        }\n      });\n    });\n    setTimeout(resetEdges, 1000);\n  };\n\n  // Function to color graph\n  const graphColoring = async () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setRunningAlgorithm(\"Color\");\n    setDisablePause(true);\n    setAlgorithmRunning(true);\n    setText(\"Graph Coloring in progress...\");\n    const availableColors = componentColors;\n    const colors = {};\n    const colorGraph = node => {\n      const neighborColors = adjList[node.id].map(neighborId => colors[neighborId]);\n      for (let color of availableColors) {\n        if (!neighborColors.includes(color)) {\n          colors[node.id] = color;\n          break;\n        }\n      }\n    };\n    for (let node of nodes) {\n      colorGraph(node);\n      setVisitedNodes(prev => [...prev, {\n        id: node.id,\n        color: colors[node.id]\n      }]);\n      await new Promise(resolve => setTimeout(resolve, totalSliderCount - sliderValueRef.current));\n    }\n    setText(\"Algorithm Done!\");\n    setTimeout(resetEdges, 1000);\n  };\n\n  // Function to start TSP\n  const startTSP = async () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setRunningAlgorithm(\"TSP\");\n    setIsTSP(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Node to begin TSP\");\n  };\n\n  // Function to animate TSP\n  const tsp = async node => {\n    setAlgorithmStarted(true);\n    setText(\"TSP in progress...\");\n    const startNode = node;\n    const unvisited = new Set(nodes.map(node => node.id));\n    const visited = [];\n    const stack = [];\n    let currentNode = startNode;\n    let stepIndex = 0;\n    unvisited.delete(currentNode.id);\n    visited.push(currentNode);\n    setVisitedNodes([{\n      id: currentNode.id,\n      color: treeEdgeColor\n    }]);\n    while (unvisited.size > 0) {\n      let nearestNode = null;\n      let shortestDistance = Infinity;\n      let currentEdge = null;\n      for (let neighborId of unvisited) {\n        setCurrentNode(currentNode);\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        // eslint-disable-next-line\n        const edge = edges.find(e => e.from.id === currentNode.id && e.to.id === neighborNode.id || e.from.id === neighborNode.id && e.to.id === currentNode.id);\n        if (edge) {\n          setVisitedEdges(prev => [...prev, {\n            ...edge,\n            color: currentEdgeColor\n          }]);\n          stepIndex++;\n          if (isPausedRef.current) {\n            await new Promise(resolve => {\n              const checkStep = () => {\n                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                  resolve();\n                } else {\n                  setTimeout(checkStep, 50);\n                }\n              };\n              checkStep();\n            });\n            if (isStepModeRef.current) {\n              setIsPaused(true);\n              isPausedRef.current = true;\n            }\n          } else {\n            await sleep(totalSliderCount - sliderValueRef.current);\n          }\n          if (isStepModeRef.current) {\n            setIsPaused(true);\n            isPausedRef.current = true;\n          }\n          const distance = calculateEdgeLength({\n            from: currentNode,\n            to: neighborNode\n          });\n          setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)));\n          if (distance < shortestDistance) {\n            shortestDistance = distance;\n            nearestNode = neighborNode;\n            currentEdge = edge;\n          }\n        }\n      }\n      if (nearestNode && currentEdge) {\n        stack.push({\n          currentNode,\n          nearestNode,\n          shortestDistance\n        });\n        setVisitedEdges(prev => [...prev, {\n          ...currentEdge,\n          color: treeEdgeColor\n        }]);\n        setVisitedNodes(prev => [...prev, {\n          id: nearestNode.id,\n          color: treeEdgeColor\n        }]);\n        stepIndex++;\n        if (isPausedRef.current) {\n          await new Promise(resolve => {\n            const checkStep = () => {\n              if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                resolve();\n              } else {\n                setTimeout(checkStep, 50);\n              }\n            };\n            checkStep();\n          });\n          if (isStepModeRef.current) {\n            setIsPaused(true);\n            isPausedRef.current = true;\n          }\n        } else {\n          await sleep(totalSliderCount - sliderValueRef.current);\n        }\n        if (isStepModeRef.current) {\n          setIsPaused(true);\n          isPausedRef.current = true;\n        }\n        currentNode = nearestNode;\n        unvisited.delete(currentNode.id);\n        visited.push(currentNode);\n      } else {\n        const previousState = stack.pop();\n        if (previousState) {\n          currentNode = previousState.currentNode;\n        } else {\n          break;\n        }\n      }\n    }\n    setCurrentNode(null);\n    setAlgorithmStarted(false);\n    setText(\"Algorithm Done!\");\n    setTimeout(resetEdges, 1000);\n  };\n\n  // Function to step in the algorithm\n  const nextStep = () => {\n    if (isPausedRef.current) {\n      setIsStepMode(true);\n      if (isPausedRef.current) {\n        setCurrentStep(prev => {\n          const next = prev + 1;\n          currentStepRef.current = next;\n          return next;\n        });\n      }\n      setIsPaused(false);\n      isPausedRef.current = false;\n    }\n  };\n\n  // Function to toggle button \n  const togglePlayPause = () => {\n    if (isPausedRef.current) {\n      setIsStepMode(false);\n      setIsPaused(false);\n      isPausedRef.current = false;\n      switch (runningAlgorithm) {\n        case \"DFS\":\n          setText(\"DFS in progress...\");\n          break;\n        case \"BFS\":\n          setText(\"BFS in progress...\");\n          break;\n        case \"Kruskall\":\n          setText(\"Kruskall's Algorithm in progress...\");\n          break;\n        case \"Prim\":\n          setText(\"Prim's Algorithm in progress...\");\n          break;\n        case \"SP\":\n          setText(\"Shortest Path Algorithm in progress...\");\n          break;\n        case \"TSP\":\n          setText(\"TSP in progress...\");\n          break;\n        case \"Connected\":\n          setText(\"Connected Components in progress..\");\n          break;\n        case \"Colors\":\n          setText(\"Graph Coloring in progress...\");\n          break;\n      }\n    } else {\n      setIsStepMode(false);\n      setIsPaused(true);\n      isPausedRef.current = true;\n      setText(\"Algorithm is Paused\");\n    }\n  };\n\n  // Function to sleep and check for pausing\n  const sleep = duration => {\n    return new Promise(resolve => {\n      const interval = 50;\n      let elapsed = 0;\n      const checkPauseAndSleep = () => {\n        if (isPausedRef.current) {\n          const checkPause = () => {\n            if (isStepModeRef.current) {\n              setIsStepMode(true);\n              resolve();\n            } else if (!isPausedRef.current) {\n              resolve();\n            } else {\n              setTimeout(checkPause, interval);\n            }\n          };\n          checkPause();\n        } else {\n          if (elapsed < duration) {\n            elapsed += interval;\n            setTimeout(checkPauseAndSleep, interval);\n          } else {\n            resolve();\n          }\n        }\n      };\n      checkPauseAndSleep();\n    });\n  };\n\n  // JSX for rendering the component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Graph Creation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1379,\n        columnNumber: 17\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: handleAddEdge,\n        children: \"Add Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1383,\n        columnNumber: 17\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: removeNode,\n        children: \"Remove Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1385,\n        columnNumber: 17\n      }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: addNode,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1389,\n        columnNumber: 17\n      }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: generateGraph,\n        children: \"Generate Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1391,\n        columnNumber: 17\n      }, this), !selectedNode && nodes.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: resetGraph,\n        children: \"Reset Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1393,\n        columnNumber: 17\n      }, this), !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Edge Editing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1397,\n        columnNumber: 21\n      }, this), !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: () => {\n          if (edges.length > 0) {\n            setIsDirected(!isDirected);\n          }\n        },\n        children: isDirected ? 'Set Undirected' : 'Set Directed'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1399,\n        columnNumber: 21\n      }, this), !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: () => {\n          if (edges.length > 0) {\n            setShowWeights(!showWeights);\n          }\n        },\n        children: showWeights ? 'Hide Weights' : 'Show Weights'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1403,\n        columnNumber: 21\n      }, this), !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: startRemovingEdge,\n        children: \"Remove Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1407,\n        columnNumber: 17\n      }, this), algorithmStarted && !disablePause && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1412,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: nextStep,\n          children: \"Next Step\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1413,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: togglePlayPause,\n          children: (isPaused || isStepMode) && !disablePause ? \"Play\" : \"Pause\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1414,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1378,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"slider-label\",\n          children: \"Algorithm Speed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1424,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Slow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1426,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"100\",\n            max: \"2000\",\n            step: \"100\",\n            value: sliderValue,\n            onChange: handleSliderChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1427,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Fast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1435,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1425,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1423,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"edges-svg\",\n          style: {\n            position: 'absolute',\n            width: '100%',\n            height: '100%'\n          },\n          children: edges.map((edge, index) => {\n            var _visitedEdges$find;\n            const midpoint = calculateMidpoint(edge);\n            const {\n              angle,\n              flipped\n            } = calculateAngle(edge);\n            const arrowLength = 20;\n            const arrowAngle = 30;\n            const nodeRadius = 10;\n            const dx = edge.to.x - edge.from.x;\n            const dy = edge.to.y - edge.from.y;\n            const length = Math.sqrt(dx * dx + dy * dy);\n            const unitDx = dx / length;\n            const unitDy = dy / length;\n            const baseX = edge.to.x - nodeRadius * unitDx + 10;\n            const baseY = edge.to.y - nodeRadius * unitDy + 10;\n            let arrowX1, arrowY1, arrowX2, arrowY2;\n            if (flipped) {\n              arrowX1 = baseX + arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n              arrowY1 = baseY + arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n              arrowX2 = baseX + arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n              arrowY2 = baseY + arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n            } else {\n              arrowX1 = baseX - arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n              arrowY1 = baseY - arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n              arrowX2 = baseX - arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n              arrowY2 = baseY - arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n            }\n            return /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                x1: edge.from.x + 10,\n                y1: edge.from.y + 10,\n                x2: edge.to.x + 10,\n                y2: edge.to.y + 10,\n                stroke: ((_visitedEdges$find = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find === void 0 ? void 0 : _visitedEdges$find.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                strokeWidth: isRemovingEdge ? 8 : 4,\n                onClick: () => handleEdgeClick(edge)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1474,\n                columnNumber: 33\n              }, this), isDirected && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                  x1: baseX,\n                  y1: baseY,\n                  x2: arrowX1,\n                  y2: arrowY1,\n                  stroke: \"grey\",\n                  strokeWidth: isRemovingEdge ? 8 : 4\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1485,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n                  x1: baseX,\n                  y1: baseY,\n                  x2: arrowX2,\n                  y2: arrowY2,\n                  stroke: \"grey\",\n                  strokeWidth: isRemovingEdge ? 8 : 4\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1493,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true), showWeights && /*#__PURE__*/_jsxDEV(\"text\", {\n                x: midpoint.x + 10,\n                y: midpoint.y + 7,\n                fill: \"black\",\n                fontSize: \"12\",\n                transform: `rotate(${angle}, ${midpoint.x + 10}, ${midpoint.y + 10})`,\n                textAnchor: \"middle\",\n                children: Math.round(calculateEdgeLength(edge))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1504,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1473,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1439,\n          columnNumber: 17\n        }, this), nodes.map(node => {\n          var _visitedNodes$find;\n          return /*#__PURE__*/_jsxDEV(Draggable, {\n            position: {\n              x: node.x,\n              y: node.y\n            },\n            bounds: \"parent\",\n            onStart: handleMouseDown,\n            onDrag: (e, data) => handleDrag(e, data, node),\n            onStop: handleDragStop,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"graph-node\",\n              onClick: () => handleNodeClick(node),\n              style: {\n                border: isTSP || isBFS || isPrim || isDFS || isShortestPath ? startNode && startNode.id === node.id ? 'none' : '2px solid red' : selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none',\n                backgroundColor: node.id === (currentNode === null || currentNode === void 0 ? void 0 : currentNode.id) ? 'red' : visitedNodes.some(vn => vn.id === node.id) ? ((_visitedNodes$find = visitedNodes.find(vn => vn.id === node.id)) === null || _visitedNodes$find === void 0 ? void 0 : _visitedNodes$find.color) || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\" : 'black',\n                pointerEvents: 'auto',\n                position: 'absolute'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1527,\n              columnNumber: 29\n            }, this)\n          }, node.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1519,\n            columnNumber: 25\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1438,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        \"class-name\": \"status-text\",\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1545,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1422,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [edges.length > 0 && !selectedNode && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Algorithms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1551,\n        columnNumber: 17\n      }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: setClickTraversal,\n        children: \"Traversals \\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1553,\n        columnNumber: 17\n      }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: setClickMST,\n        children: \"MSTs \\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1555,\n        columnNumber: 17\n      }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: setClickPath,\n        children: \"Paths \\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1557,\n        columnNumber: 17\n      }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: animateKruskalsAlgorithm,\n        children: \"Kruskall\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1562,\n        columnNumber: 17\n      }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startPrim,\n        children: \"Prim\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1564,\n        columnNumber: 17\n      }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startDFS,\n        children: \"DFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1567,\n        columnNumber: 17\n      }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startBFS,\n        children: \"BFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1569,\n        columnNumber: 17\n      }, this), clickedPaths && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startShortestPath,\n        children: \"Shortest Path\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1572,\n        columnNumber: 17\n      }, this), clickedPaths && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startTSP,\n        children: \"TSP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1574,\n        columnNumber: 17\n      }, this), !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: findConnectedComponents,\n        children: \"Connected Components\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1577,\n        columnNumber: 17\n      }, this), !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: graphColoring,\n        children: \"Graph Coloring\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1579,\n        columnNumber: 17\n      }, this), (clickedTraversal || clickedMST || clickedPaths) && !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: goBack,\n        children: \"\\u2190 Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1585,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1548,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1377,\n    columnNumber: 9\n  }, this);\n};\n_s(Graphs, \"iFzOVKttWLMgDwn1ifwMn+7M1Ys=\");\n_c = Graphs;\nexport default Graphs;\nvar _c;\n$RefreshReg$(_c, \"Graphs\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Draggable","jsxDEV","_jsxDEV","Fragment","_Fragment","Graphs","_s","text","setText","nodes","setNodes","nodeCount","setNodeCount","edges","setEdges","selectedNode","setSelectedNode","isAddingEdge","setIsAddingEdge","dragging","setDragging","isRemovingEdge","setIsRemovingEdge","visitedNodes","setVisitedNodes","visitedEdges","setVisitedEdges","adjList","setAdjList","clickedTraversal","setClickedTraveral","clickedMST","setClickedMST","clickedPaths","setClickedPaths","isDFS","setIsDFS","isBFS","setIsBFS","isPrim","setIsPrim","isTSP","setIsTSP","algorithmRunning","setAlgorithmRunning","isShortestPath","setIsShortestPath","startNode","setStartNode","endNode","setEndNode","componentColors","components","setComponents","showWeights","setShowWeights","sliderValue","setSliderValue","currentNode","setCurrentNode","sliderValueRef","totalSliderCount","isPaused","setIsPaused","isPausedRef","currentStep","setCurrentStep","currentStepRef","isStepMode","setIsStepMode","isStepModeRef","disablePause","setDisablePause","algorithmStarted","setAlgorithmStarted","runningAlgorithm","setRunningAlgorithm","isDirected","setIsDirected","highlightedButtonColor","startingText","treeEdgeColor","currentEdgeColor","defaultEdgeColor","current","resetEdges","calculateEdgeLength","edge","dx","from","x","to","dy","y","Math","sqrt","calculateMidpoint","midX","midY","calculateAngle","flipped","angle","atan2","PI","addNode","length","alert","newNode","id","random","prevAdjList","generateGraph","numNodes","numEdges","response","prompt","isNaN","newNodes","newEdges","newAdjList","gridSize","ceil","areaWidth","areaHeight","margin","gridSpacingX","gridSpacingY","i","row","floor","col","push","edgeExists","some","newEdge","color","resetGraph","removeNode","filter","node","key","handleNodeClick","prevEdges","dfs","bfs","animatePrimsAlgorithm","findShortestPath","tsp","handleMouseDown","handleSliderChange","event","newValue","target","value","startRemovingEdge","handleAddEdge","handleEdgeClick","e","handleDrag","data","handleDragStop","setTimeout","startDFS","visitedNodeSet","Set","visitedEdgeSet","stepIndex","dfsRecursive","has","add","prev","updatedNodes","neighborId","neighborNode","find","Promise","resolve","checkStep","sleep","startBFS","queue","shift","animateKruskalsAlgorithm","sortedEdges","sort","a","b","componentIndex","currentComponentEdges","currentComponentNodes","uf","foundComponents","dfsComponent","component","forEach","animateComponentMST","UnionFind","map","edgeIndex","highlightNodesAndEdges","index","animateStep","includes","union","console","log","constructor","size","parent","Array","fill","_","rank","node1","node2","root1","root2","startPrim","edgeQueue","addEdges","edgesToHighlight","slice","fromInMST","toInMST","setClickTraversal","setClickMST","setClickPath","goBack","findConnectedComponents","componentColor","startShortestPath","targetNode","dist","priorityQueue","Infinity","getMinDistNode","minNode","nodeId","currentNodeId","delete","alt","path","unshift","graphColoring","availableColors","colors","colorGraph","neighborColors","startTSP","unvisited","visited","stack","nearestNode","shortestDistance","currentEdge","distance","previousState","pop","nextStep","next","togglePlayPause","duration","interval","elapsed","checkPauseAndSleep","checkPause","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","min","max","step","onChange","style","position","width","height","_visitedEdges$find","midpoint","arrowLength","arrowAngle","nodeRadius","unitDx","unitDy","baseX","baseY","arrowX1","arrowY1","arrowX2","arrowY2","cos","sin","x1","y1","x2","y2","stroke","strokeWidth","fontSize","transform","textAnchor","round","_visitedNodes$find","bounds","onStart","onDrag","onStop","border","backgroundColor","vn","findIndex","comp","n","pointerEvents","_c","$RefreshReg$"],"sources":["/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js"],"sourcesContent":["import React, {useState, useRef, useEffect } from 'react';\nimport Draggable from 'react-draggable';\n\nconst Graphs = () => {\n    // State variables to manage graph nodes, edges, and various UI states\n    const [text, setText] = useState(\"Add Node or Generate Graph to Begin\");\n    const [nodes, setNodes] = useState([]);\n    const [nodeCount, setNodeCount] = useState(0);\n    const [edges, setEdges] = useState([]);\n    const [selectedNode, setSelectedNode] = useState(null);\n    const [isAddingEdge, setIsAddingEdge] = useState(false);\n    const [dragging, setDragging] = useState(false);\n    const [isRemovingEdge, setIsRemovingEdge] = useState(false);\n    // eslint-disable-next-line\n    const [visitedNodes, setVisitedNodes] = useState([]);\n    const [visitedEdges, setVisitedEdges] = useState([]);\n    const [adjList, setAdjList] = useState([]);\n    const [clickedTraversal, setClickedTraveral] = useState(false);\n    const [clickedMST, setClickedMST] = useState(false);\n    const [clickedPaths, setClickedPaths] = useState(false);\n    const [isDFS, setIsDFS] = useState(false);\n    const [isBFS, setIsBFS] = useState(false);\n    const [isPrim, setIsPrim] = useState(false);\n    const [isTSP, setIsTSP] = useState(false);\n    const [algorithmRunning, setAlgorithmRunning] = useState(false);\n    const [isShortestPath, setIsShortestPath] = useState(false);\n    const [startNode, setStartNode] = useState(null);\n    const [endNode, setEndNode] = useState(null);\n    const [componentColors] = useState([\"blue\", \"green\", \"orange\", \"purple\", \"pink\", \"yellow\", \"gold\", \"coral\", \"crimson\", \"cyan\", \"darkgreen\", \"drakblue\", \"darkorange\", \"darkorchid\", \"darkred\", \"deeppink\", \"darkviolet\", \"deepskyblue\", \"forestgreen\", \"fuchsia\"]);\n    const [components, setComponents] = useState([]);\n    const [showWeights, setShowWeights] = useState(false);\n    const [sliderValue, setSliderValue] = useState(250);\n    const [currentNode, setCurrentNode] = useState(null);\n    const sliderValueRef = useRef(sliderValue);\n    const totalSliderCount = 2100;\n    const [isPaused, setIsPaused] = useState(false);\n    const isPausedRef = useRef(isPaused);\n    const [currentStep, setCurrentStep] = useState(0);\n    const currentStepRef = useRef(currentStep);\n    const [isStepMode, setIsStepMode] = useState(false);\n    const isStepModeRef = useRef(isStepMode);\n    const [disablePause, setDisablePause] = useState(false);\n    const [algorithmStarted, setAlgorithmStarted]=  useState(false);\n    const [runningAlgorithm, setRunningAlgorithm] = useState(null);\n    const [isDirected, setIsDirected] = useState(false);\n\n    // Constants for UI text and colors\n    const highlightedButtonColor = \"lightblue\";\n    const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n    const treeEdgeColor = \"blue\"; \n    const currentEdgeColor = \"red\"; \n    const defaultEdgeColor = \"grey\";\n\n    // Use Effect to differentiate between modes\n    useEffect(() => {\n        isStepModeRef.current = isStepMode;\n    }, [isStepMode]);\n\n    // Use Effect to allow pausing mid-alg\n    useEffect(() => {\n        isPausedRef.current = isPaused;\n    }, [isPaused]);\n\n    // Use Effect to allow stopping mid-alg\n    useEffect(() => {\n        currentStepRef.current = currentStepRef;\n    }, [currentStepRef]);\n\n    // Function to reset edges to default state\n    const resetEdges = () => {\n        setVisitedEdges([]);\n        setVisitedNodes([]);\n        setText(startingText);\n        setAlgorithmRunning(false);\n        setCurrentStep(0);\n        currentStepRef.current = 0;\n        setDisablePause(false);\n        setRunningAlgorithm(null);\n    };\n\n    // Function to calculate edge length\n    const calculateEdgeLength = (edge) => {\n        const dx = edge.from.x - edge.to.x;\n        const dy = edge.from.y - edge.to.y;\n        return Math.sqrt(dx * dx + dy * dy);\n    };\n\n    // Function to calculate midpoiint of an edge\n    const calculateMidpoint = (edge) => {\n        const midX = (edge.from.x + edge.to.x) / 2;\n        const midY = (edge.from.y + edge.to.y) / 2;\n        return { x: midX, y: midY };\n    };\n    \n    // Fucntion to calculate angle of an edge\n    const calculateAngle = (edge) => {\n        const dx = edge.to.x - edge.from.x;\n        const dy = edge.to.y - edge.from.y;\n        let flipped = false;\n        let angle = Math.atan2(dy, dx) * (180 / Math.PI);\n    \n        if (dx >= 0 && dy < 0) {\n        } else if (dx < 0 && dy < 0) {\n            angle += 180;\n            flipped = true;\n        } else if (dx < 0 && dy >= 0) {\n            angle -= 180;\n            flipped = true;\n        } else if (dx >= 0 && dy >= 0) {\n        }\n    \n        return {\n            angle: angle,\n            flipped: flipped\n        };\n    };\n\n    // Function to add a new node to the graph\n    const addNode = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        if(nodes.length >= 20){\n            alert(\"too many nodes\");\n            return;\n        }\n\n        setText(startingText);\n        const newNode = {\n            id: nodeCount,\n            x: Math.random() * 480,\n            y: Math.random() * 480,\n        };\n        setNodes([...nodes, newNode]);\n        setAdjList(prevAdjList => ({ ...prevAdjList, [newNode.id]: [] }));\n        setNodeCount(nodeCount + 1);\n    };\n\n    // Function to generate a random graph\n    const generateGraph = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n\n        var numNodes = 0;\n        var numEdges = -1;\n\n        do{\n            const response = prompt(\"Enter the number of nodes:\", \"\");\n\n            if(isNaN(response)){\n                alert(\"Invalid input. Please enter numbers only\");\n                continue;\n            }\n\n            if(response <= 0 || response > 20){\n                alert(\"Invalid input. Number of nodes must be between 1 and 20\");\n                continue;\n            }\n\n            numNodes = response;\n\n        }while(numNodes === 0);\n\n        do{\n            const response = prompt(\"Enter the number of edges:\", \"\");\n\n            if(isNaN(response)){\n                alert(\"Invalid input. Please enter numbers only\");\n                continue;\n            }\n\n            if(response > ((numNodes * (numNodes - 1)) / 2)){\n                alert(\"Invalid input. Too many edges for the graph\");\n                continue;\n            }\n\n            if(response < 0){\n                alert(\"Invalid input. Not enough edges\");\n                continue;\n            }\n\n            numEdges = response;\n\n        }while(numEdges === -1);\n\n        setNodes([]);\n        setEdges([]);\n        setAdjList({});\n        setNodeCount(0);\n        setVisitedNodes([]);\n        setVisitedEdges([]);\n        setSelectedNode(null);\n        setText(startingText);\n    \n        const newNodes = [];\n        const newEdges = [];\n        const newAdjList = {};\n    \n\n        const gridSize = Math.ceil(Math.sqrt(numNodes));\n        const areaWidth = 500; \n        const areaHeight = 500; \n        const margin = 10;\n        const gridSpacingX = (areaWidth - 2 * margin) / gridSize;\n        const gridSpacingY = (areaHeight - 2 * margin) / gridSize;\n\n        for (let i = 0; i < numNodes; i++) {\n            const row = Math.floor(i / gridSize);\n            const col = i % gridSize;\n            const x = margin + col * gridSpacingX + Math.random() * gridSpacingX * 0.9;\n            const y = margin + row * gridSpacingY + Math.random() * gridSpacingY * 0.9;\n\n            const newNode = {\n                id: i,\n                x: x,\n                y: y,\n            };\n            newNodes.push(newNode);\n            newAdjList[i] = [];\n        }\n    \n        while (newEdges.length < numEdges) {\n            const from = newNodes[Math.floor(Math.random() * numNodes)];\n            const to = newNodes[Math.floor(Math.random() * numNodes)];\n            if (from.id !== to.id) {\n                const edgeExists = newEdges.some(edge =>\n                    (edge.from.id === from.id && edge.to.id === to.id) ||\n                    (edge.from.id === to.id && edge.to.id === from.id)\n                );\n                if (!edgeExists) {\n                    const newEdge = { from, to, color: defaultEdgeColor };\n                    newEdges.push(newEdge);\n                    newAdjList[from.id].push(to.id);\n                    newAdjList[to.id].push(from.id);\n                }\n            }\n        }\n    \n        setNodes(newNodes);\n        setEdges(newEdges);\n        setAdjList(newAdjList);\n        setNodeCount(newNodes.length);\n    };\n\n    // Function to reset the graph\n    const resetGraph = () => {\n        if(algorithmRunning){\n            return;\n        }\n        setNodes([]);\n        setEdges([]);\n        setClickedMST(false);\n        setClickedTraveral(false);\n        setIsRemovingEdge(false);\n        setText(startingText);\n    };\n    \n    // Function to remove a selected node form the graph\n    const removeNode = () => {\n        if (selectedNode == null) return;\n\n        setNodes(nodes.filter(node => node.id !== selectedNode.id));\n        setEdges(edges.filter(edge => edge.from.id !== selectedNode.id && edge.to.id !== selectedNode.id));\n        setAdjList(prevAdjList => {\n            const newAdjList = { ...prevAdjList };\n            delete newAdjList[selectedNode.id];\n            for (const key in newAdjList) {\n                newAdjList[key] = newAdjList[key].filter(id => id !== selectedNode.id);\n            }\n            return newAdjList;\n        });\n        setSelectedNode(null);\n    };\n\n    // Function to handle clicking on a node\n    const handleNodeClick = (node) => {\n        if (dragging) {\n            return;\n        }\n\n        if (isAddingEdge) {\n            if (selectedNode && selectedNode.id !== node.id) {\n                const edgeExists = edges.some(edge =>\n                    (edge.from.id === selectedNode.id && edge.to.id === node.id) ||\n                    (edge.from.id === node.id && edge.to.id === selectedNode.id)\n                );\n\n                if(!edgeExists){\n                    const newEdge = { from: selectedNode, to: node, color: defaultEdgeColor };\n                    setEdges(prevEdges => [...prevEdges, newEdge]);\n\n                    setAdjList(prevAdjList => {\n                        const newAdjList = { ...prevAdjList };\n                        if (!newAdjList[selectedNode.id]) newAdjList[selectedNode.id] = [];\n                        if (!newAdjList[node.id]) newAdjList[node.id] = [];\n                        newAdjList[selectedNode.id].push(node.id);\n                        newAdjList[node.id].push(selectedNode.id);\n                        return newAdjList;\n                    })\n                }\n                \n                setIsAddingEdge(false);\n                setSelectedNode(null);\n            } else if (selectedNode && selectedNode.id === node.id) {\n                setSelectedNode(null);\n                setIsAddingEdge(false);\n            }\n            setText(startingText);\n        } else if(isDFS){\n            setVisitedNodes([]);\n            setVisitedEdges([]);\n            dfs(node);\n            setIsDFS(false);\n        } else if(isBFS){\n            setVisitedNodes([]);\n            setVisitedEdges([]);\n            bfs(node);\n            setIsBFS(false);\n        }else if(isPrim){\n            setIsPrim(false);\n            animatePrimsAlgorithm(node);\n        }else if(isShortestPath){\n            if(!startNode){\n                setStartNode(node);\n                setText(\"Select End Node for Shortest Path\");\n            }else if(!endNode){\n                setEndNode(node);\n                setText(\"Finding Shortest Path...\");\n                findShortestPath(startNode, node);\n                setIsShortestPath(false);\n            }\n        }else if(isTSP){\n            setVisitedNodes([]);\n            setVisitedEdges([]);\n            tsp(node);\n            setIsTSP(false);\n        }else{\n            if (selectedNode && selectedNode.id === node.id) {\n                setSelectedNode(null); \n                setText(startingText);\n            } else {\n                if(!algorithmRunning){\n                    setSelectedNode(node);\n                }\n                \n            }\n        }\n    }\n\n    // Function to handle mouse down event for dragging\n    const handleMouseDown = () => {\n        setDragging(false);\n    };\n\n    // Function to handle slider change\n    const handleSliderChange = (event) => {\n        const newValue = event.target.value;\n        setSliderValue(newValue);\n        sliderValueRef.current = newValue;\n    }\n\n    // Function to start removing an edge\n    const startRemovingEdge = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        if(isRemovingEdge){\n            setIsRemovingEdge(false);\n            setText(\"\");\n            return;\n        }\n\n        if(edges.length < 1){\n            alert(\"must be at least one edge\");\n            return;\n        }\n        setText(\"Click on an edge to remove it\");\n        setIsRemovingEdge(true);\n    }\n\n    // Function to initiate adding an edge\n    const handleAddEdge = () => {\n        if (selectedNode === null) return;\n\n        if(((nodes.length * (nodes.length - 1)) / 2) === edges.length){\n            alert(\"cannot add another edge\");\n            return;\n        }\n\n        if (nodes.length < 2) {\n            alert(\"You need at least two nodes to add an edge.\");\n            return;\n        }\n        setIsAddingEdge(true);\n        setText(\"Click another node to add edge\");\n    };\n\n    // Function to handle clicking on an edge\n    const handleEdgeClick = (edge) => {\n        if (isRemovingEdge) {\n            setEdges(edges.filter(e => e !== edge));\n            setIsRemovingEdge(false);\n    \n            setAdjList(prevAdjList => {\n                const newAdjList = { ...prevAdjList };\n                newAdjList[edge.from.id] = newAdjList[edge.from.id].filter(id => id !== edge.to.id);\n                newAdjList[edge.to.id] = newAdjList[edge.to.id].filter(id => id !== edge.from.id);\n                return newAdjList;\n            });\n            setText(startingText);\n        }\n    }\n\n    // Function to handle dragging a node\n    const handleDrag = (e, data, node) => {\n        setDragging(true);\n        node.x = data.x;\n        node.y = data.y;\n        setNodes([...nodes]);\n    };\n\n    // Function to handle stopping the drag of a node\n    const handleDragStop = () => {\n        setTimeout(() => {\n            setDragging(false);\n        }, 0);\n    };\n    \n    // Function to start DFS\n    const startDFS = () => {\n        if(algorithmRunning|| isRemovingEdge){\n            return;\n        }\n        setRunningAlgorithm(\"DFS\");\n        setIsDFS(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Node to begin DFS\");\n    }\n\n    // DFS implementatoin\n    const dfs = async (startNode) => {\n        setAlgorithmStarted(true);\n        setText(\"DFS in progress...\");\n\n        const visitedNodeSet = new Set();\n        const visitedEdgeSet = new Set();\n        let stepIndex = 0;\n    \n        const dfsRecursive = async (currentNode) => {\n            if (visitedNodeSet.has(currentNode.id)) {\n                return;\n            }\n    \n            visitedNodeSet.add(currentNode.id);\n            setVisitedNodes(prev => { \n                const updatedNodes = [...prev, { id: currentNode.id, color: treeEdgeColor }];\n                return updatedNodes;\n            });\n    \n            for (let neighborId of adjList[currentNode.id]) {\n                setCurrentNode(currentNode);     \n                const neighborNode = nodes.find(node => node.id === neighborId); \n                const edge = edges.find(e =>                                     \n                    (e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNode.id)\n                );\n\n                setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n               \n                if (!visitedEdgeSet.has(edge)) {\n                    stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if(isStepModeRef.current){\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n                }\n\n                if (!visitedNodeSet.has(neighborId)) { \n                    setVisitedEdges(prev => [\n                        ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                        { ...edge, color: treeEdgeColor }\n                    ]);\n                    visitedEdgeSet.add(edge);\n\n                    await dfsRecursive(neighborNode);\n                } else {\n                    setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== treeEdgeColor)));\n                }\n            }\n\n        };\n    \n        await dfsRecursive(startNode);\n        setCurrentNode(null);\n        setAlgorithmStarted(false);\n        setText(\"Algorithm Done!\");\n        setTimeout(resetEdges, 1000); \n    };\n\n    // Function to start BFS\n    const startBFS = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        setRunningAlgorithm(\"BFS\");\n        setIsBFS(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Node to begin BFS\");\n    }\n\n    // BFS implementation\n    const bfs = async (startNode) => {\n        setAlgorithmStarted(true);\n        setText(\"BFS in progress...\");\n        const visitedNodeSet = new Set();\n        const visitedEdgeSet = new Set();\n        let stepIndex = 0;\n\n    \n        const queue = [startNode];\n        visitedNodeSet.add(startNode.id);\n        setVisitedNodes([{ id: startNode.id, color: treeEdgeColor }]);\n    \n        while (queue.length > 0) {\n            const currentNode = queue.shift();\n            setCurrentNode(currentNode);\n            \n            for (let neighborId of adjList[currentNode.id]) {\n                const neighborNode = nodes.find(node => node.id === neighborId);\n                const edge = edges.find(e => \n                    (e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNode.id)\n                );\n    \n                setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n\n                if(!visitedEdgeSet.has(edge)){\n                    stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if(isStepModeRef.current){\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n                }\n\n                if (!visitedNodeSet.has(neighborId)) {\n                    visitedNodeSet.add(neighborId);\n                    queue.push(neighborNode);\n\n                    setVisitedEdges(prev => [\n                        ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                        { ...edge, color: treeEdgeColor }\n                    ]);\n                    setVisitedNodes(prev => [...prev, { id: neighborId, color: treeEdgeColor }]);\n\n                } else{\n                    setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== treeEdgeColor)));\n                }\n                \n            }\n        }\n    \n        setCurrentNode(null);\n        setAlgorithmStarted(false);\n        setText(\"Algorithm Done!\");\n        setTimeout(resetEdges, 1000); \n    };\n    \n    // Function to animate Kruskall's algorithm\n    const animateKruskalsAlgorithm = () => {\n        if (algorithmRunning || isRemovingEdge) {\n            return;\n        }\n        setRunningAlgorithm(\"Kruskall\");\n        setDisablePause(true);\n        setAlgorithmRunning(true);\n        setText(\"Kruskall's Algorithm in progress...\");\n    \n        const sortedEdges = [...edges].sort((a, b) => calculateEdgeLength(a) - calculateEdgeLength(b));\n        let componentIndex = 0;\n        let currentComponentEdges = [];\n        let currentComponentNodes = [];\n        let uf;\n    \n        const visitedNodeSet = new Set();\n        const foundComponents = [];\n    \n        const dfsComponent = (currentNode, component) => {\n            if (visitedNodeSet.has(currentNode.id)) {\n                return;\n            }\n            visitedNodeSet.add(currentNode.id);\n            component.push(currentNode);\n            adjList[currentNode.id].forEach(neighborId => {\n                const neighborNode = nodes.find(node => node.id === neighborId);\n                if (!visitedNodeSet.has(neighborId)) {\n                    dfsComponent(neighborNode, component);\n                }\n            });\n        };\n    \n        nodes.forEach(node => {\n            if (!visitedNodeSet.has(node.id)) {\n                const component = [];\n                dfsComponent(node, component);\n                foundComponents.push(component);\n            }\n        });\n    \n        setComponents(foundComponents);\n    \n        const animateComponentMST = (component) => {\n            uf = new UnionFind(nodeCount); \n            currentComponentEdges = [];\n            currentComponentNodes = component.map(node => node.id);\n            let edgeIndex = 0;\n            const color = componentColors[componentIndex % componentColors.length];\n    \n            const highlightNodesAndEdges = (index) => {\n                if (index < currentComponentEdges.length) {\n                    const { from, to } = currentComponentEdges[index];\n                    setVisitedNodes(prev => [...prev, { id: from.id, color }, { id: to.id, color }]);\n                    setVisitedEdges(prev => [...prev, currentComponentEdges[index]]);\n                    setTimeout(() => highlightNodesAndEdges(index + 1), totalSliderCount - sliderValueRef.current); \n                } else {\n                    componentIndex++;\n                    if (componentIndex < foundComponents.length) {\n                        setTimeout(() => animateComponentMST(foundComponents[componentIndex]), 0); \n                    } else {\n                        setTimeout(resetEdges, 1000);\n                        setText(\"Algorithm Done!\");\n                    }\n                }\n            };\n    \n            const animateStep = () => {\n                if (currentComponentEdges.length === component.length - 1 || edgeIndex >= sortedEdges.length) {\n                    highlightNodesAndEdges(0);\n                    return;\n                }\n    \n                const edge = sortedEdges[edgeIndex];\n                edgeIndex++;\n    \n                if (currentComponentNodes.includes(edge.from.id) && currentComponentNodes.includes(edge.to.id) &&\n                    uf.find(edge.from.id) !== uf.find(edge.to.id)) {\n                    uf.union(edge.from.id, edge.to.id);\n                    currentComponentEdges.push({ ...edge, color });\n                }\n    \n                animateStep();\n            };\n    \n            animateStep();\n        };\n    \n        if (foundComponents.length > 0) {\n            animateComponentMST(foundComponents[0]);\n        } else {\n            console.log(\"No components found.\");\n            setAlgorithmRunning(false);\n        }\n    };\n\n     // Union-Find data structure for Kruskal's algorithm\n    class UnionFind {\n        constructor(size) {\n            this.parent = Array(size).fill(null).map((_, index) => index);\n            this.rank = Array(size).fill(0);\n        }\n\n        find(node) {\n            if (this.parent[node] !== node) {\n                this.parent[node] = this.find(this.parent[node]);\n            }\n            return this.parent[node];\n        }\n\n        union(node1, node2) {\n            const root1 = this.find(node1);\n            const root2 = this.find(node2);\n\n            if (root1 !== root2) {\n                if (this.rank[root1] > this.rank[root2]) {\n                    this.parent[root2] = root1;\n                } else if (this.rank[root1] < this.rank[root2]) {\n                    this.parent[root1] = root2;\n                } else {\n                    this.parent[root2] = root1;\n                    this.rank[root1] += 1;\n                }\n            }\n        }\n    }\n\n    // Function to start Prim's algorithm\n    const startPrim = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        setRunningAlgorithm(\"Prim\");\n        setIsPrim(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Node to begin Prim's Algorithm\");\n    }\n\n    // Function to animate Prim's algorithm\n    const animatePrimsAlgorithm = async (startNode) => {\n        setAlgorithmStarted(true);\n        setText(\"Prim's Algorithm in progress...\");\n        const visitedNodeSet = new Set();\n        const edgeQueue = [];\n        let stepIndex = 0;\n    \n        const addEdges = (node) => {\n            visitedNodeSet.add(node.id);\n            setVisitedNodes(prev => [...prev, { id: node.id, color: treeEdgeColor }]);\n            (adjList[node.id] || []).forEach(neighborId => {\n                if (!visitedNodeSet.has(neighborId)) {\n                    const edge = edges.find(e => \n                        (e.from.id === node.id && e.to.id === neighborId) ||\n                        (e.from.id === neighborId && e.to.id === node.id)\n                    );\n                    if (edge) {\n                        edgeQueue.push({ ...edge, length: calculateEdgeLength(edge) });\n                    }\n                }\n            });\n            edgeQueue.sort((a, b) => a.length - b.length); \n        };\n    \n        const animateStep = async () => {\n            if (visitedNodeSet.size === nodes.length || edgeQueue.length === 0) {\n                setAlgorithmStarted(false);\n                setText(\"Algorithm Done!\");\n                setTimeout(resetEdges, 1000);\n                return;\n            }\n    \n            const edgesToHighlight = edgeQueue.slice(0, 1); \n            edgesToHighlight.forEach(edge => {\n                setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n            });\n    \n            stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if(isStepModeRef.current){\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n    \n            const edge = edgeQueue.shift();\n            const { from, to } = edge;\n            const fromInMST = visitedNodeSet.has(from.id);\n            const toInMST = visitedNodeSet.has(to.id);\n    \n            if ((fromInMST && !toInMST) || (!fromInMST && toInMST)) {\n                setVisitedEdges(prev => [\n                    ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                    { ...edge, color: treeEdgeColor }\n                ]);\n    \n                if (fromInMST && !toInMST) {\n                    addEdges(to);\n                } else if (!fromInMST && toInMST) {\n                    addEdges(from);\n                }\n            } else {\n                setVisitedEdges(prev => [\n                    ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                    { ...edge, color: defaultEdgeColor }\n                ]);\n            }\n    \n            animateStep();\n        };\n    \n        addEdges(startNode);\n        animateStep();\n    };\n    \n    // Function to set traversal mode\n    const setClickTraversal = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedTraveral(true);\n    }\n\n    // Function to set MST mode\n    const setClickMST = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedMST(true);\n    }\n\n    // Function to set Paths mode\n    const setClickPath = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedPaths(true);\n    }\n\n    // Functino to go back from algorithm selection\n    const goBack = () => {\n\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        \n        setClickedMST(false);\n        setClickedTraveral(false);\n        setClickedPaths(false);\n        setAlgorithmRunning(false);\n        setText(startingText);\n    }\n\n    // Function to find connected components in a graph\n    const findConnectedComponents = async () => {\n        setRunningAlgorithm(\"Connected\");\n        setAlgorithmStarted(true);\n        setText(\"Connected Components in progress...\");\n        setAlgorithmRunning(true);\n        const visitedNodeSet = new Set();\n        const visitedEdgeSet = new Set();\n        let componentIndex = 0;\n        let stepIndex = 0;\n    \n        const dfsRecursive = async (currentNode, componentColor) => {\n            if (visitedNodeSet.has(currentNode.id)) {\n                return;\n            }\n    \n            visitedNodeSet.add(currentNode.id);\n            setVisitedNodes(prev => { \n                const updatedNodes = [...prev, { id: currentNode.id, color: componentColor }];\n                return updatedNodes;\n            });\n    \n            for (let neighborId of adjList[currentNode.id]) {\n                setCurrentNode(currentNode);     \n                const neighborNode = nodes.find(node => node.id === neighborId); \n                const edge = edges.find(e =>                                     \n                    (e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNode.id)\n                );\n    \n                setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n    \n                if (!visitedEdgeSet.has(edge)) {\n                    stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if(isStepModeRef.current){\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n                }\n    \n                if (!visitedNodeSet.has(neighborId)) { \n                    setVisitedEdges(prev => [\n                        ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                        { ...edge, color: componentColor }\n                    ]);\n                    visitedEdgeSet.add(edge);\n    \n                    await dfsRecursive(neighborNode, componentColor);\n                } else {\n                    setVisitedEdges(prev => [\n                        ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                        { ...edge, color: componentColor }\n                    ]);\n                }\n            }\n        };\n    \n        for (let node of nodes) {\n            if (!visitedNodeSet.has(node.id)) {\n                const componentColor = componentColors[componentIndex % componentColors.length];\n                componentIndex++;\n                await dfsRecursive(node, componentColor);\n            }\n        }\n    \n        setCurrentNode(null);\n        setAlgorithmStarted(false);\n        setText(\"Algorithm Done!\");\n        setTimeout(resetEdges, 1000); \n    };\n    \n    // Function to start shortest path algorithm\n    const startShortestPath = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        setRunningAlgorithm(\"SP\");\n\n        setIsShortestPath(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Start Node for Shortest Path\");\n    }\n\n    // Function to find the shortest path between two nodes\n    const findShortestPath = async (startNode, targetNode) => {\n        setAlgorithmStarted(true);\n        setText(\"Shortest Path Algorithm in progress...\");\n        const dist = {};\n        const prev = {};\n        const visitedEdgeSet = new Set();\n        const visitedNodeSet = new Set();\n        const priorityQueue = new Set(nodes.map(node => node.id)); \n        let stepIndex = 0;\n    \n        nodes.forEach(node => {\n            dist[node.id] = Infinity;\n            prev[node.id] = null;\n        });\n        dist[startNode.id] = 0;\n    \n        const getMinDistNode = () => {\n            let minNode = null;\n            priorityQueue.forEach(nodeId => {\n                if (minNode === null || dist[nodeId] < dist[minNode]) {\n                    minNode = nodeId;\n                }\n            });\n            return minNode;\n        };\n    \n        while (priorityQueue.size > 0) {\n            const currentNodeId = getMinDistNode();\n            const currentNode = nodes.find(node => node.id === currentNodeId);\n    \n            if (dist[currentNodeId] === Infinity) break;\n    \n            priorityQueue.delete(currentNodeId);\n    \n            if (currentNodeId === targetNode.id) {\n                break;\n            }\n    \n            for (let neighborId of adjList[currentNode.id]) {\n                const neighborNode = nodes.find(node => node.id === neighborId);\n                const edge = edges.find(e => \n                    (e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNode.id)\n                );\n    \n                setCurrentNode(currentNode);\n                setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n    \n                if (!visitedEdgeSet.has(edge)) {\n                    stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if(isStepModeRef.current){\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n                    visitedEdgeSet.add(edge);\n                }\n    \n                const alt = dist[currentNode.id] + calculateEdgeLength(edge);\n    \n                if (alt < dist[neighborId]) {\n                    dist[neighborId] = alt;\n                    prev[neighborId] = currentNode.id;\n\n                    setVisitedEdges(prev => [\n                        ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                        { ...edge, color: treeEdgeColor }\n                    ]);\n    \n                    visitedEdgeSet.add(edge);\n                } else {\n                    setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color === currentEdgeColor)));\n                }\n            }\n    \n            visitedNodeSet.add(currentNode.id);\n            setVisitedNodes(prev => {\n                const updatedNodes = [...prev, { id: currentNode.id, color: treeEdgeColor }];\n                return updatedNodes;\n            });\n        }\n    \n        setStartNode(null);\n        setEndNode(null);\n        setAlgorithmStarted(false);\n        setCurrentNode(null);\n        setText(\"Algorithm Done!\");\n    \n        const path = [];\n\n        let currentNodeId = targetNode.id;\n        while (currentNodeId !== null) {\n            path.unshift(currentNodeId);\n            currentNodeId = prev[currentNodeId];\n        }\n\n        if(path.length === 1){\n            setText(\"No path Found!\");\n            setTimeout(resetEdges, 1000);\n            return;\n        }\n    \n        setVisitedEdges(prev => {\n            return prev.map(e => {\n                if (path.includes(e.from.id) && path.includes(e.to.id)) {\n                    return { ...e, color: treeEdgeColor };\n                } else {\n                    return { ...e, color: defaultEdgeColor };\n                }\n            });\n        });\n\n        setVisitedNodes(prev => {\n            return nodes.map(node => {\n                if (path.includes(node.id)) {\n                    return { id: node.id, color: treeEdgeColor };\n                } else {\n                    return { id: node.id, color: \"black\" };\n                }\n            });\n        });\n    \n        setTimeout(resetEdges, 1000);\n    };\n\n    // Function to color graph\n    const graphColoring = async () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        setRunningAlgorithm(\"Color\");\n        setDisablePause(true);\n        setAlgorithmRunning(true);\n        setText(\"Graph Coloring in progress...\");\n\n        const availableColors = componentColors;\n        const colors = {};\n\n        const colorGraph = (node) => {\n            const neighborColors = adjList[node.id].map(neighborId => colors[neighborId]);\n            for(let color of availableColors){\n                if(!neighborColors.includes(color)){\n                    colors[node.id] = color;\n                    break;\n                }\n            }\n        }\n\n        for(let node of nodes){\n            colorGraph(node);\n            setVisitedNodes(prev => [...prev, {id: node.id, color: colors[node.id]}]);\n            await new Promise(resolve => setTimeout(resolve, totalSliderCount - sliderValueRef.current));\n        }\n\n        setText(\"Algorithm Done!\");\n        setTimeout(resetEdges, 1000);\n    }\n\n    // Function to start TSP\n    const startTSP = async () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        setRunningAlgorithm(\"TSP\");\n        setIsTSP(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Node to begin TSP\");\n    }\n\n    // Function to animate TSP\n    const tsp = async (node) => {\n        setAlgorithmStarted(true);\n        setText(\"TSP in progress...\");\n        const startNode = node;\n        const unvisited = new Set(nodes.map(node => node.id));\n        const visited = [];\n        const stack = [];\n        let currentNode = startNode;\n        let stepIndex = 0;\n    \n        unvisited.delete(currentNode.id);\n        visited.push(currentNode);\n        setVisitedNodes([{ id: currentNode.id, color: treeEdgeColor }]);\n    \n        while (unvisited.size > 0) {\n            let nearestNode = null;\n            let shortestDistance = Infinity;\n            let currentEdge = null;\n    \n            for (let neighborId of unvisited) {\n                setCurrentNode(currentNode);\n                const neighborNode = nodes.find(node => node.id === neighborId);\n                // eslint-disable-next-line\n                const edge = edges.find(e =>\n                    (e.from.id === currentNode.id && e.to.id === neighborNode.id) ||\n                    (e.from.id === neighborNode.id && e.to.id === currentNode.id)\n                );\n    \n                if (edge) {\n                    setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n                    stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if(isStepModeRef.current){\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n                    const distance = calculateEdgeLength({ from: currentNode, to: neighborNode });\n                    setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)));\n                    if (distance < shortestDistance) {\n                        shortestDistance = distance;\n                        nearestNode = neighborNode;\n                        currentEdge = edge;\n                    }\n                }\n            }\n    \n            if (nearestNode && currentEdge) {\n                stack.push({ currentNode, nearestNode, shortestDistance });\n    \n                setVisitedEdges(prev => [...prev, { ...currentEdge, color: treeEdgeColor }]);\n                setVisitedNodes(prev => [...prev, { id: nearestNode.id, color: treeEdgeColor }]);\n    \n                stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if(isStepModeRef.current){\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n    \n                currentNode = nearestNode;\n                unvisited.delete(currentNode.id);\n                visited.push(currentNode);\n            } else {\n                const previousState = stack.pop();\n                if (previousState) {\n                    currentNode = previousState.currentNode;\n                } else {\n                    break;\n                }\n            }\n        }\n    \n        setCurrentNode(null);\n        setAlgorithmStarted(false);\n        setText(\"Algorithm Done!\");\n        setTimeout(resetEdges, 1000);\n    };\n\n    // Function to step in the algorithm\n    const nextStep = () => {\n        if(isPausedRef.current){\n            setIsStepMode(true);\n            if(isPausedRef.current){\n                setCurrentStep(prev => {\n                    const next = prev + 1;\n                    currentStepRef.current = next;\n                    return next;\n                });\n            }\n            setIsPaused(false);\n            isPausedRef.current = false;\n        }\n    };\n\n    // Function to toggle button \n    const togglePlayPause = () => {\n        if (isPausedRef.current) {\n            setIsStepMode(false);\n            setIsPaused(false);\n            isPausedRef.current = false;\n            switch (runningAlgorithm) {\n                case \"DFS\":\n                    setText(\"DFS in progress...\")\n                    break;\n                case \"BFS\":\n                    setText(\"BFS in progress...\")\n                    break;\n                case \"Kruskall\":\n                    setText(\"Kruskall's Algorithm in progress...\")\n                    break;\n                case \"Prim\":\n                    setText(\"Prim's Algorithm in progress...\")\n                    break;\n                case \"SP\":\n                    setText(\"Shortest Path Algorithm in progress...\")\n                    break;\n                case \"TSP\":\n                    setText(\"TSP in progress...\")\n                    break;\n                case \"Connected\":\n                    setText(\"Connected Components in progress..\")\n                    break;\n                case \"Colors\":\n                    setText(\"Graph Coloring in progress...\")\n                    break;\n                }\n        } else {\n            setIsStepMode(false);\n            setIsPaused(true);\n            isPausedRef.current = true;\n            setText(\"Algorithm is Paused\");\n        }\n    };\n\n    // Function to sleep and check for pausing\n    const sleep = (duration) => {\n        return new Promise((resolve) => {\n            const interval = 50;\n            let elapsed = 0;\n    \n            const checkPauseAndSleep = () => {\n                if (isPausedRef.current) {\n                    const checkPause = () => {\n                        if(isStepModeRef.current){\n                            setIsStepMode(true);\n                            resolve();\n                        }else if (!isPausedRef.current){\n                            resolve();\n                        }else {\n                            setTimeout(checkPause, interval);\n                        }\n                    };\n                    checkPause();\n                } else {\n                    if (elapsed < duration) {\n                        elapsed += interval;\n                        setTimeout(checkPauseAndSleep, interval);\n                    } else {\n                        resolve();\n                    }\n                }\n            };\n    \n            checkPauseAndSleep();\n        });\n    };\n\n    // JSX for rendering the component\n    return (\n        <div className=\"main-container\">\n            <div className=\"button-container\">\n                <h3>Graph Creation</h3>\n\n                {/* Graph Creation and Updating when node selected */}\n                {selectedNode && (\n                <button className=\"graph-button\" onClick={handleAddEdge}>Add Edge</button>)}\n                {selectedNode && (\n                <button className=\"graph-button\" onClick={removeNode}>Remove Node</button>)}\n\n                {/* Graph Creation and Updating */}\n                {!selectedNode && (\n                <button className=\"graph-button\" onClick={addNode}>Add Node</button>)}\n                {!selectedNode && (\n                <button className=\"graph-button\" onClick={generateGraph}>Generate Graph</button>)}\n                {!selectedNode && nodes.length > 0 && (\n                <button className=\"graph-button\" onClick={resetGraph}>Reset Graph</button>)}\n\n                {/* Edge Editing */}\n                {!selectedNode && edges.length > 0 && (\n                    <h3>Edge Editing</h3>)}\n                {!selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={() => {if(edges.length>0){setIsDirected(!isDirected)}}}>\n                        {isDirected ? 'Set Undirected' : 'Set Directed'}\n                    </button>)}\n                {!selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={() => {if(edges.length>0){setShowWeights(!showWeights)}}}>\n                        {showWeights ? 'Hide Weights' : 'Show Weights'}\n                    </button>)}\n                {!selectedNode && edges.length > 0 && (\n                <button className=\"graph-button\" onClick={startRemovingEdge}>Remove Edge</button>)}\n\n                \n                {algorithmStarted && !disablePause && (\n                    <>\n                        <h3>Control</h3>\n                        <button className=\"graph-button\" onClick={nextStep}>Next Step</button>\n                        <button className=\"graph-button\" onClick={togglePlayPause}>\n                            {((isPaused || isStepMode) && !disablePause) ? \"Play\" : \"Pause\"}\n                        </button>\n                    </>\n                )}\n\n            </div>\n                \n            <div className=\"graph-content\">\n                <div className=\"slider-container\">\n                    <h4 className=\"slider-label\">Algorithm Speed</h4>\n                    <div className=\"slider-content\">\n                        <h4>Slow</h4>\n                        <input \n                            type=\"range\" \n                            min=\"100\" \n                            max=\"2000\" \n                            step=\"100\" \n                            value={sliderValue} \n                            onChange={handleSliderChange}\n                        />\n                        <h4>Fast</h4>\n                    </div>\n                </div>\n                <div className=\"graph-box\">\n                <svg className=\"edges-svg\" style={{ position: 'absolute', width: '100%', height: '100%' }}>\n                    {edges.map((edge, index) => {\n                        const midpoint = calculateMidpoint(edge);\n                        const { angle, flipped } = calculateAngle(edge);\n                        const arrowLength = 20;\n                        const arrowAngle = 30;\n                        const nodeRadius = 10;\n                \n                        \n                        const dx = edge.to.x - edge.from.x;\n                        const dy = edge.to.y - edge.from.y;\n                        const length = Math.sqrt(dx * dx + dy * dy);\n                        const unitDx = dx / length;\n                        const unitDy = dy / length;\n                        \n                        const baseX = edge.to.x - nodeRadius * unitDx + 10;\n                        const baseY = edge.to.y - nodeRadius * unitDy + 10;\n                        \n                \n                        let arrowX1, arrowY1, arrowX2, arrowY2;\n                        if (flipped) {\n                            arrowX1 = baseX + arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                            arrowY1 = baseY + arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n                            arrowX2 = baseX + arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                            arrowY2 = baseY + arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n                        } else {\n                            arrowX1 = baseX - arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                            arrowY1 = baseY - arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n                            arrowX2 = baseX - arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                            arrowY2 = baseY - arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n                        }\n\n\n                        return (\n                            <React.Fragment key={index}>\n                                <line\n                                    x1={edge.from.x + 10}\n                                    y1={edge.from.y + 10}\n                                    x2={edge.to.x + 10}\n                                    y2={edge.to.y + 10}\n                                    stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                    strokeWidth={isRemovingEdge ? 8 : 4}\n                                    onClick={() => handleEdgeClick(edge)}\n                                />\n                                {isDirected && (\n                                   <>\n                                        <line\n                                            x1={baseX}\n                                            y1={baseY}\n                                            x2={arrowX1}\n                                            y2={arrowY1}\n                                            stroke=\"grey\"\n                                            strokeWidth={isRemovingEdge ? 8 : 4}\n                                        />\n                                        <line\n                                            x1={baseX}\n                                            y1={baseY}\n                                            x2={arrowX2}\n                                            y2={arrowY2}\n                                            stroke=\"grey\"\n                                            strokeWidth={isRemovingEdge ? 8 : 4}\n                                        />\n                                    </>\n                                )}\n                                {showWeights && (\n                                    <text\n                                        x={midpoint.x + 10}\n                                        y={midpoint.y + 7}\n                                        fill=\"black\"\n                                        fontSize=\"12\"\n                                        transform={`rotate(${angle}, ${midpoint.x + 10}, ${midpoint.y + 10})`}\n                                        textAnchor=\"middle\"\n                                    >\n                                        {Math.round(calculateEdgeLength(edge))}\n                                    </text>)}\n                            </React.Fragment>\n                        );\n                    })}\n                </svg>\n                    {nodes.map(node => (\n                        <Draggable\n                            key={node.id}\n                            position={{ x: node.x, y: node.y }}\n                            bounds=\"parent\"\n                            onStart={handleMouseDown}\n                            onDrag={(e, data) => handleDrag(e, data, node)}\n                            onStop={handleDragStop}\n                        >\n                            <div\n                                className=\"graph-node\"\n                                onClick={() => handleNodeClick(node)}\n                                style={{\n                                    border: (isTSP || isBFS || isPrim || isDFS || isShortestPath) ? (startNode && startNode.id === node.id ? 'none' : '2px solid red') : (selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none'),\n                                    backgroundColor: \n                                    node.id === currentNode?.id ? 'red' : \n                                    visitedNodes.some(vn => vn.id === node.id) ? \n                                        (visitedNodes.find(vn => vn.id === node.id)?.color || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\") \n                                        : 'black',\n                                    pointerEvents: 'auto',\n                                    position: 'absolute'\n                                }}\n                            >\n                            </div>\n                        </Draggable>\n                    ))}\n                </div>\n                <h3 class-name=\"status-text\">{text}</h3>\n            </div>\n\n            <div className=\"button-container\">    \n                {/* Traversal and MST and Path*/}\n                {edges.length > 0 && !selectedNode &&(\n                <h3>Algorithms</h3>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickTraversal}>Traversals →</button>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickMST}>MSTs →</button>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickPath}>Paths →</button>)}\n\n\n                {/* Specific Algorithms */}\n                {clickedMST && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={animateKruskalsAlgorithm}>Kruskall</button>)}\n                {clickedMST && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startPrim}>Prim</button>)}\n\n                {clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\", backgroundColor: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startDFS}>DFS</button>)}\n                {clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startBFS}>BFS</button>)}\n\n                {clickedPaths && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startShortestPath}>Shortest Path</button>)}\n                {clickedPaths && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startTSP}>TSP</button>)}\n                \n                {!clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={findConnectedComponents}>Connected Components</button>)}\n                {!clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={graphColoring}>Graph Coloring</button>)}\n                \n                \n\n                {/* Back Button */}\n                {(clickedTraversal || clickedMST || clickedPaths) && !selectedNode && (\n                <button className=\"graph-button\" onClick={goBack}>← Back</button>)} \n                \n            </div>\n        </div>\n    );\n};\n\nexport default Graphs;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}