{"ast":null,"code":"var _jsxFileName = \"/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport Draggable from 'react-draggable';\nimport { GraphsProvider } from './GraphsContext';\nimport { useGraphStates } from './GraphsContext';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Graphs = () => {\n  _s();\n  const graphStates = useGraphStates();\n\n  // Constants for UI text and colors\n  const highlightedButtonColor = \"lightblue\";\n  const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n  const treeEdgeColor = \"blue\";\n  const currentEdgeColor = \"red\";\n  const defaultEdgeColor = \"grey\";\n\n  // Use Effect to differentiate between modes\n  useEffect(() => {\n    isStepModeRef.current = isStepMode;\n  }, [isStepMode]);\n\n  // Use sEffect to allow pausing mid-alg\n  useEffect(() => {\n    isPausedRef.current = isPaused;\n  }, [isPaused]);\n\n  // Use Effect to allow stopping mid-alg\n  useEffect(() => {\n    currentStepRef.current = currentStepRef;\n  }, [currentStepRef]);\n\n  // Function to reset edges to default state\n  const resetEdges = () => {\n    setVisitedEdges([]);\n    setVisitedNodes([]);\n    setText(startingText);\n    setAlgorithmRunning(false);\n    setCurrentStep(0);\n    currentStepRef.current = 0;\n    setDisablePause(false);\n    setRunningAlgorithm(null);\n  };\n\n  // Function to set traversal mode\n  const setClickTraversal = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedTraveral(true);\n  };\n\n  // Function to set MST mode\n  const setClickMST = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedMST(true);\n  };\n\n  // Function to set Paths mode\n  const setClickPath = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedPaths(true);\n  };\n\n  // Functino to go back from algorithm selection\n  const goBack = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setClickedMST(false);\n    setClickedTraveral(false);\n    setClickedPaths(false);\n    setAlgorithmRunning(false);\n    setText(startingText);\n  };\n\n  // Function to step in the algorithm\n  const nextStep = () => {\n    if (isPausedRef.current) {\n      setIsStepMode(true);\n      if (isPausedRef.current) {\n        setCurrentStep(prev => {\n          const next = prev + 1;\n          currentStepRef.current = next;\n          return next;\n        });\n      }\n      setIsPaused(false);\n      isPausedRef.current = false;\n    }\n  };\n\n  // Function to toggle button \n  const togglePlayPause = () => {\n    if (isPausedRef.current) {\n      setIsStepMode(false);\n      setIsPaused(false);\n      isPausedRef.current = false;\n      switch (runningAlgorithm) {\n        case \"DFS\":\n          setText(\"DFS in progress...\");\n          break;\n        case \"BFS\":\n          setText(\"BFS in progress...\");\n          break;\n        case \"Kruskall\":\n          setText(\"Kruskall's Algorithm in progress...\");\n          break;\n        case \"Prim\":\n          setText(\"Prim's Algorithm in progress...\");\n          break;\n        case \"SP\":\n          setText(\"Shortest Path Algorithm in progress...\");\n          break;\n        case \"TSP\":\n          setText(\"TSP in progress...\");\n          break;\n        case \"Connected\":\n          setText(\"Connected Components in progress..\");\n          break;\n        case \"Colors\":\n          setText(\"Graph Coloring in progress...\");\n          break;\n      }\n    } else {\n      setIsStepMode(false);\n      setIsPaused(true);\n      isPausedRef.current = true;\n      setText(\"Algorithm is Paused\");\n    }\n  };\n\n  // Function to switch between directed and undirected graphs\n  const toggleGraphType = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    if (isDirected) {\n      const consolidatedEdges = [];\n      const edgeSet = new Set();\n      edges.forEach(edge => {\n        const edgeKey = `${Math.min(edge.from.id, edge.to.id)}-${Math.max(edge.from.id, edge.to.id)}`;\n        if (!edgeSet.has(edgeKey)) {\n          edgeSet.add(edgeKey);\n          consolidatedEdges.push(edge);\n        }\n      });\n      const newAdjList = {};\n      consolidatedEdges.forEach(edge => {\n        if (!newAdjList[edge.from.id]) newAdjList[edge.from.id] = [];\n        if (!newAdjList[edge.to.id]) newAdjList[edge.to.id] = [];\n        newAdjList[edge.from.id].push(edge.to.id);\n        newAdjList[edge.to.id].push(edge.from.id);\n      });\n      setEdges(consolidatedEdges);\n      setAdjList(newAdjList);\n    }\n    setIsDirected(!isDirected);\n  };\n\n  // JSX for rendering the component\n  return /*#__PURE__*/_jsxDEV(GraphsProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Graph Creation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 17\n        }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: handleAddEdge,\n          children: \"Add Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 17\n        }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: removeNode,\n          children: \"Remove Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 17\n        }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: addNode,\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 17\n        }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: generateGraph,\n          children: \"Generate Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 17\n        }, this), !selectedNode && nodes.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: resetGraph,\n          children: \"Reset Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 17\n        }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Edge Editing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: toggleGraphType,\n          children: isDirected ? 'Set Undirected' : 'Set Directed'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this), !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: () => {\n            if (edges.length > 0) {\n              setShowWeights(!showWeights);\n            }\n          },\n          children: showWeights ? 'Hide Weights' : 'Show Weights'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this), !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: startRemovingEdge,\n          children: \"Remove Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 17\n        }, this), algorithmStarted && !disablePause && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Control\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"graph-button\",\n            onClick: nextStep,\n            children: \"Next Step\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"graph-button\",\n            onClick: togglePlayPause,\n            children: (isPaused || isStepMode) && !disablePause ? \"Play\" : \"Pause\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"slider-label\",\n            children: \"Algorithm Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slider-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Slow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"100\",\n              max: \"2000\",\n              step: \"100\",\n              value: sliderValue,\n              onChange: handleSliderChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Fast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"graph-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"edges-svg\",\n            style: {\n              position: 'absolute',\n              width: '100%',\n              height: '100%'\n            },\n            children: edges.map((edge, index) => {\n              var _visitedEdges$find, _visitedEdges$find2, _visitedEdges$find3;\n              const midpoint = calculateMidpoint(edge);\n              const {\n                angle,\n                flipped\n              } = calculateAngle(edge);\n              const arrowLength = 15;\n              const arrowAngle = 30;\n              const nodeRadius = 10;\n              const dx = edge.to.x - edge.from.x;\n              const dy = edge.to.y - edge.from.y;\n              const length = Math.sqrt(dx * dx + dy * dy);\n              const unitDx = dx / length;\n              const unitDy = dy / length;\n              const baseX = edge.to.x - nodeRadius * unitDx;\n              const baseY = edge.to.y - nodeRadius * unitDy;\n              const edgeCount = edges.filter(e => e.from.id === edge.from.id && e.to.id === edge.to.id || e.from.id === edge.to.id && e.to.id === edge.from.id).length;\n              let offsetX = 0;\n              let offsetY = 0;\n              if (edgeCount > 1) {\n                offsetX = 5 * unitDy;\n                offsetY = -5 * unitDx;\n              }\n              const adjustedFromX = edge.from.x + 10 + offsetX;\n              const adjustedFromY = edge.from.y + 10 + offsetY;\n              const adjustedToX = baseX + 10 + offsetX;\n              const adjustedToY = baseY + 10 + offsetY;\n              const arrowBaseX = baseX + offsetX + 10;\n              const arrowBaseY = baseY + offsetY + 10;\n              let arrowX1, arrowY1, arrowX2, arrowY2;\n              if (flipped) {\n                arrowX1 = arrowBaseX + arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                arrowY1 = arrowBaseY + arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n                arrowX2 = arrowBaseX + arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                arrowY2 = arrowBaseY + arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n              } else {\n                arrowX1 = arrowBaseX - arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                arrowY1 = arrowBaseY - arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n                arrowX2 = arrowBaseX - arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                arrowY2 = arrowBaseY - arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n              }\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                  x1: adjustedFromX,\n                  y1: adjustedFromY,\n                  x2: adjustedToX,\n                  y2: adjustedToY,\n                  stroke: ((_visitedEdges$find = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find === void 0 ? void 0 : _visitedEdges$find.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                  strokeWidth: isRemovingEdge ? 8 : 4,\n                  onClick: () => handleEdgeClick(edge)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 292,\n                  columnNumber: 33\n                }, this), isDirected && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                    x1: adjustedToX,\n                    y1: adjustedToY,\n                    x2: arrowX1,\n                    y2: arrowY1,\n                    stroke: ((_visitedEdges$find2 = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find2 === void 0 ? void 0 : _visitedEdges$find2.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                    strokeWidth: isRemovingEdge ? 8 : 4\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 303,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n                    x1: adjustedToX,\n                    y1: adjustedToY,\n                    x2: arrowX2,\n                    y2: arrowY2,\n                    stroke: ((_visitedEdges$find3 = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find3 === void 0 ? void 0 : _visitedEdges$find3.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                    strokeWidth: isRemovingEdge ? 8 : 4\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 311,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true), showWeights && /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: midpoint.x + 10,\n                  y: edgeCount > 1 ? midpoint.y + 2 : midpoint.y + 7,\n                  fill: \"black\",\n                  fontSize: \"12\",\n                  transform: `rotate(${angle}, ${midpoint.x + 10}, ${midpoint.y + 10})`,\n                  textAnchor: \"middle\",\n                  children: Math.round(calculateEdgeLength(edge))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 37\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 29\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 17\n          }, this), nodes.map(node => {\n            var _currentNode, _visitedNodes$find;\n            return /*#__PURE__*/_jsxDEV(Draggable, {\n              position: {\n                x: node.x,\n                y: node.y\n              },\n              bounds: \"parent\",\n              onStart: handleMouseDown,\n              onDrag: (e, data) => handleDrag(e, data, node),\n              onStop: handleDragStop,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"graph-node\",\n                onClick: () => handleNodeClick(node),\n                style: {\n                  border: isTSP || isBFS || isPrim || isDFS || isShortestPath ? startNode && startNode.id === node.id ? 'none' : '2px solid red' : selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none',\n                  backgroundColor: node.id === ((_currentNode = currentNode) === null || _currentNode === void 0 ? void 0 : _currentNode.id) ? 'red' : visitedNodes.some(vn => vn.id === node.id) ? ((_visitedNodes$find = visitedNodes.find(vn => vn.id === node.id)) === null || _visitedNodes$find === void 0 ? void 0 : _visitedNodes$find.color) || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\" : 'black',\n                  pointerEvents: 'auto',\n                  position: 'absolute'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 29\n              }, this)\n            }, node.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 25\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          \"class-name\": \"status-text\",\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [edges.length > 0 && !selectedNode && /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Algorithms\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 17\n        }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: setClickTraversal,\n          children: \"Traversals \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 17\n        }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: setClickMST,\n          children: \"MSTs \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 17\n        }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: setClickPath,\n          children: \"Paths \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 17\n        }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: animateKruskalsAlgorithm,\n          children: \"Kruskall\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 17\n        }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: startPrim,\n          children: \"Prim\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 17\n        }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: startDFS,\n          children: \"DFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 17\n        }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: startBFS,\n          children: \"BFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 17\n        }, this), clickedPaths && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: startShortestPath,\n          children: \"Shortest Path\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 17\n        }, this), clickedPaths && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: startTSP,\n          children: \"TSP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 17\n        }, this), !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: graphColoring,\n          children: \"Graph Coloring\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 17\n        }, this), !isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: findConnectedComponents,\n          children: \"Connected Components\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 17\n        }, this), isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: findStrongComponents,\n          children: \"Strong Components\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 17\n        }, this), (clickedTraversal || clickedMST || clickedPaths) && !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: goBack,\n          children: \"\\u2190 Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 9\n  }, this);\n};\n_s(Graphs, \"lmKIB/0eX56NgagUorqb5+J5r24=\", false, function () {\n  return [useGraphStates];\n});\n_c = Graphs;\nexport default Graphs;\nvar _c;\n$RefreshReg$(_c, \"Graphs\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Draggable","GraphsProvider","useGraphStates","jsxDEV","_jsxDEV","Fragment","_Fragment","Graphs","_s","graphStates","highlightedButtonColor","startingText","treeEdgeColor","currentEdgeColor","defaultEdgeColor","isStepModeRef","current","isStepMode","isPausedRef","isPaused","currentStepRef","resetEdges","setVisitedEdges","setVisitedNodes","setText","setAlgorithmRunning","setCurrentStep","setDisablePause","setRunningAlgorithm","setClickTraversal","algorithmRunning","setClickedTraveral","setClickMST","setClickedMST","setClickPath","setClickedPaths","goBack","isRemovingEdge","nextStep","setIsStepMode","prev","next","setIsPaused","togglePlayPause","runningAlgorithm","toggleGraphType","isDirected","consolidatedEdges","edgeSet","Set","edges","forEach","edge","edgeKey","Math","min","from","id","to","max","has","add","push","newAdjList","setEdges","setAdjList","setIsDirected","children","className","fileName","_jsxFileName","lineNumber","columnNumber","selectedNode","onClick","handleAddEdge","removeNode","addNode","generateGraph","nodes","length","resetGraph","setShowWeights","showWeights","startRemovingEdge","algorithmStarted","disablePause","type","step","value","sliderValue","onChange","handleSliderChange","style","position","width","height","map","index","_visitedEdges$find","_visitedEdges$find2","_visitedEdges$find3","midpoint","calculateMidpoint","angle","flipped","calculateAngle","arrowLength","arrowAngle","nodeRadius","dx","x","dy","y","sqrt","unitDx","unitDy","baseX","baseY","edgeCount","filter","e","offsetX","offsetY","adjustedFromX","adjustedFromY","adjustedToX","adjustedToY","arrowBaseX","arrowBaseY","arrowX1","arrowY1","arrowX2","arrowY2","cos","PI","sin","x1","y1","x2","y2","stroke","visitedEdges","find","color","strokeWidth","handleEdgeClick","fill","fontSize","transform","textAnchor","round","calculateEdgeLength","node","_currentNode","_visitedNodes$find","bounds","onStart","handleMouseDown","onDrag","data","handleDrag","onStop","handleDragStop","handleNodeClick","border","isTSP","isBFS","isPrim","isDFS","isShortestPath","startNode","backgroundColor","currentNode","visitedNodes","some","vn","componentColors","components","findIndex","comp","n","pointerEvents","text","clickedTraversal","clickedMST","clickedPaths","animateKruskalsAlgorithm","startPrim","startDFS","startBFS","startShortestPath","startTSP","graphColoring","findConnectedComponents","findStrongComponents","_c","$RefreshReg$"],"sources":["/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js"],"sourcesContent":["import React, {useState, useRef, useEffect } from 'react';\nimport Draggable from 'react-draggable';\nimport { GraphsProvider } from './GraphsContext';\nimport { useGraphStates } from './GraphsContext';\n\n\nconst Graphs = () => {\n    const graphStates = useGraphStates();\n\n    // Constants for UI text and colors\n    const highlightedButtonColor = \"lightblue\";\n    const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n    const treeEdgeColor = \"blue\"; \n    const currentEdgeColor = \"red\"; \n    const defaultEdgeColor = \"grey\";\n\n    // Use Effect to differentiate between modes\n    useEffect(() => {\n        isStepModeRef.current = isStepMode;\n    }, [isStepMode]);\n\n    // Use sEffect to allow pausing mid-alg\n    useEffect(() => {\n        isPausedRef.current = isPaused;\n    }, [isPaused]);\n\n    // Use Effect to allow stopping mid-alg\n    useEffect(() => {\n        currentStepRef.current = currentStepRef;\n    }, [currentStepRef]);\n\n    // Function to reset edges to default state\n    const resetEdges = () => {\n        setVisitedEdges([]);\n        setVisitedNodes([]);\n        setText(startingText);\n        setAlgorithmRunning(false);\n        setCurrentStep(0);\n        currentStepRef.current = 0;\n        setDisablePause(false);\n        setRunningAlgorithm(null);\n    };\n\n    // Function to set traversal mode\n    const setClickTraversal = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedTraveral(true);\n    }\n\n    // Function to set MST mode\n    const setClickMST = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedMST(true);\n    }\n\n    // Function to set Paths mode\n    const setClickPath = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedPaths(true);\n    }\n\n    // Functino to go back from algorithm selection\n    const goBack = () => {\n\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        \n        setClickedMST(false);\n        setClickedTraveral(false);\n        setClickedPaths(false);\n        setAlgorithmRunning(false);\n        setText(startingText);\n    }\n\n    // Function to step in the algorithm\n    const nextStep = () => {\n        if(isPausedRef.current){\n            setIsStepMode(true);\n            if(isPausedRef.current){\n                setCurrentStep(prev => {\n                    const next = prev + 1;\n                    currentStepRef.current = next;\n                    return next;\n                });\n            }\n            setIsPaused(false);\n            isPausedRef.current = false;\n        }\n    };\n\n    // Function to toggle button \n    const togglePlayPause = () => {\n        if (isPausedRef.current) {\n            setIsStepMode(false);\n            setIsPaused(false);\n            isPausedRef.current = false;\n            switch (runningAlgorithm) {\n                case \"DFS\":\n                    setText(\"DFS in progress...\")\n                    break;\n                case \"BFS\":\n                    setText(\"BFS in progress...\")\n                    break;\n                case \"Kruskall\":\n                    setText(\"Kruskall's Algorithm in progress...\")\n                    break;\n                case \"Prim\":\n                    setText(\"Prim's Algorithm in progress...\")\n                    break;\n                case \"SP\":\n                    setText(\"Shortest Path Algorithm in progress...\")\n                    break;\n                case \"TSP\":\n                    setText(\"TSP in progress...\")\n                    break;\n                case \"Connected\":\n                    setText(\"Connected Components in progress..\")\n                    break;\n                case \"Colors\":\n                    setText(\"Graph Coloring in progress...\")\n                    break;\n                }\n        } else {\n            setIsStepMode(false);\n            setIsPaused(true);\n            isPausedRef.current = true;\n            setText(\"Algorithm is Paused\");\n        }\n    };\n    \n    // Function to switch between directed and undirected graphs\n    const toggleGraphType = () => {\n        if(algorithmRunning){\n            return;\n        }\n        if (isDirected) {\n            const consolidatedEdges = [];\n            const edgeSet = new Set();\n    \n            edges.forEach(edge => {\n                const edgeKey = `${Math.min(edge.from.id, edge.to.id)}-${Math.max(edge.from.id, edge.to.id)}`;\n                if (!edgeSet.has(edgeKey)) {\n                    edgeSet.add(edgeKey);\n                    consolidatedEdges.push(edge);\n                }\n            });\n    \n            const newAdjList = {};\n            consolidatedEdges.forEach(edge => {\n                if (!newAdjList[edge.from.id]) newAdjList[edge.from.id] = [];\n                if (!newAdjList[edge.to.id]) newAdjList[edge.to.id] = [];\n                newAdjList[edge.from.id].push(edge.to.id);\n                newAdjList[edge.to.id].push(edge.from.id);\n            });\n    \n            setEdges(consolidatedEdges);\n            setAdjList(newAdjList);\n        }\n        setIsDirected(!isDirected);\n    }\n\n    // JSX for rendering the component\n    return (\n        <GraphsProvider>\n        <div className=\"main-container\">\n            <div className=\"button-container\">\n                <h3>Graph Creation</h3>\n\n                {/* Graph Creation and Updating when node selected */}\n                {selectedNode && (\n                <button className=\"graph-button\" onClick={handleAddEdge}>Add Edge</button>)}\n                {selectedNode && (\n                <button className=\"graph-button\" onClick={removeNode}>Remove Node</button>)}\n\n                {/* Graph Creation and Updating */}\n                {!selectedNode && (\n                <button className=\"graph-button\" onClick={addNode}>Add Node</button>)}\n                {!selectedNode && (\n                <button className=\"graph-button\" onClick={generateGraph}>Generate Graph</button>)}\n                {!selectedNode && nodes.length > 0 && (\n                <button className=\"graph-button\" onClick={resetGraph}>Reset Graph</button>)}\n\n                {/* Edge Editing */}\n                {!selectedNode && (\n                    <h3>Edge Editing</h3>)}\n                {!selectedNode && (\n                    <button className=\"graph-button\" onClick={toggleGraphType}>\n                        {isDirected ? 'Set Undirected' : 'Set Directed'}\n                    </button>)}\n                {!selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={() => {if(edges.length>0){setShowWeights(!showWeights)}}}>\n                        {showWeights ? 'Hide Weights' : 'Show Weights'}\n                    </button>)}\n                {!selectedNode && edges.length > 0 && (\n                <button className=\"graph-button\" onClick={startRemovingEdge}>Remove Edge</button>)}\n\n                \n                {algorithmStarted && !disablePause && (\n                    <>\n                        <h3>Control</h3>\n                        <button className=\"graph-button\" onClick={nextStep}>Next Step</button>\n                        <button className=\"graph-button\" onClick={togglePlayPause}>\n                            {((isPaused || isStepMode) && !disablePause) ? \"Play\" : \"Pause\"}\n                        </button>\n                    </>\n                )}\n\n            </div>\n                \n            <div className=\"graph-content\">\n                <div className=\"slider-container\">\n                    <h4 className=\"slider-label\">Algorithm Speed</h4>\n                    <div className=\"slider-content\">\n                        <h4>Slow</h4>\n                        <input \n                            type=\"range\" \n                            min=\"100\" \n                            max=\"2000\" \n                            step=\"100\" \n                            value={sliderValue} \n                            onChange={handleSliderChange}\n                        />\n                        <h4>Fast</h4>\n                    </div>\n                </div>\n                <div className=\"graph-box\">\n                <svg className=\"edges-svg\" style={{ position: 'absolute', width: '100%', height: '100%' }}>\n                    {edges.map((edge, index) => {\n                        const midpoint = calculateMidpoint(edge);\n                        const { angle, flipped } = calculateAngle(edge);\n                        const arrowLength = 15;\n                        const arrowAngle = 30;\n                        const nodeRadius = 10;\n                \n                        \n                        const dx = edge.to.x - edge.from.x;\n                        const dy = edge.to.y - edge.from.y;\n                        const length = Math.sqrt(dx * dx + dy * dy);\n                        const unitDx = dx / length;\n                        const unitDy = dy / length;\n                        \n                        const baseX = edge.to.x - nodeRadius * unitDx;\n                        const baseY = edge.to.y - nodeRadius * unitDy;\n                        \n                        const edgeCount = edges.filter(e => \n                            (e.from.id === edge.from.id && e.to.id === edge.to.id) || \n                            (e.from.id === edge.to.id && e.to.id === edge.from.id)\n                        ).length;\n\n                        let offsetX = 0;\n                        let offsetY = 0;\n\n                        if (edgeCount > 1) {\n                            offsetX = 5 * unitDy; \n                            offsetY = -5 * unitDx;\n                        }\n\n                        const adjustedFromX = edge.from.x + 10 + offsetX;\n                        const adjustedFromY = edge.from.y + 10 + offsetY;\n                        const adjustedToX = baseX + 10 + offsetX ;\n                        const adjustedToY = baseY + 10 + offsetY;\n\n                        const arrowBaseX = baseX + offsetX + 10;\n                        const arrowBaseY = baseY + offsetY + 10;\n                \n                        let arrowX1, arrowY1, arrowX2, arrowY2;\n                        if (flipped) {\n                            arrowX1 = arrowBaseX + arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                            arrowY1 = arrowBaseY + arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n                            arrowX2 = arrowBaseX + arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                            arrowY2 = arrowBaseY + arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n                        } else {\n                            arrowX1 = arrowBaseX - arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                            arrowY1 = arrowBaseY - arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n                            arrowX2 = arrowBaseX - arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                            arrowY2 = arrowBaseY - arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n                        }\n\n\n                        return (\n                            <React.Fragment key={index}>\n                                <line\n                                    x1={adjustedFromX}\n                                    y1={adjustedFromY}\n                                    x2={adjustedToX}\n                                    y2={adjustedToY}\n                                    stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                    strokeWidth={isRemovingEdge ? 8 : 4}\n                                    onClick={() => handleEdgeClick(edge)}\n                                />\n                                {isDirected && (\n                                   <>\n                                        <line\n                                            x1={adjustedToX}\n                                            y1={adjustedToY}\n                                            x2={arrowX1}\n                                            y2={arrowY1}\n                                            stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                            strokeWidth={isRemovingEdge ? 8 : 4}\n                                        />\n                                        <line\n                                           x1={adjustedToX}\n                                           y1={adjustedToY}\n                                           x2={arrowX2}\n                                           y2={arrowY2}\n                                            stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                            strokeWidth={isRemovingEdge ? 8 : 4}\n                                        />\n                                    </>\n                                )}\n                                {showWeights && (\n                                    <text\n                                        x={midpoint.x + 10}\n                                        y={edgeCount > 1 ? midpoint.y + 2 : midpoint.y + 7}\n                                        fill=\"black\"\n                                        fontSize=\"12\"\n                                        transform={`rotate(${angle}, ${midpoint.x + 10}, ${midpoint.y + 10})`}\n                                        textAnchor=\"middle\"\n                                    >\n                                        {Math.round(calculateEdgeLength(edge))}\n                                    </text>)}\n                            </React.Fragment>\n                        );\n                    })}\n                </svg>\n                    {nodes.map(node => (\n                        <Draggable\n                            key={node.id}\n                            position={{ x: node.x, y: node.y }}\n                            bounds=\"parent\"\n                            onStart={handleMouseDown}\n                            onDrag={(e, data) => handleDrag(e, data, node)}\n                            onStop={handleDragStop}\n                        >\n                            <div\n                                className=\"graph-node\"\n                                onClick={() => handleNodeClick(node)}\n                                style={{\n                                    border: (isTSP || isBFS || isPrim || isDFS || isShortestPath) ? (startNode && startNode.id === node.id ? 'none' : '2px solid red') : (selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none'),\n                                    backgroundColor: \n                                    node.id === currentNode?.id ? 'red' : \n                                    visitedNodes.some(vn => vn.id === node.id) ? \n                                        (visitedNodes.find(vn => vn.id === node.id)?.color || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\") \n                                        : 'black',\n                                    pointerEvents: 'auto',\n                                    position: 'absolute'\n                                }}\n                            >\n                            </div>\n                        </Draggable>\n                    ))}\n                </div>\n                <h3 class-name=\"status-text\">{text}</h3>\n            </div>\n\n            <div className=\"button-container\">    \n                {/* Traversal and MST and Path*/}\n                {edges.length > 0 && !selectedNode &&(\n                <h3>Algorithms</h3>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickTraversal}>Traversals →</button>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickMST}>MSTs →</button>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickPath}>Paths →</button>)}\n\n\n                {/* Specific Algorithms */}\n                {clickedMST && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={animateKruskalsAlgorithm}>Kruskall</button>)}\n                {clickedMST && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startPrim}>Prim</button>)}\n\n                {clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\", backgroundColor: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startDFS}>DFS</button>)}\n                {clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startBFS}>BFS</button>)}\n\n                {clickedPaths && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startShortestPath}>Shortest Path</button>)}\n                {clickedPaths && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startTSP}>TSP</button>)}\n                \n                {!clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={graphColoring}>Graph Coloring</button>)}\n                {!isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={findConnectedComponents}>Connected Components</button>)}\n                {isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={findStrongComponents}>Strong Components</button>)}\n\n                {/* Back Button */}\n                {(clickedTraversal || clickedMST || clickedPaths) && !selectedNode && (\n                <button className=\"graph-button\" onClick={goBack}>← Back</button>)} \n                \n            </div>\n        </div>\n        </GraphsProvider>\n    );\n};\n\nexport default Graphs;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACzD,OAAOC,SAAS,MAAM,iBAAiB;AACvC,SAASC,cAAc,QAAQ,iBAAiB;AAChD,SAASC,cAAc,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAGjD,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAMC,WAAW,GAAGP,cAAc,CAAC,CAAC;;EAEpC;EACA,MAAMQ,sBAAsB,GAAG,WAAW;EAC1C,MAAMC,YAAY,GAAG,qDAAqD;EAC1E,MAAMC,aAAa,GAAG,MAAM;EAC5B,MAAMC,gBAAgB,GAAG,KAAK;EAC9B,MAAMC,gBAAgB,GAAG,MAAM;;EAE/B;EACAf,SAAS,CAAC,MAAM;IACZgB,aAAa,CAACC,OAAO,GAAGC,UAAU;EACtC,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;;EAEhB;EACAlB,SAAS,CAAC,MAAM;IACZmB,WAAW,CAACF,OAAO,GAAGG,QAAQ;EAClC,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACApB,SAAS,CAAC,MAAM;IACZqB,cAAc,CAACJ,OAAO,GAAGI,cAAc;EAC3C,CAAC,EAAE,CAACA,cAAc,CAAC,CAAC;;EAEpB;EACA,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACrBC,eAAe,CAAC,EAAE,CAAC;IACnBC,eAAe,CAAC,EAAE,CAAC;IACnBC,OAAO,CAACb,YAAY,CAAC;IACrBc,mBAAmB,CAAC,KAAK,CAAC;IAC1BC,cAAc,CAAC,CAAC,CAAC;IACjBN,cAAc,CAACJ,OAAO,GAAG,CAAC;IAC1BW,eAAe,CAAC,KAAK,CAAC;IACtBC,mBAAmB,CAAC,IAAI,CAAC;EAC7B,CAAC;;EAED;EACA,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,IAAGC,gBAAgB,EAAC;MAChB;IACJ;IAEAC,kBAAkB,CAAC,IAAI,CAAC;EAC5B,CAAC;;EAED;EACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACtB,IAAGF,gBAAgB,EAAC;MAChB;IACJ;IAEAG,aAAa,CAAC,IAAI,CAAC;EACvB,CAAC;;EAED;EACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACvB,IAAGJ,gBAAgB,EAAC;MAChB;IACJ;IAEAK,eAAe,CAAC,IAAI,CAAC;EACzB,CAAC;;EAED;EACA,MAAMC,MAAM,GAAGA,CAAA,KAAM;IAEjB,IAAGN,gBAAgB,IAAIO,cAAc,EAAC;MAClC;IACJ;IAEAJ,aAAa,CAAC,KAAK,CAAC;IACpBF,kBAAkB,CAAC,KAAK,CAAC;IACzBI,eAAe,CAAC,KAAK,CAAC;IACtBV,mBAAmB,CAAC,KAAK,CAAC;IAC1BD,OAAO,CAACb,YAAY,CAAC;EACzB,CAAC;;EAED;EACA,MAAM2B,QAAQ,GAAGA,CAAA,KAAM;IACnB,IAAGpB,WAAW,CAACF,OAAO,EAAC;MACnBuB,aAAa,CAAC,IAAI,CAAC;MACnB,IAAGrB,WAAW,CAACF,OAAO,EAAC;QACnBU,cAAc,CAACc,IAAI,IAAI;UACnB,MAAMC,IAAI,GAAGD,IAAI,GAAG,CAAC;UACrBpB,cAAc,CAACJ,OAAO,GAAGyB,IAAI;UAC7B,OAAOA,IAAI;QACf,CAAC,CAAC;MACN;MACAC,WAAW,CAAC,KAAK,CAAC;MAClBxB,WAAW,CAACF,OAAO,GAAG,KAAK;IAC/B;EACJ,CAAC;;EAED;EACA,MAAM2B,eAAe,GAAGA,CAAA,KAAM;IAC1B,IAAIzB,WAAW,CAACF,OAAO,EAAE;MACrBuB,aAAa,CAAC,KAAK,CAAC;MACpBG,WAAW,CAAC,KAAK,CAAC;MAClBxB,WAAW,CAACF,OAAO,GAAG,KAAK;MAC3B,QAAQ4B,gBAAgB;QACpB,KAAK,KAAK;UACNpB,OAAO,CAAC,oBAAoB,CAAC;UAC7B;QACJ,KAAK,KAAK;UACNA,OAAO,CAAC,oBAAoB,CAAC;UAC7B;QACJ,KAAK,UAAU;UACXA,OAAO,CAAC,qCAAqC,CAAC;UAC9C;QACJ,KAAK,MAAM;UACPA,OAAO,CAAC,iCAAiC,CAAC;UAC1C;QACJ,KAAK,IAAI;UACLA,OAAO,CAAC,wCAAwC,CAAC;UACjD;QACJ,KAAK,KAAK;UACNA,OAAO,CAAC,oBAAoB,CAAC;UAC7B;QACJ,KAAK,WAAW;UACZA,OAAO,CAAC,oCAAoC,CAAC;UAC7C;QACJ,KAAK,QAAQ;UACTA,OAAO,CAAC,+BAA+B,CAAC;UACxC;MACJ;IACR,CAAC,MAAM;MACHe,aAAa,CAAC,KAAK,CAAC;MACpBG,WAAW,CAAC,IAAI,CAAC;MACjBxB,WAAW,CAACF,OAAO,GAAG,IAAI;MAC1BQ,OAAO,CAAC,qBAAqB,CAAC;IAClC;EACJ,CAAC;;EAED;EACA,MAAMqB,eAAe,GAAGA,CAAA,KAAM;IAC1B,IAAGf,gBAAgB,EAAC;MAChB;IACJ;IACA,IAAIgB,UAAU,EAAE;MACZ,MAAMC,iBAAiB,GAAG,EAAE;MAC5B,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;MAEzBC,KAAK,CAACC,OAAO,CAACC,IAAI,IAAI;QAClB,MAAMC,OAAO,GAAG,GAAGC,IAAI,CAACC,GAAG,CAACH,IAAI,CAACI,IAAI,CAACC,EAAE,EAAEL,IAAI,CAACM,EAAE,CAACD,EAAE,CAAC,IAAIH,IAAI,CAACK,GAAG,CAACP,IAAI,CAACI,IAAI,CAACC,EAAE,EAAEL,IAAI,CAACM,EAAE,CAACD,EAAE,CAAC,EAAE;QAC7F,IAAI,CAACT,OAAO,CAACY,GAAG,CAACP,OAAO,CAAC,EAAE;UACvBL,OAAO,CAACa,GAAG,CAACR,OAAO,CAAC;UACpBN,iBAAiB,CAACe,IAAI,CAACV,IAAI,CAAC;QAChC;MACJ,CAAC,CAAC;MAEF,MAAMW,UAAU,GAAG,CAAC,CAAC;MACrBhB,iBAAiB,CAACI,OAAO,CAACC,IAAI,IAAI;QAC9B,IAAI,CAACW,UAAU,CAACX,IAAI,CAACI,IAAI,CAACC,EAAE,CAAC,EAAEM,UAAU,CAACX,IAAI,CAACI,IAAI,CAACC,EAAE,CAAC,GAAG,EAAE;QAC5D,IAAI,CAACM,UAAU,CAACX,IAAI,CAACM,EAAE,CAACD,EAAE,CAAC,EAAEM,UAAU,CAACX,IAAI,CAACM,EAAE,CAACD,EAAE,CAAC,GAAG,EAAE;QACxDM,UAAU,CAACX,IAAI,CAACI,IAAI,CAACC,EAAE,CAAC,CAACK,IAAI,CAACV,IAAI,CAACM,EAAE,CAACD,EAAE,CAAC;QACzCM,UAAU,CAACX,IAAI,CAACM,EAAE,CAACD,EAAE,CAAC,CAACK,IAAI,CAACV,IAAI,CAACI,IAAI,CAACC,EAAE,CAAC;MAC7C,CAAC,CAAC;MAEFO,QAAQ,CAACjB,iBAAiB,CAAC;MAC3BkB,UAAU,CAACF,UAAU,CAAC;IAC1B;IACAG,aAAa,CAAC,CAACpB,UAAU,CAAC;EAC9B,CAAC;;EAED;EACA,oBACI1C,OAAA,CAACH,cAAc;IAAAkE,QAAA,eACf/D,OAAA;MAAKgE,SAAS,EAAC,gBAAgB;MAAAD,QAAA,gBAC3B/D,OAAA;QAAKgE,SAAS,EAAC,kBAAkB;QAAAD,QAAA,gBAC7B/D,OAAA;UAAA+D,QAAA,EAAI;QAAc;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EAGtBC,YAAY,iBACbrE,OAAA;UAAQgE,SAAS,EAAC,cAAc;UAACM,OAAO,EAAEC,aAAc;UAAAR,QAAA,EAAC;QAAQ;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAE,EAC1EC,YAAY,iBACbrE,OAAA;UAAQgE,SAAS,EAAC,cAAc;UAACM,OAAO,EAAEE,UAAW;UAAAT,QAAA,EAAC;QAAW;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAE,EAG1E,CAACC,YAAY,iBACdrE,OAAA;UAAQgE,SAAS,EAAC,cAAc;UAACM,OAAO,EAAEG,OAAQ;UAAAV,QAAA,EAAC;QAAQ;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAE,EACpE,CAACC,YAAY,iBACdrE,OAAA;UAAQgE,SAAS,EAAC,cAAc;UAACM,OAAO,EAAEI,aAAc;UAAAX,QAAA,EAAC;QAAc;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAE,EAChF,CAACC,YAAY,IAAIM,KAAK,CAACC,MAAM,GAAG,CAAC,iBAClC5E,OAAA;UAAQgE,SAAS,EAAC,cAAc;UAACM,OAAO,EAAEO,UAAW;UAAAd,QAAA,EAAC;QAAW;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAE,EAG1E,CAACC,YAAY,iBACVrE,OAAA;UAAA+D,QAAA,EAAI;QAAY;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAE,EACzB,CAACC,YAAY,iBACVrE,OAAA;UAAQgE,SAAS,EAAC,cAAc;UAACM,OAAO,EAAE7B,eAAgB;UAAAsB,QAAA,EACrDrB,UAAU,GAAG,gBAAgB,GAAG;QAAc;UAAAuB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3C,CAAE,EACb,CAACC,YAAY,IAAIvB,KAAK,CAAC8B,MAAM,GAAG,CAAC,iBAC9B5E,OAAA;UAAQgE,SAAS,EAAC,cAAc;UAACM,OAAO,EAAEA,CAAA,KAAM;YAAC,IAAGxB,KAAK,CAAC8B,MAAM,GAAC,CAAC,EAAC;cAACE,cAAc,CAAC,CAACC,WAAW,CAAC;YAAA;UAAC,CAAE;UAAAhB,QAAA,EAC9FgB,WAAW,GAAG,cAAc,GAAG;QAAc;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1C,CAAE,EACb,CAACC,YAAY,IAAIvB,KAAK,CAAC8B,MAAM,GAAG,CAAC,iBAClC5E,OAAA;UAAQgE,SAAS,EAAC,cAAc;UAACM,OAAO,EAAEU,iBAAkB;UAAAjB,QAAA,EAAC;QAAW;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAE,EAGjFa,gBAAgB,IAAI,CAACC,YAAY,iBAC9BlF,OAAA,CAAAE,SAAA;UAAA6D,QAAA,gBACI/D,OAAA;YAAA+D,QAAA,EAAI;UAAO;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAChBpE,OAAA;YAAQgE,SAAS,EAAC,cAAc;YAACM,OAAO,EAAEpC,QAAS;YAAA6B,QAAA,EAAC;UAAS;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACtEpE,OAAA;YAAQgE,SAAS,EAAC,cAAc;YAACM,OAAO,EAAE/B,eAAgB;YAAAwB,QAAA,EACpD,CAAChD,QAAQ,IAAIF,UAAU,KAAK,CAACqE,YAAY,GAAI,MAAM,GAAG;UAAO;YAAAjB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3D,CAAC;QAAA,eACX,CACL;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEA,CAAC,eAENpE,OAAA;QAAKgE,SAAS,EAAC,eAAe;QAAAD,QAAA,gBAC1B/D,OAAA;UAAKgE,SAAS,EAAC,kBAAkB;UAAAD,QAAA,gBAC7B/D,OAAA;YAAIgE,SAAS,EAAC,cAAc;YAAAD,QAAA,EAAC;UAAe;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACjDpE,OAAA;YAAKgE,SAAS,EAAC,gBAAgB;YAAAD,QAAA,gBAC3B/D,OAAA;cAAA+D,QAAA,EAAI;YAAI;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACbpE,OAAA;cACImF,IAAI,EAAC,OAAO;cACZhC,GAAG,EAAC,KAAK;cACTI,GAAG,EAAC,MAAM;cACV6B,IAAI,EAAC,KAAK;cACVC,KAAK,EAAEC,WAAY;cACnBC,QAAQ,EAAEC;YAAmB;cAAAvB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChC,CAAC,eACFpE,OAAA;cAAA+D,QAAA,EAAI;YAAI;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACZ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eACNpE,OAAA;UAAKgE,SAAS,EAAC,WAAW;UAAAD,QAAA,gBAC1B/D,OAAA;YAAKgE,SAAS,EAAC,WAAW;YAACyB,KAAK,EAAE;cAAEC,QAAQ,EAAE,UAAU;cAAEC,KAAK,EAAE,MAAM;cAAEC,MAAM,EAAE;YAAO,CAAE;YAAA7B,QAAA,EACrFjB,KAAK,CAAC+C,GAAG,CAAC,CAAC7C,IAAI,EAAE8C,KAAK,KAAK;cAAA,IAAAC,kBAAA,EAAAC,mBAAA,EAAAC,mBAAA;cACxB,MAAMC,QAAQ,GAAGC,iBAAiB,CAACnD,IAAI,CAAC;cACxC,MAAM;gBAAEoD,KAAK;gBAAEC;cAAQ,CAAC,GAAGC,cAAc,CAACtD,IAAI,CAAC;cAC/C,MAAMuD,WAAW,GAAG,EAAE;cACtB,MAAMC,UAAU,GAAG,EAAE;cACrB,MAAMC,UAAU,GAAG,EAAE;cAGrB,MAAMC,EAAE,GAAG1D,IAAI,CAACM,EAAE,CAACqD,CAAC,GAAG3D,IAAI,CAACI,IAAI,CAACuD,CAAC;cAClC,MAAMC,EAAE,GAAG5D,IAAI,CAACM,EAAE,CAACuD,CAAC,GAAG7D,IAAI,CAACI,IAAI,CAACyD,CAAC;cAClC,MAAMjC,MAAM,GAAG1B,IAAI,CAAC4D,IAAI,CAACJ,EAAE,GAAGA,EAAE,GAAGE,EAAE,GAAGA,EAAE,CAAC;cAC3C,MAAMG,MAAM,GAAGL,EAAE,GAAG9B,MAAM;cAC1B,MAAMoC,MAAM,GAAGJ,EAAE,GAAGhC,MAAM;cAE1B,MAAMqC,KAAK,GAAGjE,IAAI,CAACM,EAAE,CAACqD,CAAC,GAAGF,UAAU,GAAGM,MAAM;cAC7C,MAAMG,KAAK,GAAGlE,IAAI,CAACM,EAAE,CAACuD,CAAC,GAAGJ,UAAU,GAAGO,MAAM;cAE7C,MAAMG,SAAS,GAAGrE,KAAK,CAACsE,MAAM,CAACC,CAAC,IAC3BA,CAAC,CAACjE,IAAI,CAACC,EAAE,KAAKL,IAAI,CAACI,IAAI,CAACC,EAAE,IAAIgE,CAAC,CAAC/D,EAAE,CAACD,EAAE,KAAKL,IAAI,CAACM,EAAE,CAACD,EAAE,IACpDgE,CAAC,CAACjE,IAAI,CAACC,EAAE,KAAKL,IAAI,CAACM,EAAE,CAACD,EAAE,IAAIgE,CAAC,CAAC/D,EAAE,CAACD,EAAE,KAAKL,IAAI,CAACI,IAAI,CAACC,EACvD,CAAC,CAACuB,MAAM;cAER,IAAI0C,OAAO,GAAG,CAAC;cACf,IAAIC,OAAO,GAAG,CAAC;cAEf,IAAIJ,SAAS,GAAG,CAAC,EAAE;gBACfG,OAAO,GAAG,CAAC,GAAGN,MAAM;gBACpBO,OAAO,GAAG,CAAC,CAAC,GAAGR,MAAM;cACzB;cAEA,MAAMS,aAAa,GAAGxE,IAAI,CAACI,IAAI,CAACuD,CAAC,GAAG,EAAE,GAAGW,OAAO;cAChD,MAAMG,aAAa,GAAGzE,IAAI,CAACI,IAAI,CAACyD,CAAC,GAAG,EAAE,GAAGU,OAAO;cAChD,MAAMG,WAAW,GAAGT,KAAK,GAAG,EAAE,GAAGK,OAAO;cACxC,MAAMK,WAAW,GAAGT,KAAK,GAAG,EAAE,GAAGK,OAAO;cAExC,MAAMK,UAAU,GAAGX,KAAK,GAAGK,OAAO,GAAG,EAAE;cACvC,MAAMO,UAAU,GAAGX,KAAK,GAAGK,OAAO,GAAG,EAAE;cAEvC,IAAIO,OAAO,EAAEC,OAAO,EAAEC,OAAO,EAAEC,OAAO;cACtC,IAAI5B,OAAO,EAAE;gBACTyB,OAAO,GAAGF,UAAU,GAAGrB,WAAW,GAAGrD,IAAI,CAACgF,GAAG,CAAC,CAAC9B,KAAK,GAAGI,UAAU,IAAItD,IAAI,CAACiF,EAAE,GAAG,GAAG,CAAC;gBACnFJ,OAAO,GAAGF,UAAU,GAAGtB,WAAW,GAAGrD,IAAI,CAACkF,GAAG,CAAC,CAAChC,KAAK,GAAGI,UAAU,IAAItD,IAAI,CAACiF,EAAE,GAAG,GAAG,CAAC;gBACnFH,OAAO,GAAGJ,UAAU,GAAGrB,WAAW,GAAGrD,IAAI,CAACgF,GAAG,CAAC,CAAC9B,KAAK,GAAGI,UAAU,IAAItD,IAAI,CAACiF,EAAE,GAAG,GAAG,CAAC;gBACnFF,OAAO,GAAGJ,UAAU,GAAGtB,WAAW,GAAGrD,IAAI,CAACkF,GAAG,CAAC,CAAChC,KAAK,GAAGI,UAAU,IAAItD,IAAI,CAACiF,EAAE,GAAG,GAAG,CAAC;cACvF,CAAC,MAAM;gBACHL,OAAO,GAAGF,UAAU,GAAGrB,WAAW,GAAGrD,IAAI,CAACgF,GAAG,CAAC,CAAC9B,KAAK,GAAGI,UAAU,IAAItD,IAAI,CAACiF,EAAE,GAAG,GAAG,CAAC;gBACnFJ,OAAO,GAAGF,UAAU,GAAGtB,WAAW,GAAGrD,IAAI,CAACkF,GAAG,CAAC,CAAChC,KAAK,GAAGI,UAAU,IAAItD,IAAI,CAACiF,EAAE,GAAG,GAAG,CAAC;gBACnFH,OAAO,GAAGJ,UAAU,GAAGrB,WAAW,GAAGrD,IAAI,CAACgF,GAAG,CAAC,CAAC9B,KAAK,GAAGI,UAAU,IAAItD,IAAI,CAACiF,EAAE,GAAG,GAAG,CAAC;gBACnFF,OAAO,GAAGJ,UAAU,GAAGtB,WAAW,GAAGrD,IAAI,CAACkF,GAAG,CAAC,CAAChC,KAAK,GAAGI,UAAU,IAAItD,IAAI,CAACiF,EAAE,GAAG,GAAG,CAAC;cACvF;cAGA,oBACInI,OAAA,CAACR,KAAK,CAACS,QAAQ;gBAAA8D,QAAA,gBACX/D,OAAA;kBACIqI,EAAE,EAAEb,aAAc;kBAClBc,EAAE,EAAEb,aAAc;kBAClBc,EAAE,EAAEb,WAAY;kBAChBc,EAAE,EAAEb,WAAY;kBAChBc,MAAM,EAAE,EAAA1C,kBAAA,GAAA2C,YAAY,CAACC,IAAI,CAACtB,CAAC,IAAIA,CAAC,CAACjE,IAAI,CAACC,EAAE,KAAKL,IAAI,CAACI,IAAI,CAACC,EAAE,IAAIgE,CAAC,CAAC/D,EAAE,CAACD,EAAE,KAAKL,IAAI,CAACM,EAAE,CAACD,EAAE,CAAC,cAAA0C,kBAAA,uBAA5EA,kBAAA,CAA8E6C,KAAK,MAAK3G,cAAc,GAAG,KAAK,GAAG,MAAM,CAAE;kBACjI4G,WAAW,EAAE5G,cAAc,GAAG,CAAC,GAAG,CAAE;kBACpCqC,OAAO,EAAEA,CAAA,KAAMwE,eAAe,CAAC9F,IAAI;gBAAE;kBAAAiB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACxC,CAAC,EACD1B,UAAU,iBACR1C,OAAA,CAAAE,SAAA;kBAAA6D,QAAA,gBACK/D,OAAA;oBACIqI,EAAE,EAAEX,WAAY;oBAChBY,EAAE,EAAEX,WAAY;oBAChBY,EAAE,EAAET,OAAQ;oBACZU,EAAE,EAAET,OAAQ;oBACZU,MAAM,EAAE,EAAAzC,mBAAA,GAAA0C,YAAY,CAACC,IAAI,CAACtB,CAAC,IAAIA,CAAC,CAACjE,IAAI,CAACC,EAAE,KAAKL,IAAI,CAACI,IAAI,CAACC,EAAE,IAAIgE,CAAC,CAAC/D,EAAE,CAACD,EAAE,KAAKL,IAAI,CAACM,EAAE,CAACD,EAAE,CAAC,cAAA2C,mBAAA,uBAA5EA,mBAAA,CAA8E4C,KAAK,MAAK3G,cAAc,GAAG,KAAK,GAAG,MAAM,CAAE;oBACjI4G,WAAW,EAAE5G,cAAc,GAAG,CAAC,GAAG;kBAAE;oBAAAgC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACvC,CAAC,eACFpE,OAAA;oBACGqI,EAAE,EAAEX,WAAY;oBAChBY,EAAE,EAAEX,WAAY;oBAChBY,EAAE,EAAEP,OAAQ;oBACZQ,EAAE,EAAEP,OAAQ;oBACXQ,MAAM,EAAE,EAAAxC,mBAAA,GAAAyC,YAAY,CAACC,IAAI,CAACtB,CAAC,IAAIA,CAAC,CAACjE,IAAI,CAACC,EAAE,KAAKL,IAAI,CAACI,IAAI,CAACC,EAAE,IAAIgE,CAAC,CAAC/D,EAAE,CAACD,EAAE,KAAKL,IAAI,CAACM,EAAE,CAACD,EAAE,CAAC,cAAA4C,mBAAA,uBAA5EA,mBAAA,CAA8E2C,KAAK,MAAK3G,cAAc,GAAG,KAAK,GAAG,MAAM,CAAE;oBACjI4G,WAAW,EAAE5G,cAAc,GAAG,CAAC,GAAG;kBAAE;oBAAAgC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACvC,CAAC;gBAAA,eACJ,CACL,EACAW,WAAW,iBACR/E,OAAA;kBACI2G,CAAC,EAAET,QAAQ,CAACS,CAAC,GAAG,EAAG;kBACnBE,CAAC,EAAEM,SAAS,GAAG,CAAC,GAAGjB,QAAQ,CAACW,CAAC,GAAG,CAAC,GAAGX,QAAQ,CAACW,CAAC,GAAG,CAAE;kBACnDkC,IAAI,EAAC,OAAO;kBACZC,QAAQ,EAAC,IAAI;kBACbC,SAAS,EAAE,UAAU7C,KAAK,KAAKF,QAAQ,CAACS,CAAC,GAAG,EAAE,KAAKT,QAAQ,CAACW,CAAC,GAAG,EAAE,GAAI;kBACtEqC,UAAU,EAAC,QAAQ;kBAAAnF,QAAA,EAElBb,IAAI,CAACiG,KAAK,CAACC,mBAAmB,CAACpG,IAAI,CAAC;gBAAC;kBAAAiB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACpC,CAAE;cAAA,GAxCK0B,KAAK;gBAAA7B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAyCV,CAAC;YAEzB,CAAC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CAAC,EACDO,KAAK,CAACkB,GAAG,CAACwD,IAAI;YAAA,IAAAC,YAAA,EAAAC,kBAAA;YAAA,oBACXvJ,OAAA,CAACJ,SAAS;cAEN8F,QAAQ,EAAE;gBAAEiB,CAAC,EAAE0C,IAAI,CAAC1C,CAAC;gBAAEE,CAAC,EAAEwC,IAAI,CAACxC;cAAE,CAAE;cACnC2C,MAAM,EAAC,QAAQ;cACfC,OAAO,EAAEC,eAAgB;cACzBC,MAAM,EAAEA,CAACtC,CAAC,EAAEuC,IAAI,KAAKC,UAAU,CAACxC,CAAC,EAAEuC,IAAI,EAAEP,IAAI,CAAE;cAC/CS,MAAM,EAAEC,cAAe;cAAAhG,QAAA,eAEvB/D,OAAA;gBACIgE,SAAS,EAAC,YAAY;gBACtBM,OAAO,EAAEA,CAAA,KAAM0F,eAAe,CAACX,IAAI,CAAE;gBACrC5D,KAAK,EAAE;kBACHwE,MAAM,EAAGC,KAAK,IAAIC,KAAK,IAAIC,MAAM,IAAIC,KAAK,IAAIC,cAAc,GAAKC,SAAS,IAAIA,SAAS,CAAClH,EAAE,KAAKgG,IAAI,CAAChG,EAAE,GAAG,MAAM,GAAG,eAAe,GAAKgB,YAAY,IAAIA,YAAY,CAAChB,EAAE,KAAKgG,IAAI,CAAChG,EAAE,GAAG,eAAe,GAAG,MAAO;kBAC7MmH,eAAe,EACfnB,IAAI,CAAChG,EAAE,OAAAiG,YAAA,GAAKmB,WAAW,cAAAnB,YAAA,uBAAXA,YAAA,CAAajG,EAAE,IAAG,KAAK,GACnCqH,YAAY,CAACC,IAAI,CAACC,EAAE,IAAIA,EAAE,CAACvH,EAAE,KAAKgG,IAAI,CAAChG,EAAE,CAAC,GACrC,EAAAkG,kBAAA,GAAAmB,YAAY,CAAC/B,IAAI,CAACiC,EAAE,IAAIA,EAAE,CAACvH,EAAE,KAAKgG,IAAI,CAAChG,EAAE,CAAC,cAAAkG,kBAAA,uBAA1CA,kBAAA,CAA4CX,KAAK,KAAIiC,eAAe,CAACC,UAAU,CAACC,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACL,IAAI,CAACM,CAAC,IAAIA,CAAC,CAAC5H,EAAE,KAAKgG,IAAI,CAAChG,EAAE,CAAC,CAAC,GAAGwH,eAAe,CAACjG,MAAM,CAAC,IAAI,MAAM,GACtK,OAAO;kBACbsG,aAAa,EAAE,MAAM;kBACrBxF,QAAQ,EAAE;gBACd;cAAE;gBAAAzB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAED;YAAC,GArBDiF,IAAI,CAAChG,EAAE;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAsBL,CAAC;UAAA,CACf,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,eACNpE,OAAA;UAAI,cAAW,aAAa;UAAA+D,QAAA,EAAEoH;QAAI;UAAAlH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC,CAAC,eAENpE,OAAA;QAAKgE,SAAS,EAAC,kBAAkB;QAAAD,QAAA,GAE5BjB,KAAK,CAAC8B,MAAM,GAAG,CAAC,IAAI,CAACP,YAAY,iBAClCrE,OAAA;UAAA+D,QAAA,EAAI;QAAU;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAE,EACnBtB,KAAK,CAAC8B,MAAM,GAAG,CAAC,IAAI,CAACP,YAAY,IAAI,CAAC+G,gBAAgB,IAAI,CAACC,UAAU,IAAI,CAACC,YAAY,iBACvFtL,OAAA;UAAQgE,SAAS,EAAC,cAAc;UAACM,OAAO,EAAE7C,iBAAkB;UAAAsC,QAAA,EAAC;QAAY;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAE,EAClFtB,KAAK,CAAC8B,MAAM,GAAG,CAAC,IAAI,CAACP,YAAY,IAAI,CAAC+G,gBAAgB,IAAI,CAACC,UAAU,IAAI,CAACC,YAAY,iBACvFtL,OAAA;UAAQgE,SAAS,EAAC,cAAc;UAACM,OAAO,EAAE1C,WAAY;UAAAmC,QAAA,EAAC;QAAM;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAE,EACtEtB,KAAK,CAAC8B,MAAM,GAAG,CAAC,IAAI,CAACP,YAAY,IAAI,CAAC+G,gBAAgB,IAAI,CAACC,UAAU,IAAI,CAACC,YAAY,iBACvFtL,OAAA;UAAQgE,SAAS,EAAC,cAAc;UAACM,OAAO,EAAExC,YAAa;UAAAiC,QAAA,EAAC;QAAO;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAE,EAIxEiH,UAAU,IAAI,CAAChH,YAAY,IAAIvB,KAAK,CAAC8B,MAAM,GAAG,CAAC,iBAChD5E,OAAA;UAAQyF,KAAK,EAAE;YAACwE,MAAM,EAACzH,gBAAgB,KAAK,UAAU,GAAGlC,sBAAsB,GAAG,EAAE;YAAGkK,eAAe,EAAEhI,gBAAgB,KAAK,UAAU,GAAGlC,sBAAsB,GAAG;UAAG,CAAE;UAAA0D,SAAS,EAAC,cAAc;UAACM,OAAO,EAAEiH,wBAAyB;UAAAxH,QAAA,EAAC;QAAQ;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAE,EACrPiH,UAAU,IAAI,CAAChH,YAAY,IAAIvB,KAAK,CAAC8B,MAAM,GAAG,CAAC,iBAChD5E,OAAA;UAAQyF,KAAK,EAAE;YAACwE,MAAM,EAACzH,gBAAgB,KAAK,MAAM,GAAGlC,sBAAsB,GAAG,EAAE;YAAGkK,eAAe,EAAEhI,gBAAgB,KAAK,MAAM,GAAGlC,sBAAsB,GAAG;UAAG,CAAE;UAAA0D,SAAS,EAAC,cAAc;UAACM,OAAO,EAAEkH,SAAU;UAAAzH,QAAA,EAAC;QAAI;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAE,EAE1NgH,gBAAgB,IAAI,CAAC/G,YAAY,IAAIvB,KAAK,CAAC8B,MAAM,GAAG,CAAC,iBACtD5E,OAAA;UAAQyF,KAAK,EAAE;YAACwE,MAAM,EAACzH,gBAAgB,KAAK,KAAK,GAAGlC,sBAAsB,GAAG,EAAE;YAAEkK,eAAe,EAAEhI,gBAAgB,KAAK,KAAK,GAAGlC,sBAAsB,GAAG;UAAG,CAAE;UAAA0D,SAAS,EAAC,cAAc;UAACM,OAAO,EAAEmH,QAAS;UAAA1H,QAAA,EAAC;QAAG;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAE,EACrNgH,gBAAgB,IAAI,CAAC/G,YAAY,IAAIvB,KAAK,CAAC8B,MAAM,GAAG,CAAC,iBACtD5E,OAAA;UAAQyF,KAAK,EAAE;YAACwE,MAAM,EAACzH,gBAAgB,KAAK,KAAK,GAAGlC,sBAAsB,GAAG,EAAE;YAAGkK,eAAe,EAAEhI,gBAAgB,KAAK,KAAK,GAAGlC,sBAAsB,GAAG;UAAG,CAAE;UAAA0D,SAAS,EAAC,cAAc;UAACM,OAAO,EAAEoH,QAAS;UAAA3H,QAAA,EAAC;QAAG;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAE,EAEtNkH,YAAY,IAAI,CAACjH,YAAY,IAAIvB,KAAK,CAAC8B,MAAM,GAAG,CAAC,iBAClD5E,OAAA;UAAQyF,KAAK,EAAE;YAACwE,MAAM,EAACzH,gBAAgB,KAAK,IAAI,GAAGlC,sBAAsB,GAAG,EAAE;YAAGkK,eAAe,EAAEhI,gBAAgB,KAAK,IAAI,GAAGlC,sBAAsB,GAAG;UAAG,CAAE;UAAA0D,SAAS,EAAC,cAAc;UAACM,OAAO,EAAEqH,iBAAkB;UAAA5H,QAAA,EAAC;QAAa;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAE,EACvOkH,YAAY,IAAI,CAACjH,YAAY,IAAIvB,KAAK,CAAC8B,MAAM,GAAG,CAAC,iBAClD5E,OAAA;UAAQyF,KAAK,EAAE;YAACwE,MAAM,EAACzH,gBAAgB,KAAK,KAAK,GAAGlC,sBAAsB,GAAG,EAAE;YAAGkK,eAAe,EAAEhI,gBAAgB,KAAK,KAAK,GAAGlC,sBAAsB,GAAG;UAAG,CAAE;UAAA0D,SAAS,EAAC,cAAc;UAACM,OAAO,EAAEsH,QAAS;UAAA7H,QAAA,EAAC;QAAG;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAE,EAEtN,CAACkH,YAAY,IAAI,CAACD,UAAU,IAAI,CAACD,gBAAgB,IAAI,CAAC/G,YAAY,IAAIvB,KAAK,CAAC8B,MAAM,GAAG,CAAC,iBACvF5E,OAAA;UAAQyF,KAAK,EAAE;YAACwE,MAAM,EAACzH,gBAAgB,KAAK,OAAO,GAAGlC,sBAAsB,GAAG,EAAE;YAAGkK,eAAe,EAAEhI,gBAAgB,KAAK,OAAO,GAAGlC,sBAAsB,GAAG;UAAG,CAAE;UAAA0D,SAAS,EAAC,cAAc;UAACM,OAAO,EAAEuH,aAAc;UAAA9H,QAAA,EAAC;QAAc;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAE,EAC1O,CAAC1B,UAAU,IAAI,CAAC4I,YAAY,IAAI,CAACD,UAAU,IAAI,CAACD,gBAAgB,IAAI,CAAC/G,YAAY,IAAIvB,KAAK,CAAC8B,MAAM,GAAG,CAAC,iBACtG5E,OAAA;UAAQyF,KAAK,EAAE;YAACwE,MAAM,EAACzH,gBAAgB,KAAK,WAAW,GAAGlC,sBAAsB,GAAG,EAAE;YAAGkK,eAAe,EAAEhI,gBAAgB,KAAK,WAAW,GAAGlC,sBAAsB,GAAG;UAAG,CAAE;UAAA0D,SAAS,EAAC,cAAc;UAACM,OAAO,EAAEwH,uBAAwB;UAAA/H,QAAA,EAAC;QAAoB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAE,EAClQ1B,UAAU,IAAI,CAAC4I,YAAY,IAAI,CAACD,UAAU,IAAI,CAACD,gBAAgB,IAAI,CAAC/G,YAAY,IAAIvB,KAAK,CAAC8B,MAAM,GAAG,CAAC,iBACrG5E,OAAA;UAAQyF,KAAK,EAAE;YAACwE,MAAM,EAACzH,gBAAgB,KAAK,WAAW,GAAGlC,sBAAsB,GAAG,EAAE;YAAGkK,eAAe,EAAEhI,gBAAgB,KAAK,WAAW,GAAGlC,sBAAsB,GAAG;UAAG,CAAE;UAAA0D,SAAS,EAAC,cAAc;UAACM,OAAO,EAAEyH,oBAAqB;UAAAhI,QAAA,EAAC;QAAiB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAE,EAG5P,CAACgH,gBAAgB,IAAIC,UAAU,IAAIC,YAAY,KAAK,CAACjH,YAAY,iBAClErE,OAAA;UAAQgE,SAAS,EAAC,cAAc;UAACM,OAAO,EAAEtC,MAAO;UAAA+B,QAAA,EAAC;QAAM;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAE;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEjE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAEzB,CAAC;AAAChE,EAAA,CAlZID,MAAM;EAAA,QACYL,cAAc;AAAA;AAAAkM,EAAA,GADhC7L,MAAM;AAoZZ,eAAeA,MAAM;AAAC,IAAA6L,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}