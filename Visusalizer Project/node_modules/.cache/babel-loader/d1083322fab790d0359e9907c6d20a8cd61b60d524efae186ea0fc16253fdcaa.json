{"ast":null,"code":"var _jsxFileName = \"/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport Draggable from 'react-draggable';\nimport { useGraphStates } from './GraphsContext';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GraphComponent = () => {\n  _s();\n  const {\n    nodes,\n    edges,\n    isStepMode,\n    isPaused,\n    setClickedTraveral,\n    setClickedMST,\n    setText,\n    setClickedPaths,\n    setIsStepMode,\n    isPausedRef,\n    currentStepRef,\n    isStepModeRef,\n    setCurrentStep,\n    runningAlgorithm,\n    componentColors,\n    setEdges,\n    algorithmRunning,\n    isRemovingEdge,\n    setAdjList,\n    GraphsProvider,\n    setAlgorithmRunning,\n    selectedNode,\n    isDirected,\n    handleAddEdge,\n    setIsPaused,\n    startNode,\n    removeNode,\n    generateGraph,\n    setIsDirected,\n    resetGraph,\n    setShowWeights,\n    showWeights,\n    startRemovingEdge,\n    algorithmStarted,\n    disablePause,\n    addNode,\n    sliderValue,\n    handleSliderChange,\n    calculateMidpoint,\n    calculateAngle,\n    visitedEdges,\n    handleEdgeClick,\n    calculateEdgeLength,\n    handleMouseDown,\n    handleDrag,\n    handleDragStop,\n    handleNodeClick,\n    isTSP,\n    isBFS,\n    isDFS,\n    isPrim,\n    isShortestPath,\n    currentNode,\n    visitedNodes,\n    components,\n    text,\n    clickedTraversal,\n    clickedMST,\n    clickedPaths,\n    animateKruskalsAlgorithm,\n    startPrim,\n    startDFS,\n    startBFS,\n    startShortestPath,\n    startTSP,\n    graphColoring,\n    findConnectedComponents,\n    findStrongComponents\n  } = useGraphStates();\n\n  // Constants for UI text and colors\n  const highlightedButtonColor = \"lightblue\";\n  const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n\n  // Use Effect to differentiate between modes\n  useEffect(() => {\n    isStepModeRef.current = isStepMode;\n  }, [isStepMode]);\n\n  // Use sEffect to allow pausing mid-alg\n  useEffect(() => {\n    isPausedRef.current = isPaused;\n  }, [isPaused]);\n\n  // Use Effect to allow stopping mid-alg\n  useEffect(() => {\n    currentStepRef.current = currentStepRef;\n  }, [currentStepRef]);\n\n  // Function to reset edges to default state\n  /*const resetEdges = () => {\n      setVisitedEdges([]);\n      setVisitedNodes([]);\n      setText(startingText);\n      setAlgorithmRunning(false);\n      setCurrentStep(0);\n      currentStepRef.current = 0;\n      setDisablePause(false);\n      setRunningAlgorithm(null);\n  };*/\n\n  // Function to set traversal mode\n  const setClickTraversal = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedTraveral(true);\n  };\n\n  // Function to set MST mode\n  const setClickMST = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedMST(true);\n  };\n\n  // Function to set Paths mode\n  const setClickPath = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedPaths(true);\n  };\n\n  // Functino to go back from algorithm selection\n  const goBack = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setClickedMST(false);\n    setClickedTraveral(false);\n    setClickedPaths(false);\n    setAlgorithmRunning(false);\n    setText(startingText);\n  };\n\n  // Function to step in the algorithm\n  const nextStep = () => {\n    if (isPausedRef.current) {\n      setIsStepMode(true);\n      if (isPausedRef.current) {\n        setCurrentStep(prev => {\n          const next = prev + 1;\n          currentStepRef.current = next;\n          return next;\n        });\n      }\n      setIsPaused(false);\n      isPausedRef.current = false;\n    }\n  };\n\n  // Function to toggle button \n  const togglePlayPause = () => {\n    if (isPausedRef.current) {\n      setIsStepMode(false);\n      setIsPaused(false);\n      isPausedRef.current = false;\n      switch (runningAlgorithm) {\n        case \"DFS\":\n          setText(\"DFS in progress...\");\n          break;\n        case \"BFS\":\n          setText(\"BFS in progress...\");\n          break;\n        case \"Kruskall\":\n          setText(\"Kruskall's Algorithm in progress...\");\n          break;\n        case \"Prim\":\n          setText(\"Prim's Algorithm in progress...\");\n          break;\n        case \"SP\":\n          setText(\"Shortest Path Algorithm in progress...\");\n          break;\n        case \"TSP\":\n          setText(\"TSP in progress...\");\n          break;\n        case \"Connected\":\n          setText(\"Connected Components in progress..\");\n          break;\n        case \"Colors\":\n          setText(\"Graph Coloring in progress...\");\n          break;\n      }\n    } else {\n      setIsStepMode(false);\n      setIsPaused(true);\n      isPausedRef.current = true;\n      setText(\"Algorithm is Paused\");\n    }\n  };\n\n  // Function to switch between directed and undirected graphs\n  const toggleGraphType = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    if (isDirected) {\n      const consolidatedEdges = [];\n      const edgeSet = new Set();\n      edges.forEach(edge => {\n        const edgeKey = `${Math.min(edge.from.id, edge.to.id)}-${Math.max(edge.from.id, edge.to.id)}`;\n        if (!edgeSet.has(edgeKey)) {\n          edgeSet.add(edgeKey);\n          consolidatedEdges.push(edge);\n        }\n      });\n      const newAdjList = {};\n      consolidatedEdges.forEach(edge => {\n        if (!newAdjList[edge.from.id]) newAdjList[edge.from.id] = [];\n        if (!newAdjList[edge.to.id]) newAdjList[edge.to.id] = [];\n        newAdjList[edge.from.id].push(edge.to.id);\n        newAdjList[edge.to.id].push(edge.from.id);\n      });\n      setEdges(consolidatedEdges);\n      setAdjList(newAdjList);\n    }\n    setIsDirected(!isDirected);\n  };\n\n  // JSX for rendering the component\n  return /*#__PURE__*/_jsxDEV(GraphsProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Graph Creation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 17\n        }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: handleAddEdge,\n          children: \"Add Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 17\n        }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: removeNode,\n          children: \"Remove Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 17\n        }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: addNode,\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 17\n        }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: generateGraph,\n          children: \"Generate Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 17\n        }, this), !selectedNode && nodes.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: resetGraph,\n          children: \"Reset Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 17\n        }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Edge Editing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: toggleGraphType,\n          children: isDirected ? 'Set Undirected' : 'Set Directed'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this), !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: () => {\n            if (edges.length > 0) {\n              setShowWeights(!showWeights);\n            }\n          },\n          children: showWeights ? 'Hide Weights' : 'Show Weights'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this), !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: startRemovingEdge,\n          children: \"Remove Edge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 17\n        }, this), algorithmStarted && !disablePause && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Control\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"graph-button\",\n            onClick: nextStep,\n            children: \"Next Step\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"graph-button\",\n            onClick: togglePlayPause,\n            children: (isPaused || isStepMode) && !disablePause ? \"Play\" : \"Pause\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"slider-label\",\n            children: \"Algorithm Speed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slider-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Slow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"100\",\n              max: \"2000\",\n              step: \"100\",\n              value: sliderValue,\n              onChange: handleSliderChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Fast\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"graph-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"edges-svg\",\n            style: {\n              position: 'absolute',\n              width: '100%',\n              height: '100%'\n            },\n            children: edges.map((edge, index) => {\n              var _visitedEdges$find, _visitedEdges$find2, _visitedEdges$find3;\n              const midpoint = calculateMidpoint(edge);\n              const {\n                angle,\n                flipped\n              } = calculateAngle(edge);\n              const arrowLength = 15;\n              const arrowAngle = 30;\n              const nodeRadius = 10;\n              const dx = edge.to.x - edge.from.x;\n              const dy = edge.to.y - edge.from.y;\n              const length = Math.sqrt(dx * dx + dy * dy);\n              const unitDx = dx / length;\n              const unitDy = dy / length;\n              const baseX = edge.to.x - nodeRadius * unitDx;\n              const baseY = edge.to.y - nodeRadius * unitDy;\n              const edgeCount = edges.filter(e => e.from.id === edge.from.id && e.to.id === edge.to.id || e.from.id === edge.to.id && e.to.id === edge.from.id).length;\n              let offsetX = 0;\n              let offsetY = 0;\n              if (edgeCount > 1) {\n                offsetX = 5 * unitDy;\n                offsetY = -5 * unitDx;\n              }\n              const adjustedFromX = edge.from.x + 10 + offsetX;\n              const adjustedFromY = edge.from.y + 10 + offsetY;\n              const adjustedToX = baseX + 10 + offsetX;\n              const adjustedToY = baseY + 10 + offsetY;\n              const arrowBaseX = baseX + offsetX + 10;\n              const arrowBaseY = baseY + offsetY + 10;\n              let arrowX1, arrowY1, arrowX2, arrowY2;\n              if (flipped) {\n                arrowX1 = arrowBaseX + arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                arrowY1 = arrowBaseY + arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n                arrowX2 = arrowBaseX + arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                arrowY2 = arrowBaseY + arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n              } else {\n                arrowX1 = arrowBaseX - arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                arrowY1 = arrowBaseY - arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n                arrowX2 = arrowBaseX - arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                arrowY2 = arrowBaseY - arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n              }\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                  x1: adjustedFromX,\n                  y1: adjustedFromY,\n                  x2: adjustedToX,\n                  y2: adjustedToY,\n                  stroke: ((_visitedEdges$find = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find === void 0 ? void 0 : _visitedEdges$find.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                  strokeWidth: isRemovingEdge ? 8 : 4,\n                  onClick: () => handleEdgeClick(edge)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 298,\n                  columnNumber: 33\n                }, this), isDirected && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                    x1: adjustedToX,\n                    y1: adjustedToY,\n                    x2: arrowX1,\n                    y2: arrowY1,\n                    stroke: ((_visitedEdges$find2 = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find2 === void 0 ? void 0 : _visitedEdges$find2.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                    strokeWidth: isRemovingEdge ? 8 : 4\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 309,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n                    x1: adjustedToX,\n                    y1: adjustedToY,\n                    x2: arrowX2,\n                    y2: arrowY2,\n                    stroke: ((_visitedEdges$find3 = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find3 === void 0 ? void 0 : _visitedEdges$find3.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                    strokeWidth: isRemovingEdge ? 8 : 4\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 317,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true), showWeights && /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: midpoint.x + 10,\n                  y: edgeCount > 1 ? midpoint.y + 2 : midpoint.y + 7,\n                  fill: \"black\",\n                  fontSize: \"12\",\n                  transform: `rotate(${angle}, ${midpoint.x + 10}, ${midpoint.y + 10})`,\n                  textAnchor: \"middle\",\n                  children: Math.round(calculateEdgeLength(edge))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 328,\n                  columnNumber: 37\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 297,\n                columnNumber: 29\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 17\n          }, this), nodes.map(node => {\n            var _visitedNodes$find;\n            return /*#__PURE__*/_jsxDEV(Draggable, {\n              position: {\n                x: node.x,\n                y: node.y\n              },\n              bounds: \"parent\",\n              onStart: handleMouseDown,\n              onDrag: (e, data) => handleDrag(e, data, node),\n              onStop: handleDragStop,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"graph-node\",\n                onClick: () => handleNodeClick(node),\n                style: {\n                  border: isTSP || isBFS || isPrim || isDFS || isShortestPath ? startNode && startNode.id === node.id ? 'none' : '2px solid red' : selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none',\n                  backgroundColor: node.id === (currentNode === null || currentNode === void 0 ? void 0 : currentNode.id) ? 'red' : visitedNodes.some(vn => vn.id === node.id) ? ((_visitedNodes$find = visitedNodes.find(vn => vn.id === node.id)) === null || _visitedNodes$find === void 0 ? void 0 : _visitedNodes$find.color) || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\" : 'black',\n                  pointerEvents: 'auto',\n                  position: 'absolute'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 351,\n                columnNumber: 29\n              }, this)\n            }, node.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 25\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          \"class-name\": \"status-text\",\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [edges.length > 0 && !selectedNode && /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Algorithms\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 17\n        }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: setClickTraversal,\n          children: \"Traversals \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 17\n        }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: setClickMST,\n          children: \"MSTs \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 17\n        }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: setClickPath,\n          children: \"Paths \\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 17\n        }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: animateKruskalsAlgorithm,\n          children: \"Kruskall\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 17\n        }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: startPrim,\n          children: \"Prim\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 17\n        }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: startDFS,\n          children: \"DFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 17\n        }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: startBFS,\n          children: \"BFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 17\n        }, this), clickedPaths && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: startShortestPath,\n          children: \"Shortest Path\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 17\n        }, this), clickedPaths && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: startTSP,\n          children: \"TSP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 17\n        }, this), !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: graphColoring,\n          children: \"Graph Coloring\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 17\n        }, this), !isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: findConnectedComponents,\n          children: \"Connected Components\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 17\n        }, this), isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            border: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",\n            backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\"\n          },\n          className: \"graph-button\",\n          onClick: findStrongComponents,\n          children: \"Strong Components\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 17\n        }, this), (clickedTraversal || clickedMST || clickedPaths) && !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: goBack,\n          children: \"\\u2190 Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 9\n  }, this);\n};\n_s(GraphComponent, \"0YITYP6r/j2qaOJ33Rcnu7YfESw=\", false, function () {\n  return [useGraphStates];\n});\n_c = GraphComponent;\nconst Graphs = () => {\n  return /*#__PURE__*/_jsxDEV(GraphsProvider, {\n    children: /*#__PURE__*/_jsxDEV(GraphComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 422,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Graphs;\nexport default Graphs;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphComponent\");\n$RefreshReg$(_c2, \"Graphs\");","map":{"version":3,"names":["React","useEffect","Draggable","useGraphStates","jsxDEV","_jsxDEV","Fragment","_Fragment","GraphComponent","_s","nodes","edges","isStepMode","isPaused","setClickedTraveral","setClickedMST","setText","setClickedPaths","setIsStepMode","isPausedRef","currentStepRef","isStepModeRef","setCurrentStep","runningAlgorithm","componentColors","setEdges","algorithmRunning","isRemovingEdge","setAdjList","GraphsProvider","setAlgorithmRunning","selectedNode","isDirected","handleAddEdge","setIsPaused","startNode","removeNode","generateGraph","setIsDirected","resetGraph","setShowWeights","showWeights","startRemovingEdge","algorithmStarted","disablePause","addNode","sliderValue","handleSliderChange","calculateMidpoint","calculateAngle","visitedEdges","handleEdgeClick","calculateEdgeLength","handleMouseDown","handleDrag","handleDragStop","handleNodeClick","isTSP","isBFS","isDFS","isPrim","isShortestPath","currentNode","visitedNodes","components","text","clickedTraversal","clickedMST","clickedPaths","animateKruskalsAlgorithm","startPrim","startDFS","startBFS","startShortestPath","startTSP","graphColoring","findConnectedComponents","findStrongComponents","highlightedButtonColor","startingText","current","setClickTraversal","setClickMST","setClickPath","goBack","nextStep","prev","next","togglePlayPause","toggleGraphType","consolidatedEdges","edgeSet","Set","forEach","edge","edgeKey","Math","min","from","id","to","max","has","add","push","newAdjList","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","type","step","value","onChange","style","position","width","height","map","index","_visitedEdges$find","_visitedEdges$find2","_visitedEdges$find3","midpoint","angle","flipped","arrowLength","arrowAngle","nodeRadius","dx","x","dy","y","sqrt","unitDx","unitDy","baseX","baseY","edgeCount","filter","e","offsetX","offsetY","adjustedFromX","adjustedFromY","adjustedToX","adjustedToY","arrowBaseX","arrowBaseY","arrowX1","arrowY1","arrowX2","arrowY2","cos","PI","sin","x1","y1","x2","y2","stroke","find","color","strokeWidth","fill","fontSize","transform","textAnchor","round","node","_visitedNodes$find","bounds","onStart","onDrag","data","onStop","border","backgroundColor","some","vn","findIndex","comp","n","pointerEvents","_c","Graphs","_c2","$RefreshReg$"],"sources":["/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js"],"sourcesContent":["import React, {useEffect } from 'react';\nimport Draggable from 'react-draggable';\nimport {useGraphStates } from './GraphsContext';\n\n\nconst GraphComponent = () => {\n    const {\n        nodes, edges, isStepMode, isPaused, setClickedTraveral, setClickedMST, setText, setClickedPaths,\n        setIsStepMode, isPausedRef, currentStepRef, isStepModeRef, setCurrentStep, runningAlgorithm, \n        componentColors, setEdges, algorithmRunning, isRemovingEdge, setAdjList, GraphsProvider, setAlgorithmRunning,\n        selectedNode, isDirected, handleAddEdge, setIsPaused, startNode, removeNode, generateGraph, setIsDirected, resetGraph,\n        setShowWeights, showWeights, startRemovingEdge, algorithmStarted, disablePause, addNode, sliderValue, handleSliderChange,\n        calculateMidpoint, calculateAngle, visitedEdges, handleEdgeClick, calculateEdgeLength, handleMouseDown, handleDrag, handleDragStop,\n        handleNodeClick, isTSP, isBFS, isDFS, isPrim, isShortestPath, currentNode, visitedNodes, components, text, clickedTraversal,\n        clickedMST, clickedPaths,animateKruskalsAlgorithm, startPrim, startDFS, startBFS, startShortestPath, startTSP, graphColoring,\n        findConnectedComponents, findStrongComponents\n    } = useGraphStates();\n    \n    // Constants for UI text and colors\n    const highlightedButtonColor = \"lightblue\";\n    const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n\n    // Use Effect to differentiate between modes\n    useEffect(() => {\n        isStepModeRef.current = isStepMode;\n    }, [isStepMode]);\n\n    // Use sEffect to allow pausing mid-alg\n    useEffect(() => {\n        isPausedRef.current = isPaused;\n    }, [isPaused]);\n\n    // Use Effect to allow stopping mid-alg\n    useEffect(() => {\n        currentStepRef.current = currentStepRef;\n    }, [currentStepRef]);\n\n    // Function to reset edges to default state\n    /*const resetEdges = () => {\n        setVisitedEdges([]);\n        setVisitedNodes([]);\n        setText(startingText);\n        setAlgorithmRunning(false);\n        setCurrentStep(0);\n        currentStepRef.current = 0;\n        setDisablePause(false);\n        setRunningAlgorithm(null);\n    };*/\n\n    // Function to set traversal mode\n    const setClickTraversal = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedTraveral(true);\n    }\n\n    // Function to set MST mode\n    const setClickMST = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedMST(true);\n    }\n\n    // Function to set Paths mode\n    const setClickPath = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedPaths(true);\n    }\n\n    // Functino to go back from algorithm selection\n    const goBack = () => {\n\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        \n        setClickedMST(false);\n        setClickedTraveral(false);\n        setClickedPaths(false);\n        setAlgorithmRunning(false);\n        setText(startingText);\n    }\n\n    // Function to step in the algorithm\n    const nextStep = () => {\n        if(isPausedRef.current){\n            setIsStepMode(true);\n            if(isPausedRef.current){\n                setCurrentStep(prev => {\n                    const next = prev + 1;\n                    currentStepRef.current = next;\n                    return next;\n                });\n            }\n            setIsPaused(false);\n            isPausedRef.current = false;\n        }\n    };\n\n    // Function to toggle button \n    const togglePlayPause = () => {\n        if (isPausedRef.current) {\n            setIsStepMode(false);\n            setIsPaused(false);\n            isPausedRef.current = false;\n            switch (runningAlgorithm) {\n                case \"DFS\":\n                    setText(\"DFS in progress...\")\n                    break;\n                case \"BFS\":\n                    setText(\"BFS in progress...\")\n                    break;\n                case \"Kruskall\":\n                    setText(\"Kruskall's Algorithm in progress...\")\n                    break;\n                case \"Prim\":\n                    setText(\"Prim's Algorithm in progress...\")\n                    break;\n                case \"SP\":\n                    setText(\"Shortest Path Algorithm in progress...\")\n                    break;\n                case \"TSP\":\n                    setText(\"TSP in progress...\")\n                    break;\n                case \"Connected\":\n                    setText(\"Connected Components in progress..\")\n                    break;\n                case \"Colors\":\n                    setText(\"Graph Coloring in progress...\")\n                    break;\n                }\n        } else {\n            setIsStepMode(false);\n            setIsPaused(true);\n            isPausedRef.current = true;\n            setText(\"Algorithm is Paused\");\n        }\n    };\n    \n    // Function to switch between directed and undirected graphs\n    const toggleGraphType = () => {\n        if(algorithmRunning){\n            return;\n        }\n        if (isDirected) {\n            const consolidatedEdges = [];\n            const edgeSet = new Set();\n    \n            edges.forEach(edge => {\n                const edgeKey = `${Math.min(edge.from.id, edge.to.id)}-${Math.max(edge.from.id, edge.to.id)}`;\n                if (!edgeSet.has(edgeKey)) {\n                    edgeSet.add(edgeKey);\n                    consolidatedEdges.push(edge);\n                }\n            });\n    \n            const newAdjList = {};\n            consolidatedEdges.forEach(edge => {\n                if (!newAdjList[edge.from.id]) newAdjList[edge.from.id] = [];\n                if (!newAdjList[edge.to.id]) newAdjList[edge.to.id] = [];\n                newAdjList[edge.from.id].push(edge.to.id);\n                newAdjList[edge.to.id].push(edge.from.id);\n            });\n    \n            setEdges(consolidatedEdges);\n            setAdjList(newAdjList);\n        }\n        setIsDirected(!isDirected);\n    }\n\n    // JSX for rendering the component\n    return (\n        <GraphsProvider>\n        <div className=\"main-container\">\n            <div className=\"button-container\">\n                <h3>Graph Creation</h3>\n\n                {/* Graph Creation and Updating when node selected */}\n                {selectedNode && (\n                <button className=\"graph-button\" onClick={handleAddEdge}>Add Edge</button>)}\n                {selectedNode && (\n                <button className=\"graph-button\" onClick={removeNode}>Remove Node</button>)}\n\n                {/* Graph Creation and Updating */}\n                {!selectedNode && (\n                <button className=\"graph-button\" onClick={addNode}>Add Node</button>)}\n                {!selectedNode && (\n                <button className=\"graph-button\" onClick={generateGraph}>Generate Graph</button>)}\n                {!selectedNode && nodes.length > 0 && (\n                <button className=\"graph-button\" onClick={resetGraph}>Reset Graph</button>)}\n\n                {/* Edge Editing */}\n                {!selectedNode && (\n                    <h3>Edge Editing</h3>)}\n                {!selectedNode && (\n                    <button className=\"graph-button\" onClick={toggleGraphType}>\n                        {isDirected ? 'Set Undirected' : 'Set Directed'}\n                    </button>)}\n                {!selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={() => {if(edges.length>0){setShowWeights(!showWeights)}}}>\n                        {showWeights ? 'Hide Weights' : 'Show Weights'}\n                    </button>)}\n                {!selectedNode && edges.length > 0 && (\n                <button className=\"graph-button\" onClick={startRemovingEdge}>Remove Edge</button>)}\n\n                \n                {algorithmStarted && !disablePause && (\n                    <>\n                        <h3>Control</h3>\n                        <button className=\"graph-button\" onClick={nextStep}>Next Step</button>\n                        <button className=\"graph-button\" onClick={togglePlayPause}>\n                            {((isPaused || isStepMode) && !disablePause) ? \"Play\" : \"Pause\"}\n                        </button>\n                    </>\n                )}\n\n            </div>\n                \n            <div className=\"graph-content\">\n                <div className=\"slider-container\">\n                    <h4 className=\"slider-label\">Algorithm Speed</h4>\n                    <div className=\"slider-content\">\n                        <h4>Slow</h4>\n                        <input \n                            type=\"range\" \n                            min=\"100\" \n                            max=\"2000\" \n                            step=\"100\" \n                            value={sliderValue} \n                            onChange={handleSliderChange}\n                        />\n                        <h4>Fast</h4>\n                    </div>\n                </div>\n                <div className=\"graph-box\">\n                <svg className=\"edges-svg\" style={{ position: 'absolute', width: '100%', height: '100%' }}>\n                    {edges.map((edge, index) => {\n                        const midpoint = calculateMidpoint(edge);\n                        const { angle, flipped } = calculateAngle(edge);\n                        const arrowLength = 15;\n                        const arrowAngle = 30;\n                        const nodeRadius = 10;\n                \n                        \n                        const dx = edge.to.x - edge.from.x;\n                        const dy = edge.to.y - edge.from.y;\n                        const length = Math.sqrt(dx * dx + dy * dy);\n                        const unitDx = dx / length;\n                        const unitDy = dy / length;\n                        \n                        const baseX = edge.to.x - nodeRadius * unitDx;\n                        const baseY = edge.to.y - nodeRadius * unitDy;\n                        \n                        const edgeCount = edges.filter(e => \n                            (e.from.id === edge.from.id && e.to.id === edge.to.id) || \n                            (e.from.id === edge.to.id && e.to.id === edge.from.id)\n                        ).length;\n\n                        let offsetX = 0;\n                        let offsetY = 0;\n\n                        if (edgeCount > 1) {\n                            offsetX = 5 * unitDy; \n                            offsetY = -5 * unitDx;\n                        }\n\n                        const adjustedFromX = edge.from.x + 10 + offsetX;\n                        const adjustedFromY = edge.from.y + 10 + offsetY;\n                        const adjustedToX = baseX + 10 + offsetX ;\n                        const adjustedToY = baseY + 10 + offsetY;\n\n                        const arrowBaseX = baseX + offsetX + 10;\n                        const arrowBaseY = baseY + offsetY + 10;\n                \n                        let arrowX1, arrowY1, arrowX2, arrowY2;\n                        if (flipped) {\n                            arrowX1 = arrowBaseX + arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                            arrowY1 = arrowBaseY + arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n                            arrowX2 = arrowBaseX + arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                            arrowY2 = arrowBaseY + arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n                        } else {\n                            arrowX1 = arrowBaseX - arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                            arrowY1 = arrowBaseY - arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n                            arrowX2 = arrowBaseX - arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                            arrowY2 = arrowBaseY - arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n                        }\n\n\n                        return (\n                            <React.Fragment key={index}>\n                                <line\n                                    x1={adjustedFromX}\n                                    y1={adjustedFromY}\n                                    x2={adjustedToX}\n                                    y2={adjustedToY}\n                                    stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                    strokeWidth={isRemovingEdge ? 8 : 4}\n                                    onClick={() => handleEdgeClick(edge)}\n                                />\n                                {isDirected && (\n                                   <>\n                                        <line\n                                            x1={adjustedToX}\n                                            y1={adjustedToY}\n                                            x2={arrowX1}\n                                            y2={arrowY1}\n                                            stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                            strokeWidth={isRemovingEdge ? 8 : 4}\n                                        />\n                                        <line\n                                           x1={adjustedToX}\n                                           y1={adjustedToY}\n                                           x2={arrowX2}\n                                           y2={arrowY2}\n                                            stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                            strokeWidth={isRemovingEdge ? 8 : 4}\n                                        />\n                                    </>\n                                )}\n                                {showWeights && (\n                                    <text\n                                        x={midpoint.x + 10}\n                                        y={edgeCount > 1 ? midpoint.y + 2 : midpoint.y + 7}\n                                        fill=\"black\"\n                                        fontSize=\"12\"\n                                        transform={`rotate(${angle}, ${midpoint.x + 10}, ${midpoint.y + 10})`}\n                                        textAnchor=\"middle\"\n                                    >\n                                        {Math.round(calculateEdgeLength(edge))}\n                                    </text>)}\n                            </React.Fragment>\n                        );\n                    })}\n                </svg>\n                    {nodes.map(node => (\n                        <Draggable\n                            key={node.id}\n                            position={{ x: node.x, y: node.y }}\n                            bounds=\"parent\"\n                            onStart={handleMouseDown}\n                            onDrag={(e, data) => handleDrag(e, data, node)}\n                            onStop={handleDragStop}\n                        >\n                            <div\n                                className=\"graph-node\"\n                                onClick={() => handleNodeClick(node)}\n                                style={{\n                                    border: (isTSP || isBFS || isPrim || isDFS || isShortestPath) ? (startNode && startNode.id === node.id ? 'none' : '2px solid red') : (selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none'),\n                                    backgroundColor: \n                                    node.id === currentNode?.id ? 'red' : \n                                    visitedNodes.some(vn => vn.id === node.id) ? \n                                        (visitedNodes.find(vn => vn.id === node.id)?.color || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\") \n                                        : 'black',\n                                    pointerEvents: 'auto',\n                                    position: 'absolute'\n                                }}\n                            >\n                            </div>\n                        </Draggable>\n                    ))}\n                </div>\n                <h3 class-name=\"status-text\">{text}</h3>\n            </div>\n\n            <div className=\"button-container\">    \n                {/* Traversal and MST and Path*/}\n                {edges.length > 0 && !selectedNode &&(\n                <h3>Algorithms</h3>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickTraversal}>Traversals →</button>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickMST}>MSTs →</button>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickPath}>Paths →</button>)}\n\n\n                {/* Specific Algorithms */}\n                {clickedMST && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={animateKruskalsAlgorithm}>Kruskall</button>)}\n                {clickedMST && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startPrim}>Prim</button>)}\n\n                {clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\", backgroundColor: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startDFS}>DFS</button>)}\n                {clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startBFS}>BFS</button>)}\n\n                {clickedPaths && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startShortestPath}>Shortest Path</button>)}\n                {clickedPaths && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startTSP}>TSP</button>)}\n                \n                {!clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={graphColoring}>Graph Coloring</button>)}\n                {!isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={findConnectedComponents}>Connected Components</button>)}\n                {isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={findStrongComponents}>Strong Components</button>)}\n\n                {/* Back Button */}\n                {(clickedTraversal || clickedMST || clickedPaths) && !selectedNode && (\n                <button className=\"graph-button\" onClick={goBack}>← Back</button>)} \n                \n            </div>\n        </div>\n        </GraphsProvider>\n    );\n    \n}\n\n\n\nconst Graphs = () => {\n    return(\n    <GraphsProvider>\n            <GraphComponent />\n    </GraphsProvider>\n    );\n}\n    \n\n    \n\nexport default Graphs;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}