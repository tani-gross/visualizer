{"ast":null,"code":"var _jsxFileName = \"/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport Draggable from 'react-draggable';\nimport { calculateAngle, calculateEdgeLength, calculateMidpoint } from './GraphUtilities';\nimport UnionFind from \"./UnionFind\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Graphs = () => {\n  _s();\n  const [text, setText] = useState(\"Add Node or Generate Graph to Begin\");\n  const [nodes, setNodes] = useState([]);\n  const [nodeCount, setNodeCount] = useState(0);\n  const [edges, setEdges] = useState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isAddingEdge, setIsAddingEdge] = useState(false);\n  const [dragging, setDragging] = useState(false);\n  const [isRemovingEdge, setIsRemovingEdge] = useState(false);\n  const [visitedNodes, setVisitedNodes] = useState([]);\n  const [visitedEdges, setVisitedEdges] = useState([]);\n  const [adjList, setAdjList] = useState([]);\n  const [clickedTraversal, setClickedTraversal] = useState(false);\n  const [clickedMST, setClickedMST] = useState(false);\n  const [clickedPaths, setClickedPaths] = useState(false);\n  const [isDFS, setIsDFS] = useState(false);\n  const [isBFS, setIsBFS] = useState(false);\n  const [isPrim, setIsPrim] = useState(false);\n  const [isTSP, setIsTSP] = useState(false);\n  const [algorithmRunning, setAlgorithmRunning] = useState(false);\n  const [isShortestPath, setIsShortestPath] = useState(false);\n  const [startNode, setStartNode] = useState(null);\n  const [endNode, setEndNode] = useState(null);\n  const componentColors = [\"blue\", \"green\", \"orange\", \"purple\", \"pink\", \"yellow\", \"gold\", \"coral\", \"crimson\", \"cyan\", \"darkgreen\", \"drakblue\", \"darkorange\", \"darkorchid\", \"darkred\", \"deeppink\", \"darkviolet\", \"deepskyblue\", \"forestgreen\", \"fuchsia\"];\n  const [components, setComponents] = useState([]);\n  const [showWeights, setShowWeights] = useState(false);\n  const [sliderValue, setSliderValue] = useState(250);\n  const [currentNode, setCurrentNode] = useState(null);\n  const sliderValueRef = useRef(sliderValue);\n  const totalSliderCount = 2100;\n  const [isPaused, setIsPaused] = useState(false);\n  const isPausedRef = useRef(isPaused);\n  const [currentStep, setCurrentStep] = useState(0);\n  const currentStepRef = useRef(currentStep);\n  const [isStepMode, setIsStepMode] = useState(false);\n  const isStepModeRef = useRef(isStepMode);\n  const [disablePause, setDisablePause] = useState(false);\n  const [algorithmStarted, setAlgorithmStarted] = useState(false);\n  const [runningAlgorithm, setRunningAlgorithm] = useState(null);\n  const [isDirected, setIsDirected] = useState(false);\n\n  // Constants for UI text and colors\n  const highlightedButtonColor = \"lightblue\";\n  const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n  const treeEdgeColor = \"blue\";\n  const currentEdgeColor = \"red\";\n  const defaultEdgeColor = \"grey\";\n\n  // Use Effect to differentiate between modes\n  useEffect(() => {\n    isStepModeRef.current = isStepMode;\n  }, [isStepMode]);\n\n  // Use sEffect to allow pausing mid-alg\n  useEffect(() => {\n    isPausedRef.current = isPaused;\n  }, [isPaused]);\n\n  // Use Effect to allow stopping mid-alg\n  useEffect(() => {\n    currentStepRef.current = currentStepRef;\n  }, [currentStepRef]);\n\n  // Function to reset edges to default state\n  const resetEdges = () => {\n    setVisitedEdges([]);\n    setVisitedNodes([]);\n    setText(startingText);\n    setAlgorithmRunning(false);\n    setCurrentStep(0);\n    currentStepRef.current = 0;\n    setDisablePause(false);\n    setRunningAlgorithm(null);\n  };\n\n  // Function to set traversal mode\n  const setClickTraversal = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedTraversal(true);\n  };\n\n  // Function to set MST mode\n  const setClickMST = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedMST(true);\n  };\n\n  // Function to set Paths mode\n  const setClickPath = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setClickedPaths(true);\n  };\n\n  // Functino to go back from algorithm selection\n  const goBack = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setClickedMST(false);\n    setClickedTraversal(false);\n    setClickedPaths(false);\n    setAlgorithmRunning(false);\n    setText(startingText);\n  };\n\n  // Function to step in the algorithm\n  const nextStep = () => {\n    if (isPausedRef.current) {\n      setIsStepMode(true);\n      if (isPausedRef.current) {\n        setCurrentStep(prev => {\n          const next = prev + 1;\n          currentStepRef.current = next;\n          return next;\n        });\n      }\n      setIsPaused(false);\n      isPausedRef.current = false;\n    }\n  };\n\n  // Function to toggle button \n  const togglePlayPause = () => {\n    if (isPausedRef.current) {\n      setIsStepMode(false);\n      setIsPaused(false);\n      isPausedRef.current = false;\n      switch (runningAlgorithm) {\n        case \"DFS\":\n          setText(\"DFS in progress...\");\n          break;\n        case \"BFS\":\n          setText(\"BFS in progress...\");\n          break;\n        case \"Kruskall\":\n          setText(\"Kruskall's Algorithm in progress...\");\n          break;\n        case \"Prim\":\n          setText(\"Prim's Algorithm in progress...\");\n          break;\n        case \"SP\":\n          setText(\"Shortest Path Algorithm in progress...\");\n          break;\n        case \"TSP\":\n          setText(\"TSP in progress...\");\n          break;\n        case \"Connected\":\n          setText(\"Connected Components in progress..\");\n          break;\n        case \"Colors\":\n          setText(\"Graph Coloring in progress...\");\n          break;\n        default:\n          setText(\"Shouldn't get here\");\n      }\n    } else {\n      setIsStepMode(false);\n      setIsPaused(true);\n      isPausedRef.current = true;\n      setText(\"Algorithm is Paused\");\n    }\n  };\n\n  // Function to switch between directed and undirected graphs\n  const toggleGraphType = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    if (isDirected) {\n      const consolidatedEdges = [];\n      const edgeSet = new Set();\n      edges.forEach(edge => {\n        const edgeKey = `${Math.min(edge.from.id, edge.to.id)}-${Math.max(edge.from.id, edge.to.id)}`;\n        if (!edgeSet.has(edgeKey)) {\n          edgeSet.add(edgeKey);\n          consolidatedEdges.push(edge);\n        }\n      });\n      const newAdjList = {};\n      consolidatedEdges.forEach(edge => {\n        if (!newAdjList[edge.from.id]) newAdjList[edge.from.id] = [];\n        if (!newAdjList[edge.to.id]) newAdjList[edge.to.id] = [];\n        newAdjList[edge.from.id].push(edge.to.id);\n        newAdjList[edge.to.id].push(edge.from.id);\n      });\n      setEdges(consolidatedEdges);\n      setAdjList(newAdjList);\n    }\n    setIsDirected(!isDirected);\n  };\n\n  /*\n      Algorithms\n  */\n\n  // Function to start DFS\n  const startDFS = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setRunningAlgorithm(\"DFS\");\n    setIsDFS(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Node to begin DFS\");\n  };\n\n  // DFS implementatoin\n  const dfs = async startNode => {\n    console.log(\"dfs start\");\n    setAlgorithmStarted(true);\n    setText(\"DFS in progress...\");\n    const visitedNodeSet = new Set();\n    const visitedEdgeSet = new Set();\n    let stepIndex = 0;\n    const dfsRecursive = async currentNode => {\n      if (visitedNodeSet.has(currentNode.id)) {\n        return;\n      }\n      console.log(currentNode);\n      visitedNodeSet.add(currentNode.id);\n      setVisitedNodes(prev => {\n        const updatedNodes = [...prev, {\n          id: currentNode.id,\n          color: treeEdgeColor\n        }];\n        return updatedNodes;\n      });\n      for (let neighborId of adjList[currentNode.id]) {\n        setCurrentNode(currentNode);\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        const edge = edges.find(e => isDirected && e.from.id === currentNode.id && e.to.id === neighborId || !isDirected && (e.from.id === currentNode.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNode.id));\n        console.log(neighborNode);\n        console.log(edge);\n        if (!edge) {\n          continue;\n        }\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: currentEdgeColor\n        }]);\n        if (!visitedEdgeSet.has(edge)) {\n          stepIndex++;\n          if (isPausedRef.current) {\n            await new Promise(resolve => {\n              const checkStep = () => {\n                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                  resolve();\n                } else {\n                  setTimeout(checkStep, 50);\n                }\n              };\n              checkStep();\n            });\n            if (isStepModeRef.current) {\n              setIsPaused(true);\n              isPausedRef.current = true;\n            }\n          } else {\n            await sleep(totalSliderCount - sliderValueRef.current);\n          }\n          if (isStepModeRef.current) {\n            setIsPaused(true);\n            isPausedRef.current = true;\n          }\n        }\n        if (!visitedNodeSet.has(neighborId)) {\n          setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n            ...edge,\n            color: treeEdgeColor\n          }]);\n          visitedEdgeSet.add(edge);\n          await dfsRecursive(neighborNode);\n        } else {\n          setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== treeEdgeColor)));\n        }\n      }\n    };\n    await dfsRecursive(startNode);\n    setCurrentNode(null);\n    setAlgorithmStarted(false);\n    setText(\"DFS Done!\");\n    setTimeout(resetEdges, 1000);\n  };\n\n  // Function to start BFS\n  const startBFS = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setRunningAlgorithm(\"BFS\");\n    setIsBFS(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Node to begin BFS\");\n  };\n\n  // BFS implementation\n  const bfs = async startNode => {\n    setAlgorithmStarted(true);\n    setText(\"BFS in progress...\");\n    const visitedNodeSet = new Set();\n    const visitedEdgeSet = new Set();\n    let stepIndex = 0;\n    const queue = [startNode];\n    visitedNodeSet.add(startNode.id);\n    setVisitedNodes([{\n      id: startNode.id,\n      color: treeEdgeColor\n    }]);\n    while (queue.length > 0) {\n      const currentNode = queue.shift();\n      setCurrentNode(currentNode);\n      for (let neighborId of adjList[currentNode.id]) {\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        const edge = edges.find(e => isDirected && e.from.id === currentNode.id && e.to.id === neighborId || !isDirected && (e.from.id === currentNode.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNode.id));\n        if (!edge) {\n          continue;\n        }\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: currentEdgeColor\n        }]);\n        if (!visitedEdgeSet.has(edge)) {\n          stepIndex++;\n          if (isPausedRef.current) {\n            await new Promise(resolve => {\n              const checkStep = () => {\n                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                  resolve();\n                } else {\n                  setTimeout(checkStep, 50);\n                }\n              };\n              checkStep();\n            });\n            if (isStepModeRef.current) {\n              setIsPaused(true);\n              isPausedRef.current = true;\n            }\n          } else {\n            await sleep(totalSliderCount - sliderValueRef.current);\n          }\n          if (isStepModeRef.current) {\n            setIsPaused(true);\n            isPausedRef.current = true;\n          }\n        }\n        if (!visitedNodeSet.has(neighborId)) {\n          visitedNodeSet.add(neighborId);\n          queue.push(neighborNode);\n          setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n            ...edge,\n            color: treeEdgeColor\n          }]);\n          setVisitedNodes(prev => [...prev, {\n            id: neighborId,\n            color: treeEdgeColor\n          }]);\n        } else {\n          setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== treeEdgeColor)));\n        }\n      }\n    }\n    setCurrentNode(null);\n    setAlgorithmStarted(false);\n    setText(\"BFS Done!\");\n    setTimeout(resetEdges, 1000);\n  };\n\n  // Function to start Prim's algorithm\n  const startPrim = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setRunningAlgorithm(\"Prim\");\n    setIsPrim(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Node to begin Prim's Algorithm\");\n  };\n\n  // Function to animate Prim's algorithm\n  const animatePrimsAlgorithm = async startNode => {\n    setAlgorithmStarted(true);\n    setIsDirected(false);\n    setText(\"Prim's Algorithm in progress...\");\n    const visitedNodeSet = new Set();\n    const edgeQueue = [];\n    let stepIndex = 0;\n    const addEdges = node => {\n      visitedNodeSet.add(node.id);\n      setVisitedNodes(prev => [...prev, {\n        id: node.id,\n        color: treeEdgeColor\n      }]);\n      (adjList[node.id] || []).forEach(neighborId => {\n        if (!visitedNodeSet.has(neighborId)) {\n          const edge = edges.find(e => e.from.id === node.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === node.id);\n          if (edge) {\n            edgeQueue.push({\n              ...edge,\n              length: calculateEdgeLength(edge)\n            });\n          }\n        }\n      });\n      edgeQueue.sort((a, b) => a.length - b.length);\n    };\n    const animateStep = async () => {\n      if (visitedNodeSet.size === nodes.length || edgeQueue.length === 0) {\n        setAlgorithmStarted(false);\n        setText(\"Prim's Algorithm Done!\");\n        setTimeout(resetEdges, 1000);\n        return;\n      }\n      const edgesToHighlight = edgeQueue.slice(0, 1);\n      edgesToHighlight.forEach(edge => {\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: currentEdgeColor\n        }]);\n      });\n      stepIndex++;\n      if (isPausedRef.current) {\n        await new Promise(resolve => {\n          const checkStep = () => {\n            if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n              resolve();\n            } else {\n              setTimeout(checkStep, 50);\n            }\n          };\n          checkStep();\n        });\n        if (isStepModeRef.current) {\n          setIsPaused(true);\n          isPausedRef.current = true;\n        }\n      } else {\n        await sleep(totalSliderCount - sliderValueRef.current);\n      }\n      if (isStepModeRef.current) {\n        setIsPaused(true);\n        isPausedRef.current = true;\n      }\n      const edge = edgeQueue.shift();\n      const {\n        from,\n        to\n      } = edge;\n      const fromInMST = visitedNodeSet.has(from.id);\n      const toInMST = visitedNodeSet.has(to.id);\n      if (fromInMST && !toInMST || !fromInMST && toInMST) {\n        setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n          ...edge,\n          color: treeEdgeColor\n        }]);\n        if (fromInMST && !toInMST) {\n          addEdges(to);\n        } else if (!fromInMST && toInMST) {\n          addEdges(from);\n        }\n      } else {\n        setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n          ...edge,\n          color: defaultEdgeColor\n        }]);\n      }\n      animateStep();\n    };\n    addEdges(startNode);\n    animateStep();\n  };\n\n  // Function to animate Kruskall's algorithm\n  const animateKruskalsAlgorithm = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setIsDirected(false);\n    setRunningAlgorithm(\"Kruskall\");\n    setDisablePause(true);\n    setAlgorithmRunning(true);\n    setText(\"Kruskall's Algorithm in progress...\");\n    const sortedEdges = [...edges].sort((a, b) => calculateEdgeLength(a) - calculateEdgeLength(b));\n    let componentIndex = 0;\n    let currentComponentEdges = [];\n    let currentComponentNodes = [];\n    let uf;\n    const visitedNodeSet = new Set();\n    const foundComponents = [];\n    const dfsComponent = (currentNode, component) => {\n      if (visitedNodeSet.has(currentNode.id)) {\n        return;\n      }\n      visitedNodeSet.add(currentNode.id);\n      component.push(currentNode);\n      adjList[currentNode.id].forEach(neighborId => {\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        if (!visitedNodeSet.has(neighborId)) {\n          dfsComponent(neighborNode, component);\n        }\n      });\n    };\n    nodes.forEach(node => {\n      if (!visitedNodeSet.has(node.id)) {\n        const component = [];\n        dfsComponent(node, component);\n        foundComponents.push(component);\n      }\n    });\n    setComponents(foundComponents);\n    const animateComponentMST = component => {\n      uf = new UnionFind(nodeCount);\n      currentComponentEdges = [];\n      currentComponentNodes = component.map(node => node.id);\n      let edgeIndex = 0;\n      const color = componentColors[componentIndex % componentColors.length];\n      const highlightNodesAndEdges = index => {\n        if (index < currentComponentEdges.length) {\n          const {\n            from,\n            to\n          } = currentComponentEdges[index];\n          setVisitedNodes(prev => [...prev, {\n            id: from.id,\n            color\n          }, {\n            id: to.id,\n            color\n          }]);\n          setVisitedEdges(prev => [...prev, currentComponentEdges[index]]);\n          setTimeout(() => highlightNodesAndEdges(index + 1), totalSliderCount - sliderValueRef.current);\n        } else {\n          componentIndex++;\n          if (componentIndex < foundComponents.length) {\n            setTimeout(() => animateComponentMST(foundComponents[componentIndex]), 0);\n          } else {\n            setTimeout(resetEdges, 1000);\n            setText(\"Kruskall's Algorithm Done!\");\n          }\n        }\n      };\n      const animateStep = () => {\n        if (currentComponentEdges.length === component.length - 1 || edgeIndex >= sortedEdges.length) {\n          highlightNodesAndEdges(0);\n          return;\n        }\n        const edge = sortedEdges[edgeIndex];\n        edgeIndex++;\n        if (currentComponentNodes.includes(edge.from.id) && currentComponentNodes.includes(edge.to.id) && uf.find(edge.from.id) !== uf.find(edge.to.id)) {\n          uf.union(edge.from.id, edge.to.id);\n          currentComponentEdges.push({\n            ...edge,\n            color\n          });\n        }\n        animateStep();\n      };\n      animateStep();\n    };\n    if (foundComponents.length > 0) {\n      animateComponentMST(foundComponents[0]);\n    } else {\n      console.log(\"No components found.\");\n      setAlgorithmRunning(false);\n    }\n  };\n\n  // Function to start shortest path algorithm\n  const startShortestPath = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setRunningAlgorithm(\"SP\");\n    setIsShortestPath(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Start Node for Shortest Path\");\n  };\n\n  // Function to find the shortest path between two nodes\n  const findShortestPath = async (startNode, targetNode) => {\n    setAlgorithmStarted(true);\n    setText(\"Shortest Path Algorithm in progress...\");\n    const dist = {};\n    const prev = {};\n    const visitedEdgeSet = new Set();\n    const visitedNodeSet = new Set();\n    const priorityQueue = new Set(nodes.map(node => node.id));\n    let stepIndex = 0;\n    nodes.forEach(node => {\n      dist[node.id] = Infinity;\n      prev[node.id] = null;\n    });\n    dist[startNode.id] = 0;\n    const getMinDistNode = () => {\n      let minNode = null;\n      priorityQueue.forEach(nodeId => {\n        if (minNode === null || dist[nodeId] < dist[minNode]) {\n          minNode = nodeId;\n        }\n      });\n      return minNode;\n    };\n    while (priorityQueue.size > 0) {\n      const currentNodeId = getMinDistNode();\n      const currentNode = nodes.find(node => node.id === currentNodeId);\n      if (dist[currentNodeId] === Infinity) break;\n      priorityQueue.delete(currentNodeId);\n      if (currentNodeId === targetNode.id) {\n        break;\n      }\n      for (let neighborId of adjList[currentNode.id]) {\n        const edge = edges.find(e => isDirected && e.from.id === currentNode.id && e.to.id === neighborId || !isDirected && (e.from.id === currentNode.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNode.id));\n        if (!edge) {\n          continue;\n        }\n        setCurrentNode(currentNode);\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: currentEdgeColor\n        }]);\n        if (!visitedEdgeSet.has(edge)) {\n          stepIndex++;\n          if (isPausedRef.current) {\n            await new Promise(resolve => {\n              const checkStep = () => {\n                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                  resolve();\n                } else {\n                  setTimeout(checkStep, 50);\n                }\n              };\n              checkStep();\n            });\n            if (isStepModeRef.current) {\n              setIsPaused(true);\n              isPausedRef.current = true;\n            }\n          } else {\n            await sleep(totalSliderCount - sliderValueRef.current);\n          }\n          if (isStepModeRef.current) {\n            setIsPaused(true);\n            isPausedRef.current = true;\n          }\n          visitedEdgeSet.add(edge);\n        }\n        const alt = dist[currentNode.id] + calculateEdgeLength(edge);\n        if (alt < dist[neighborId]) {\n          dist[neighborId] = alt;\n          prev[neighborId] = currentNode.id;\n          setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n            ...edge,\n            color: treeEdgeColor\n          }]);\n          visitedEdgeSet.add(edge);\n        } else {\n          setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color === currentEdgeColor)));\n        }\n      }\n      visitedNodeSet.add(currentNode.id);\n      setVisitedNodes(prev => {\n        const updatedNodes = [...prev, {\n          id: currentNode.id,\n          color: treeEdgeColor\n        }];\n        return updatedNodes;\n      });\n    }\n    setStartNode(null);\n    setEndNode(null);\n    setAlgorithmStarted(false);\n    setCurrentNode(null);\n    setText(\"Shortest Path Done!\");\n    const path = [];\n    let currentNodeId = targetNode.id;\n    while (currentNodeId !== null) {\n      path.unshift(currentNodeId);\n      currentNodeId = prev[currentNodeId];\n    }\n    if (path.length === 1) {\n      setText(\"No path Found!\");\n      setTimeout(resetEdges, 1000);\n      return;\n    }\n    setVisitedEdges(prev => {\n      return prev.map(e => {\n        if (path.includes(e.from.id) && path.includes(e.to.id)) {\n          return {\n            ...e,\n            color: treeEdgeColor\n          };\n        } else {\n          return {\n            ...e,\n            color: defaultEdgeColor\n          };\n        }\n      });\n    });\n    setVisitedNodes(prev => {\n      return nodes.map(node => {\n        if (path.includes(node.id)) {\n          return {\n            id: node.id,\n            color: treeEdgeColor\n          };\n        } else {\n          return {\n            id: node.id,\n            color: \"black\"\n          };\n        }\n      });\n    });\n    setTimeout(resetEdges, 1000);\n  };\n\n  // Function to start TSP\n  const startTSP = async () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setRunningAlgorithm(\"TSP\");\n    setIsTSP(true);\n    setAlgorithmRunning(true);\n    setText(\"Select Node to begin TSP\");\n  };\n\n  // Function to animate TSP\n  const tsp = async node => {\n    setAlgorithmStarted(true);\n    setText(\"TSP in progress...\");\n    const startNode = node;\n    const unvisited = new Set(nodes.map(node => node.id));\n    const visited = [];\n    const stack = [];\n    let currentNode = startNode;\n    let stepIndex = 0;\n    unvisited.delete(currentNode.id);\n    visited.push(currentNode);\n    setVisitedNodes([{\n      id: currentNode.id,\n      color: treeEdgeColor\n    }]);\n    while (unvisited.size > 0) {\n      let nearestNode = null;\n      let shortestDistance = Infinity;\n      let currentEdge = null;\n      for (let neighborId of unvisited) {\n        setCurrentNode(currentNode);\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        // eslint-disable-next-line\n        const edge = edges.find(e => isDirected && e && e.from && e.to && e.from.id === currentNode.id && e.to.id === neighborId || !isDirected && e && e.from && e.to && (e.from.id === currentNode.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNode.id));\n        if (!edge) {\n          continue;\n        }\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: currentEdgeColor\n        }]);\n        stepIndex++;\n        if (isPausedRef.current) {\n          await new Promise(resolve => {\n            const checkStep = () => {\n              if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                resolve();\n              } else {\n                setTimeout(checkStep, 50);\n              }\n            };\n            checkStep();\n          });\n          if (isStepModeRef.current) {\n            setIsPaused(true);\n            isPausedRef.current = true;\n          }\n        } else {\n          await sleep(totalSliderCount - sliderValueRef.current);\n        }\n        if (isStepModeRef.current) {\n          setIsPaused(true);\n          isPausedRef.current = true;\n        }\n        const distance = calculateEdgeLength({\n          from: currentNode,\n          to: neighborNode\n        });\n        setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)));\n        if (distance < shortestDistance) {\n          shortestDistance = distance;\n          nearestNode = neighborNode;\n          currentEdge = edge;\n        }\n      }\n      if (nearestNode && currentEdge) {\n        stack.push({\n          currentNode,\n          nearestNode,\n          shortestDistance\n        });\n        setVisitedEdges(prev => [...prev, {\n          ...currentEdge,\n          color: treeEdgeColor\n        }]);\n        setVisitedNodes(prev => [...prev, {\n          id: nearestNode.id,\n          color: treeEdgeColor\n        }]);\n        stepIndex++;\n        if (isPausedRef.current) {\n          await new Promise(resolve => {\n            const checkStep = () => {\n              if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                resolve();\n              } else {\n                setTimeout(checkStep, 50);\n              }\n            };\n            checkStep();\n          });\n          if (isStepModeRef.current) {\n            setIsPaused(true);\n            isPausedRef.current = true;\n          }\n        } else {\n          await sleep(totalSliderCount - sliderValueRef.current);\n        }\n        if (isStepModeRef.current) {\n          setIsPaused(true);\n          isPausedRef.current = true;\n        }\n        currentNode = nearestNode;\n        unvisited.delete(currentNode.id);\n        visited.push(currentNode);\n      } else {\n        const previousState = stack.pop();\n        if (previousState) {\n          currentNode = previousState.currentNode;\n        } else {\n          break;\n        }\n      }\n    }\n    setCurrentNode(null);\n    setAlgorithmStarted(false);\n    setText(\"TSP Done!\");\n    setTimeout(resetEdges, 1000);\n  };\n\n  // Function to color graph\n  const graphColoring = async () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    setRunningAlgorithm(\"Color\");\n    setDisablePause(true);\n    setAlgorithmRunning(true);\n    setText(\"Graph Coloring in progress...\");\n    const availableColors = componentColors;\n    const colors = {};\n    const colorGraph = node => {\n      const neighborColors = adjList[node.id].map(neighborId => colors[neighborId]);\n      for (let color of availableColors) {\n        if (!neighborColors.includes(color)) {\n          colors[node.id] = color;\n          break;\n        }\n      }\n    };\n    for (let node of nodes) {\n      colorGraph(node);\n      setVisitedNodes(prev => [...prev, {\n        id: node.id,\n        color: colors[node.id]\n      }]);\n      await new Promise(resolve => setTimeout(resolve, totalSliderCount - sliderValueRef.current));\n    }\n    setText(\"Graph Coloring Done!\");\n    setTimeout(resetEdges, 1000);\n  };\n\n  // Function to find connected components in a graph\n  const findConnectedComponents = async () => {\n    console.log(\"hhihi\");\n    setRunningAlgorithm(\"Connected\");\n    setAlgorithmStarted(true);\n    setText(\"Connected Components in progress...\");\n    setAlgorithmRunning(true);\n    const visitedNodeSet = new Set();\n    const visitedEdgeSet = new Set();\n    let componentIndex = 0;\n    let stepIndex = 0;\n    const dfsRecursive = async (currentNode, componentColor) => {\n      if (visitedNodeSet.has(currentNode.id)) {\n        return;\n      }\n      visitedNodeSet.add(currentNode.id);\n      setVisitedNodes(prev => {\n        const updatedNodes = [...prev, {\n          id: currentNode.id,\n          color: componentColor\n        }];\n        return updatedNodes;\n      });\n      for (let neighborId of adjList[currentNode.id]) {\n        setCurrentNode(currentNode);\n        const neighborNode = nodes.find(node => node.id === neighborId);\n        const edge = edges.find(e => e.from.id === currentNode.id && e.to.id === neighborId || e.from.id === neighborId && e.to.id === currentNode.id);\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: currentEdgeColor\n        }]);\n        if (!visitedEdgeSet.has(edge)) {\n          stepIndex++;\n          if (isPausedRef.current) {\n            await new Promise(resolve => {\n              const checkStep = () => {\n                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                  resolve();\n                } else {\n                  setTimeout(checkStep, 50);\n                }\n              };\n              checkStep();\n            });\n            if (isStepModeRef.current) {\n              setIsPaused(true);\n              isPausedRef.current = true;\n            }\n          } else {\n            await sleep(totalSliderCount - sliderValueRef.current);\n          }\n          if (isStepModeRef.current) {\n            setIsPaused(true);\n            isPausedRef.current = true;\n          }\n        }\n        if (!visitedNodeSet.has(neighborId)) {\n          setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n            ...edge,\n            color: componentColor\n          }]);\n          visitedEdgeSet.add(edge);\n          await dfsRecursive(neighborNode, componentColor);\n        } else {\n          setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n            ...edge,\n            color: componentColor\n          }]);\n        }\n      }\n    };\n    for (let node of nodes) {\n      if (!visitedNodeSet.has(node.id)) {\n        const componentColor = componentColors[componentIndex % componentColors.length];\n        componentIndex++;\n        await dfsRecursive(node, componentColor);\n      }\n    }\n    setCurrentNode(null);\n    setAlgorithmStarted(false);\n    setText(\"Connected Components Done!\");\n    setTimeout(resetEdges, 1000);\n  };\n\n  // Function to find strong components\n  const findStrongComponents = async () => {\n    setRunningAlgorithm(\"Connected\");\n    setAlgorithmStarted(true);\n    setText(\"Strong Components in progress...\");\n    setAlgorithmRunning(true);\n    const stack = [];\n    const visitedNodeSet = new Set();\n    const visitedEdgeSet = new Set();\n    const reverseAdjList = {};\n    let stepIndex = 0;\n    const dfs1 = async node => {\n      if (visitedNodeSet.has(node.id)) {\n        return;\n      }\n      visitedNodeSet.add(node.id);\n      for (let neighborId of adjList[node.id]) {\n        if (!visitedNodeSet.has(neighborId)) {\n          const neighborNode = nodes.find(n => n.id === neighborId);\n          await dfs1(neighborNode);\n        }\n      }\n      stack.push(node);\n    };\n    const reverseGraph = () => {\n      nodes.forEach(node => {\n        reverseAdjList[node.id] = [];\n      });\n      edges.forEach(edge => {\n        reverseAdjList[edge.to.id].push(edge.from.id);\n      });\n    };\n    const dfs2 = async (node, componentColor) => {\n      if (visitedNodeSet.has(node.id)) {\n        return;\n      }\n      visitedNodeSet.add(node.id);\n      setVisitedNodes(prev => {\n        const updatedNodes = [...prev, {\n          id: node.id,\n          color: componentColor\n        }];\n        return updatedNodes;\n      });\n      for (let neighborId of reverseAdjList[node.id]) {\n        setCurrentNode(node);\n        const neighborNode = nodes.find(n => n.id === neighborId);\n        const edge = edges.find(e => e.from.id === node.id && e.to.id === neighborId);\n        if (!edge) {\n          continue;\n        }\n        setVisitedEdges(prev => [...prev, {\n          ...edge,\n          color: currentEdgeColor\n        }]);\n        if (!visitedEdgeSet.has(edge)) {\n          stepIndex++;\n          if (isPausedRef.current) {\n            await new Promise(resolve => {\n              const checkStep = () => {\n                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                  resolve();\n                } else {\n                  setTimeout(checkStep, 50);\n                }\n              };\n              checkStep();\n            });\n            if (isStepModeRef.current) {\n              setIsPaused(true);\n              isPausedRef.current = true;\n            }\n          } else {\n            await sleep(totalSliderCount - sliderValueRef.current);\n          }\n          if (isStepModeRef.current) {\n            setIsPaused(true);\n            isPausedRef.current = true;\n          }\n        }\n        if (!visitedNodeSet.has(neighborId)) {\n          setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n            ...edge,\n            color: componentColor\n          }]);\n          visitedEdgeSet.add(edge);\n          await dfs2(neighborNode, componentColor);\n        } else {\n          setVisitedEdges(prev => [...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)), {\n            ...edge,\n            color: componentColor\n          }]);\n        }\n      }\n    };\n    reverseGraph();\n    for (let node of nodes) {\n      if (!visitedNodeSet.has(node.id)) {\n        await dfs1(node);\n      }\n    }\n    visitedNodeSet.clear();\n    visitedEdgeSet.clear();\n    let componentIndex = 0;\n    while (stack.length > 0) {\n      const node = stack.pop();\n      if (!visitedNodeSet.has(node.id)) {\n        const componentColor = componentColors[componentIndex % componentColors.length];\n        componentIndex++;\n        await dfs2(node, componentColor);\n      }\n    }\n    setCurrentNode(null);\n    setAlgorithmStarted(false);\n    setText(\"Strong Components Done!\");\n    setTimeout(resetEdges, 1000);\n  };\n\n  /*\n      Graph (non-button) Function\n  */\n\n  // Function to add a new node to the graph\n  const addNode = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    if (nodes.length >= 20) {\n      alert(\"too many nodes\");\n      return;\n    }\n    setText(startingText);\n    const newNode = {\n      id: nodeCount,\n      x: Math.random() * 480,\n      y: Math.random() * 480\n    };\n    setNodes([...nodes, newNode]);\n    setAdjList(prevAdjList => ({\n      ...prevAdjList,\n      [newNode.id]: []\n    }));\n    setNodeCount(nodeCount + 1);\n  };\n\n  // Function to generate a random graph\n  const generateGraph = () => {\n    if (algorithmRunning || isRemovingEdge) {\n      return;\n    }\n    var numNodes = 0;\n    var numEdges = -1;\n    do {\n      const response = prompt(\"Enter the number of nodes for the graph:\", \"\");\n      if (response === null) {\n        return;\n      }\n      if (isNaN(response)) {\n        alert(\"Invalid input. Please enter numbers only\");\n        continue;\n      }\n      if (response <= 0 || response > 20) {\n        alert(\"Invalid input. Number of nodes must be between 1 and 20\");\n        continue;\n      }\n      numNodes = response;\n    } while (numNodes === 0);\n    do {\n      const response = prompt(\"Enter the number of edges for the graph:\", \"\");\n      if (response === null) {\n        return;\n      }\n      if (isNaN(response)) {\n        alert(\"Invalid input. Please enter numbers only\");\n        continue;\n      }\n      if (!isDirected) {\n        if (response > numNodes * (numNodes - 1) / 2) {\n          alert(\"Invalid input. Too many edges for the undirected graph\");\n          continue;\n        }\n      } else {\n        if (response > numNodes * (numNodes - 1)) {\n          alert(\"Invalid input. Too many edges for the directed graph\");\n          continue;\n        }\n      }\n      if (response < 0) {\n        alert(\"Invalid input. Not enough edges\");\n        continue;\n      }\n      numEdges = response;\n    } while (numEdges === -1);\n    setNodes([]);\n    setEdges([]);\n    setAdjList({});\n    setNodeCount(0);\n    setVisitedNodes([]);\n    setVisitedEdges([]);\n    setSelectedNode(null);\n    setText(startingText);\n    const newNodes = [];\n    const newEdges = [];\n    const newAdjList = {};\n    const gridSize = Math.ceil(Math.sqrt(numNodes));\n    const areaWidth = 500;\n    const areaHeight = 500;\n    const margin = 10;\n    const gridSpacingX = (areaWidth - 2 * margin) / gridSize;\n    const gridSpacingY = (areaHeight - 2 * margin) / gridSize;\n    for (let i = 0; i < numNodes; i++) {\n      const row = Math.floor(i / gridSize);\n      const col = i % gridSize;\n      const x = margin + col * gridSpacingX + Math.random() * gridSpacingX * 0.9;\n      const y = margin + row * gridSpacingY + Math.random() * gridSpacingY * 0.9;\n      const newNode = {\n        id: i,\n        x: x,\n        y: y\n      };\n      newNodes.push(newNode);\n      newAdjList[i] = [];\n    }\n    while (newEdges.length < numEdges) {\n      const from = newNodes[Math.floor(Math.random() * numNodes)];\n      const to = newNodes[Math.floor(Math.random() * numNodes)];\n      if (from.id !== to.id) {\n        const edgeExists = newEdges.some(edge => edge.from.id === from.id && edge.to.id === to.id || !isDirected && edge.from.id === to.id && edge.to.id === from.id);\n        if (!edgeExists) {\n          const newEdge = {\n            from,\n            to,\n            color: defaultEdgeColor\n          };\n          newEdges.push(newEdge);\n          newAdjList[from.id].push(to.id);\n          if (!isDirected) {\n            newAdjList[to.id].push(from.id);\n          }\n        }\n      }\n    }\n    setNodes(newNodes);\n    setEdges(newEdges);\n    setAdjList(newAdjList);\n    setNodeCount(newNodes.length);\n  };\n\n  // Function to reset the graph\n  const resetGraph = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    setNodes([]);\n    setEdges([]);\n    setClickedMST(false);\n    setClickedTraversal(false);\n    setIsRemovingEdge(false);\n    setText(startingText);\n  };\n\n  // Function to remove a selected node form the graph\n  const removeNode = () => {\n    if (selectedNode == null) return;\n    setNodes(nodes.filter(node => node.id !== selectedNode.id));\n    setEdges(edges.filter(edge => edge.from.id !== selectedNode.id && edge.to.id !== selectedNode.id));\n    setAdjList(prevAdjList => {\n      const newAdjList = {\n        ...prevAdjList\n      };\n      delete newAdjList[selectedNode.id];\n      for (const key in newAdjList) {\n        newAdjList[key] = newAdjList[key].filter(id => id !== selectedNode.id);\n      }\n      return newAdjList;\n    });\n    setSelectedNode(null);\n  };\n\n  // Function to handle clicking on a node\n  const handleNodeClick = node => {\n    if (dragging) {\n      return;\n    }\n    if (isAddingEdge) {\n      if (selectedNode && selectedNode.id !== node.id) {\n        const edgeExists = edges.some(edge => edge.from.id === selectedNode.id && edge.to.id === node.id || !isDirected && edge.from.id === node.id && edge.to.id === selectedNode.id);\n        if (!edgeExists) {\n          const newEdge = {\n            from: selectedNode,\n            to: node,\n            color: defaultEdgeColor\n          };\n          setEdges(prevEdges => [...prevEdges, newEdge]);\n          setAdjList(prevAdjList => {\n            const newAdjList = {\n              ...prevAdjList\n            };\n            if (!newAdjList[selectedNode.id]) newAdjList[selectedNode.id] = [];\n            if (!newAdjList[node.id]) newAdjList[node.id] = [];\n            newAdjList[selectedNode.id].push(node.id);\n            if (!isDirected) {\n              newAdjList[node.id].push(selectedNode.id);\n            }\n            return newAdjList;\n          });\n        }\n        setIsAddingEdge(false);\n        setSelectedNode(null);\n      } else if (selectedNode && selectedNode.id === node.id) {\n        setSelectedNode(null);\n        setIsAddingEdge(false);\n      }\n      setText(startingText);\n    } else if (isDFS) {\n      setVisitedNodes([]);\n      setVisitedEdges([]);\n      dfs(node);\n      setIsDFS(false);\n    } else if (isBFS) {\n      setVisitedNodes([]);\n      setVisitedEdges([]);\n      bfs(node);\n      setIsBFS(false);\n    } else if (isPrim) {\n      setIsPrim(false);\n      animatePrimsAlgorithm(node);\n    } else if (isShortestPath) {\n      if (!startNode) {\n        setStartNode(node);\n        setText(\"Select End Node for Shortest Path\");\n      } else if (!endNode) {\n        setEndNode(node);\n        setText(\"Finding Shortest Path...\");\n        findShortestPath(startNode, node);\n        setIsShortestPath(false);\n      }\n    } else if (isTSP) {\n      setVisitedNodes([]);\n      setVisitedEdges([]);\n      tsp(node);\n      setIsTSP(false);\n    } else {\n      if (selectedNode && selectedNode.id === node.id) {\n        setSelectedNode(null);\n        setText(startingText);\n      } else {\n        if (!algorithmRunning) {\n          setSelectedNode(node);\n        }\n      }\n    }\n  };\n\n  // Function to handle mouse down event for dragging\n  const handleMouseDown = () => {\n    setDragging(false);\n  };\n\n  // Function to handle slider change\n  const handleSliderChange = event => {\n    const newValue = event.target.value;\n    setSliderValue(newValue);\n    sliderValueRef.current = newValue;\n  };\n\n  // Function to start removing an edge\n  const startRemovingEdge = () => {\n    if (algorithmRunning) {\n      return;\n    }\n    if (isRemovingEdge) {\n      setIsRemovingEdge(false);\n      setText(\"\");\n      return;\n    }\n    if (edges.length < 1) {\n      alert(\"must be at least one edge\");\n      return;\n    }\n    setText(\"Click on an edge to remove it\");\n    setIsRemovingEdge(true);\n  };\n\n  // Function to initiate adding an edge\n  const handleAddEdge = () => {\n    if (selectedNode === null) return;\n    if (!isDirected) {\n      if (nodes.length * (nodes.length - 1) / 2 === edges.length) {\n        alert(\"cannot add another edge\");\n        return;\n      }\n    } else {\n      if (nodes.length * (nodes.length - 1) === edges.length) {\n        alert(\"cannot add another edge\");\n        return;\n      }\n    }\n    if (nodes.length < 2) {\n      alert(\"You need at least two nodes to add an edge.\");\n      return;\n    }\n    setIsAddingEdge(true);\n    setText(\"Click another node to add edge\");\n  };\n\n  // Function to handle clicking on an edge\n  const handleEdgeClick = edge => {\n    if (isRemovingEdge) {\n      setEdges(edges.filter(e => e !== edge));\n      setIsRemovingEdge(false);\n      setAdjList(prevAdjList => {\n        const newAdjList = {\n          ...prevAdjList\n        };\n        newAdjList[edge.from.id] = newAdjList[edge.from.id].filter(id => id !== edge.to.id);\n        newAdjList[edge.to.id] = newAdjList[edge.to.id].filter(id => id !== edge.from.id);\n        return newAdjList;\n      });\n      setText(startingText);\n    }\n  };\n\n  // Function to handle dragging a node\n  const handleDrag = (e, data, node) => {\n    setDragging(true);\n    node.x = data.x;\n    node.y = data.y;\n    setNodes([...nodes]);\n  };\n\n  // Function to handle stopping the drag of a node\n  const handleDragStop = () => {\n    setTimeout(() => {\n      setDragging(false);\n    }, 0);\n  };\n\n  // Function to sleep and check for pausing\n  const sleep = duration => {\n    return new Promise(resolve => {\n      const interval = 50;\n      let elapsed = 0;\n      const checkPauseAndSleep = () => {\n        if (isPausedRef.current) {\n          const checkPause = () => {\n            if (isStepModeRef.current) {\n              setIsStepMode(true);\n              resolve();\n            } else if (!isPausedRef.current) {\n              resolve();\n            } else {\n              setTimeout(checkPause, interval);\n            }\n          };\n          checkPause();\n        } else {\n          if (elapsed < duration) {\n            elapsed += interval;\n            setTimeout(checkPauseAndSleep, interval);\n          } else {\n            resolve();\n          }\n        }\n      };\n      checkPauseAndSleep();\n    });\n  };\n\n  // JSX for rendering the component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Graph Creation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1533,\n        columnNumber: 17\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: handleAddEdge,\n        children: \"Add Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1537,\n        columnNumber: 17\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: removeNode,\n        children: \"Remove Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1539,\n        columnNumber: 17\n      }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: addNode,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1543,\n        columnNumber: 17\n      }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: generateGraph,\n        children: \"Generate Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1545,\n        columnNumber: 17\n      }, this), !selectedNode && nodes.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: resetGraph,\n        children: \"Reset Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1547,\n        columnNumber: 17\n      }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Edge Editing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1551,\n        columnNumber: 21\n      }, this), !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: toggleGraphType,\n        children: isDirected ? 'Set Undirected' : 'Set Directed'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1553,\n        columnNumber: 21\n      }, this), !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: () => {\n          if (edges.length > 0) {\n            setShowWeights(!showWeights);\n          }\n        },\n        children: showWeights ? 'Hide Weights' : 'Show Weights'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1557,\n        columnNumber: 21\n      }, this), !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: startRemovingEdge,\n        children: \"Remove Edge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1561,\n        columnNumber: 17\n      }, this), algorithmStarted && !disablePause && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1566,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: nextStep,\n          children: \"Next Step\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1567,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"graph-button\",\n          onClick: togglePlayPause,\n          children: (isPaused || isStepMode) && !disablePause ? \"Play\" : \"Pause\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1568,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1532,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"slider-label\",\n          children: \"Algorithm Speed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1578,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Slow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1580,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"100\",\n            max: \"2000\",\n            step: \"100\",\n            value: sliderValue,\n            onChange: handleSliderChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1581,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Fast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1589,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1579,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1577,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"edges-svg\",\n          style: {\n            position: 'absolute',\n            width: '100%',\n            height: '100%'\n          },\n          children: edges.map((edge, index) => {\n            var _visitedEdges$find, _visitedEdges$find2, _visitedEdges$find3;\n            const midpoint = calculateMidpoint(edge);\n            const {\n              angle,\n              flipped\n            } = calculateAngle(edge);\n            const arrowLength = 15;\n            const arrowAngle = 30;\n            const nodeRadius = 10;\n            const dx = edge.to.x - edge.from.x;\n            const dy = edge.to.y - edge.from.y;\n            const length = Math.sqrt(dx * dx + dy * dy);\n            const unitDx = dx / length;\n            const unitDy = dy / length;\n            const baseX = edge.to.x - nodeRadius * unitDx;\n            const baseY = edge.to.y - nodeRadius * unitDy;\n            const edgeCount = edges.filter(e => e.from.id === edge.from.id && e.to.id === edge.to.id || e.from.id === edge.to.id && e.to.id === edge.from.id).length;\n            let offsetX = 0;\n            let offsetY = 0;\n            if (edgeCount > 1) {\n              offsetX = 5 * unitDy;\n              offsetY = -5 * unitDx;\n            }\n            const adjustedFromX = edge.from.x + 10 + offsetX;\n            const adjustedFromY = edge.from.y + 10 + offsetY;\n            const adjustedToX = baseX + 10 + offsetX;\n            const adjustedToY = baseY + 10 + offsetY;\n            const arrowBaseX = baseX + offsetX + 10;\n            const arrowBaseY = baseY + offsetY + 10;\n            let arrowX1, arrowY1, arrowX2, arrowY2;\n            if (flipped) {\n              arrowX1 = arrowBaseX + arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n              arrowY1 = arrowBaseY + arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n              arrowX2 = arrowBaseX + arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n              arrowY2 = arrowBaseY + arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n            } else {\n              arrowX1 = arrowBaseX - arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n              arrowY1 = arrowBaseY - arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n              arrowX2 = arrowBaseX - arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n              arrowY2 = arrowBaseY - arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n            }\n            return /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                x1: adjustedFromX,\n                y1: adjustedFromY,\n                x2: adjustedToX,\n                y2: adjustedToY,\n                stroke: ((_visitedEdges$find = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find === void 0 ? void 0 : _visitedEdges$find.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                strokeWidth: isRemovingEdge ? 8 : 4,\n                onClick: () => handleEdgeClick(edge)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1648,\n                columnNumber: 33\n              }, this), isDirected && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"line\", {\n                  x1: adjustedToX,\n                  y1: adjustedToY,\n                  x2: arrowX1,\n                  y2: arrowY1,\n                  stroke: ((_visitedEdges$find2 = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find2 === void 0 ? void 0 : _visitedEdges$find2.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                  strokeWidth: isRemovingEdge ? 8 : 4\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1659,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n                  x1: adjustedToX,\n                  y1: adjustedToY,\n                  x2: arrowX2,\n                  y2: arrowY2,\n                  stroke: ((_visitedEdges$find3 = visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)) === null || _visitedEdges$find3 === void 0 ? void 0 : _visitedEdges$find3.color) || (isRemovingEdge ? \"red\" : \"grey\"),\n                  strokeWidth: isRemovingEdge ? 8 : 4\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1667,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true), showWeights && /*#__PURE__*/_jsxDEV(\"text\", {\n                x: midpoint.x + 10,\n                y: edgeCount > 1 ? midpoint.y + 2 : midpoint.y + 7,\n                fill: \"black\",\n                fontSize: \"12\",\n                transform: `rotate(${angle}, ${midpoint.x + 10}, ${midpoint.y + 10})`,\n                textAnchor: \"middle\",\n                children: Math.round(calculateEdgeLength(edge))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1678,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1647,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1593,\n          columnNumber: 17\n        }, this), nodes.map(node => {\n          var _visitedNodes$find;\n          return /*#__PURE__*/_jsxDEV(Draggable, {\n            position: {\n              x: node.x,\n              y: node.y\n            },\n            bounds: \"parent\",\n            onStart: handleMouseDown,\n            onDrag: (e, data) => handleDrag(e, data, node),\n            onStop: handleDragStop,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"graph-node\",\n              onClick: () => handleNodeClick(node),\n              style: {\n                border: isTSP || isBFS || isPrim || isDFS || isShortestPath ? startNode && startNode.id === node.id ? 'none' : '2px solid red' : selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none',\n                backgroundColor: node.id === (currentNode === null || currentNode === void 0 ? void 0 : currentNode.id) ? 'red' : visitedNodes.some(vn => vn.id === node.id) ? ((_visitedNodes$find = visitedNodes.find(vn => vn.id === node.id)) === null || _visitedNodes$find === void 0 ? void 0 : _visitedNodes$find.color) || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\" : 'black',\n                pointerEvents: 'auto',\n                position: 'absolute'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1701,\n              columnNumber: 29\n            }, this)\n          }, node.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1693,\n            columnNumber: 25\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1592,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        \"class-name\": \"status-text\",\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1719,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1576,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [edges.length > 0 && !selectedNode && /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Algorithms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1725,\n        columnNumber: 17\n      }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: setClickTraversal,\n        children: \"Traversals \\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1727,\n        columnNumber: 17\n      }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: setClickMST,\n        children: \"MSTs \\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1729,\n        columnNumber: 17\n      }, this), edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: setClickPath,\n        children: \"Paths \\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1731,\n        columnNumber: 17\n      }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: animateKruskalsAlgorithm,\n        children: \"Kruskall\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1736,\n        columnNumber: 17\n      }, this), clickedMST && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startPrim,\n        children: \"Prim\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1738,\n        columnNumber: 17\n      }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startDFS,\n        children: \"DFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1741,\n        columnNumber: 17\n      }, this), clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startBFS,\n        children: \"BFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1743,\n        columnNumber: 17\n      }, this), clickedPaths && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startShortestPath,\n        children: \"Shortest Path\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1746,\n        columnNumber: 17\n      }, this), clickedPaths && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: startTSP,\n        children: \"TSP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1748,\n        columnNumber: 17\n      }, this), !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: graphColoring,\n        children: \"Graph Coloring\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1751,\n        columnNumber: 17\n      }, this), !isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: findConnectedComponents,\n        children: \"Connected Components\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1753,\n        columnNumber: 17\n      }, this), isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          border: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",\n          backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\"\n        },\n        className: \"graph-button\",\n        onClick: findStrongComponents,\n        children: \"Strong Components\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1755,\n        columnNumber: 17\n      }, this), (clickedTraversal || clickedMST || clickedPaths) && !selectedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"graph-button\",\n        onClick: goBack,\n        children: \"\\u2190 Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1759,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1722,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1531,\n    columnNumber: 9\n  }, this);\n};\n_s(Graphs, \"LHcosf27MlYw0YwAXr+SQHzhBI8=\");\n_c = Graphs;\nexport default Graphs;\nvar _c;\n$RefreshReg$(_c, \"Graphs\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Draggable","calculateAngle","calculateEdgeLength","calculateMidpoint","UnionFind","jsxDEV","_jsxDEV","Fragment","_Fragment","Graphs","_s","text","setText","nodes","setNodes","nodeCount","setNodeCount","edges","setEdges","selectedNode","setSelectedNode","isAddingEdge","setIsAddingEdge","dragging","setDragging","isRemovingEdge","setIsRemovingEdge","visitedNodes","setVisitedNodes","visitedEdges","setVisitedEdges","adjList","setAdjList","clickedTraversal","setClickedTraversal","clickedMST","setClickedMST","clickedPaths","setClickedPaths","isDFS","setIsDFS","isBFS","setIsBFS","isPrim","setIsPrim","isTSP","setIsTSP","algorithmRunning","setAlgorithmRunning","isShortestPath","setIsShortestPath","startNode","setStartNode","endNode","setEndNode","componentColors","components","setComponents","showWeights","setShowWeights","sliderValue","setSliderValue","currentNode","setCurrentNode","sliderValueRef","totalSliderCount","isPaused","setIsPaused","isPausedRef","currentStep","setCurrentStep","currentStepRef","isStepMode","setIsStepMode","isStepModeRef","disablePause","setDisablePause","algorithmStarted","setAlgorithmStarted","runningAlgorithm","setRunningAlgorithm","isDirected","setIsDirected","highlightedButtonColor","startingText","treeEdgeColor","currentEdgeColor","defaultEdgeColor","current","resetEdges","setClickTraversal","setClickMST","setClickPath","goBack","nextStep","prev","next","togglePlayPause","toggleGraphType","consolidatedEdges","edgeSet","Set","forEach","edge","edgeKey","Math","min","from","id","to","max","has","add","push","newAdjList","startDFS","dfs","console","log","visitedNodeSet","visitedEdgeSet","stepIndex","dfsRecursive","updatedNodes","color","neighborId","neighborNode","find","node","e","Promise","resolve","checkStep","setTimeout","sleep","filter","startBFS","bfs","queue","length","shift","startPrim","animatePrimsAlgorithm","edgeQueue","addEdges","sort","a","b","animateStep","size","edgesToHighlight","slice","fromInMST","toInMST","animateKruskalsAlgorithm","sortedEdges","componentIndex","currentComponentEdges","currentComponentNodes","uf","foundComponents","dfsComponent","component","animateComponentMST","map","edgeIndex","highlightNodesAndEdges","index","includes","union","startShortestPath","findShortestPath","targetNode","dist","priorityQueue","Infinity","getMinDistNode","minNode","nodeId","currentNodeId","delete","alt","path","unshift","startTSP","tsp","unvisited","visited","stack","nearestNode","shortestDistance","currentEdge","distance","previousState","pop","graphColoring","availableColors","colors","colorGraph","neighborColors","findConnectedComponents","componentColor","findStrongComponents","reverseAdjList","dfs1","n","reverseGraph","dfs2","clear","addNode","alert","newNode","x","random","y","prevAdjList","generateGraph","numNodes","numEdges","response","prompt","isNaN","newNodes","newEdges","gridSize","ceil","sqrt","areaWidth","areaHeight","margin","gridSpacingX","gridSpacingY","i","row","floor","col","edgeExists","some","newEdge","resetGraph","removeNode","key","handleNodeClick","prevEdges","handleMouseDown","handleSliderChange","event","newValue","target","value","startRemovingEdge","handleAddEdge","handleEdgeClick","handleDrag","data","handleDragStop","duration","interval","elapsed","checkPauseAndSleep","checkPause","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","step","onChange","style","position","width","height","_visitedEdges$find","_visitedEdges$find2","_visitedEdges$find3","midpoint","angle","flipped","arrowLength","arrowAngle","nodeRadius","dx","dy","unitDx","unitDy","baseX","baseY","edgeCount","offsetX","offsetY","adjustedFromX","adjustedFromY","adjustedToX","adjustedToY","arrowBaseX","arrowBaseY","arrowX1","arrowY1","arrowX2","arrowY2","cos","PI","sin","x1","y1","x2","y2","stroke","strokeWidth","fill","fontSize","transform","textAnchor","round","_visitedNodes$find","bounds","onStart","onDrag","onStop","border","backgroundColor","vn","findIndex","comp","pointerEvents","_c","$RefreshReg$"],"sources":["/Users/tani/Desktop/visualizer/Visusalizer Project/src/Components/Graphs.js"],"sourcesContent":["import React, {useEffect, useState, useRef } from 'react';\nimport Draggable from 'react-draggable';\nimport {calculateAngle, calculateEdgeLength, calculateMidpoint} from './GraphUtilities';\nimport UnionFind from \"./UnionFind\"\n\n\nconst Graphs = () => {\n    const [text, setText] = useState(\"Add Node or Generate Graph to Begin\");\n    const [nodes, setNodes] = useState([]);\n    const [nodeCount, setNodeCount] = useState(0);\n    const [edges, setEdges] = useState([]);\n    const [selectedNode, setSelectedNode] = useState(null);\n    const [isAddingEdge, setIsAddingEdge] = useState(false);\n    const [dragging, setDragging] = useState(false);\n    const [isRemovingEdge, setIsRemovingEdge] = useState(false);\n    const [visitedNodes, setVisitedNodes] = useState([]);\n    const [visitedEdges, setVisitedEdges] = useState([]);\n    const [adjList, setAdjList] = useState([]);\n    const [clickedTraversal, setClickedTraversal] = useState(false);\n    const [clickedMST, setClickedMST] = useState(false);\n    const [clickedPaths, setClickedPaths] = useState(false);\n    const [isDFS, setIsDFS] = useState(false);\n    const [isBFS, setIsBFS] = useState(false);\n    const [isPrim, setIsPrim] = useState(false);\n    const [isTSP, setIsTSP] = useState(false);\n    const [algorithmRunning, setAlgorithmRunning] = useState(false);\n    const [isShortestPath, setIsShortestPath] = useState(false);\n    const [startNode, setStartNode] = useState(null);\n    const [endNode, setEndNode] = useState(null);\n    const componentColors = [\"blue\", \"green\", \"orange\", \"purple\", \"pink\", \"yellow\", \"gold\", \"coral\", \"crimson\", \"cyan\", \"darkgreen\", \"drakblue\", \"darkorange\", \"darkorchid\", \"darkred\", \"deeppink\", \"darkviolet\", \"deepskyblue\", \"forestgreen\", \"fuchsia\"];\n    const [components, setComponents] = useState([]);\n    const [showWeights, setShowWeights] = useState(false);\n    const [sliderValue, setSliderValue] = useState(250);\n    const [currentNode, setCurrentNode] = useState(null);\n    const sliderValueRef = useRef(sliderValue);\n    const totalSliderCount = 2100;\n    const [isPaused, setIsPaused] = useState(false);\n    const isPausedRef = useRef(isPaused);\n    const [currentStep, setCurrentStep] = useState(0);\n    const currentStepRef = useRef(currentStep);\n    const [isStepMode, setIsStepMode] = useState(false);\n    const isStepModeRef = useRef(isStepMode);\n    const [disablePause, setDisablePause] = useState(false);\n    const [algorithmStarted, setAlgorithmStarted] = useState(false);\n    const [runningAlgorithm, setRunningAlgorithm] = useState(null);\n    const [isDirected, setIsDirected] = useState(false);\n\n    // Constants for UI text and colors\n    const highlightedButtonColor = \"lightblue\";\n    const startingText = \"Move Node, Select Node, or Press Button to Continue\";\n    const treeEdgeColor = \"blue\";\n    const currentEdgeColor = \"red\";\n    const defaultEdgeColor = \"grey\";\n\n    // Use Effect to differentiate between modes\n    useEffect(() => {\n        isStepModeRef.current = isStepMode;\n    }, [isStepMode]);\n\n    // Use sEffect to allow pausing mid-alg\n    useEffect(() => {\n        isPausedRef.current = isPaused;\n    }, [isPaused]);\n\n    // Use Effect to allow stopping mid-alg\n    useEffect(() => {\n        currentStepRef.current = currentStepRef;\n    }, [currentStepRef]);\n\n    // Function to reset edges to default state\n    const resetEdges = () => {\n        setVisitedEdges([]);\n        setVisitedNodes([]);\n        setText(startingText);\n        setAlgorithmRunning(false);\n        setCurrentStep(0);\n        currentStepRef.current = 0;\n        setDisablePause(false);\n        setRunningAlgorithm(null);\n    };\n\n    // Function to set traversal mode\n    const setClickTraversal = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedTraversal(true);\n    }\n\n    // Function to set MST mode\n    const setClickMST = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedMST(true);\n    }\n\n    // Function to set Paths mode\n    const setClickPath = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        setClickedPaths(true);\n    }\n\n    // Functino to go back from algorithm selection\n    const goBack = () => {\n\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        \n        setClickedMST(false);\n        setClickedTraversal(false);\n        setClickedPaths(false);\n        setAlgorithmRunning(false);\n        setText(startingText);\n    }\n\n    // Function to step in the algorithm\n    const nextStep = () => {\n        if(isPausedRef.current){\n            setIsStepMode(true);\n            if(isPausedRef.current){\n                setCurrentStep(prev => {\n                    const next = prev + 1;\n                    currentStepRef.current = next;\n                    return next;\n                });\n            }\n            setIsPaused(false);\n            isPausedRef.current = false;\n        }\n    };\n\n    // Function to toggle button \n    const togglePlayPause = () => {\n        if (isPausedRef.current) {\n            setIsStepMode(false);\n            setIsPaused(false);\n            isPausedRef.current = false;\n            switch (runningAlgorithm) {\n                case \"DFS\":\n                    setText(\"DFS in progress...\")\n                    break;\n                case \"BFS\":\n                    setText(\"BFS in progress...\")\n                    break;\n                case \"Kruskall\":\n                    setText(\"Kruskall's Algorithm in progress...\")\n                    break;\n                case \"Prim\":\n                    setText(\"Prim's Algorithm in progress...\")\n                    break;\n                case \"SP\":\n                    setText(\"Shortest Path Algorithm in progress...\")\n                    break;\n                case \"TSP\":\n                    setText(\"TSP in progress...\")\n                    break;\n                case \"Connected\":\n                    setText(\"Connected Components in progress..\")\n                    break;\n                case \"Colors\":\n                    setText(\"Graph Coloring in progress...\")\n                    break;\n                default:\n                    setText(\"Shouldn't get here\");\n                }\n        } else {\n            setIsStepMode(false);\n            setIsPaused(true);\n            isPausedRef.current = true;\n            setText(\"Algorithm is Paused\");\n        }\n    };\n    \n    // Function to switch between directed and undirected graphs\n    const toggleGraphType = () => {\n        if(algorithmRunning){\n            return;\n        }\n        if (isDirected) {\n            const consolidatedEdges = [];\n            const edgeSet = new Set();\n    \n            edges.forEach(edge => {\n                const edgeKey = `${Math.min(edge.from.id, edge.to.id)}-${Math.max(edge.from.id, edge.to.id)}`;\n                if (!edgeSet.has(edgeKey)) {\n                    edgeSet.add(edgeKey);\n                    consolidatedEdges.push(edge);\n                }\n            });\n    \n            const newAdjList = {};\n            consolidatedEdges.forEach(edge => {\n                if (!newAdjList[edge.from.id]) newAdjList[edge.from.id] = [];\n                if (!newAdjList[edge.to.id]) newAdjList[edge.to.id] = [];\n                newAdjList[edge.from.id].push(edge.to.id);\n                newAdjList[edge.to.id].push(edge.from.id);\n            });\n    \n            setEdges(consolidatedEdges);\n            setAdjList(newAdjList);\n        }\n        setIsDirected(!isDirected);\n    }\n\n    /*\n        Algorithms\n    */\n\n        // Function to start DFS\n    const startDFS = () => {\n        if(algorithmRunning|| isRemovingEdge){\n            return;\n        }\n        setRunningAlgorithm(\"DFS\");\n        setIsDFS(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Node to begin DFS\");\n    }\n\n    // DFS implementatoin\n    const dfs = async (startNode) => {\n        console.log(\"dfs start\");\n        setAlgorithmStarted(true);\n        setText(\"DFS in progress...\");\n\n        const visitedNodeSet = new Set();\n        const visitedEdgeSet = new Set();\n        let stepIndex = 0;\n\n        const dfsRecursive = async (currentNode) => {\n            if (visitedNodeSet.has(currentNode.id)) {\n                return;\n            }\n            console.log(currentNode);\n            visitedNodeSet.add(currentNode.id);\n            setVisitedNodes(prev => { \n                const updatedNodes = [...prev, { id: currentNode.id, color: treeEdgeColor }];\n                return updatedNodes;\n            });\n\n            for (let neighborId of adjList[currentNode.id]) {\n                setCurrentNode(currentNode);     \n                const neighborNode = nodes.find(node => node.id === neighborId); \n                const edge = edges.find(e =>                                     \n                    (isDirected && e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (!isDirected && ((e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNode.id)))\n                );\n                console.log(neighborNode);\n                console.log(edge);\n\n                if(!edge){\n                    continue;\n                }\n\n                setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n            \n                if (!visitedEdgeSet.has(edge)) {\n                    stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if(isStepModeRef.current){\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n                }\n\n                if (!visitedNodeSet.has(neighborId)) { \n                    setVisitedEdges(prev => [\n                        ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                        { ...edge, color: treeEdgeColor }\n                    ]);\n                    visitedEdgeSet.add(edge);\n\n                    await dfsRecursive(neighborNode);\n                } else {\n                    setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== treeEdgeColor)));\n                }\n            }\n\n        };\n\n        await dfsRecursive(startNode);\n        setCurrentNode(null);\n        setAlgorithmStarted(false);\n        setText(\"DFS Done!\");\n        setTimeout(resetEdges, 1000); \n    };\n\n    // Function to start BFS\n    const startBFS = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        setRunningAlgorithm(\"BFS\");\n        setIsBFS(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Node to begin BFS\");\n    }\n\n    // BFS implementation\n    const bfs = async (startNode) => {\n        setAlgorithmStarted(true);\n        setText(\"BFS in progress...\");\n        const visitedNodeSet = new Set();\n        const visitedEdgeSet = new Set();\n        let stepIndex = 0;\n\n\n        const queue = [startNode];\n        visitedNodeSet.add(startNode.id);\n        setVisitedNodes([{ id: startNode.id, color: treeEdgeColor }]);\n\n        while (queue.length > 0) {\n            const currentNode = queue.shift();\n            setCurrentNode(currentNode);\n            \n            for (let neighborId of adjList[currentNode.id]) {\n                const neighborNode = nodes.find(node => node.id === neighborId);\n                const edge = edges.find(e =>                                     \n                    (isDirected && e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (!isDirected && ((e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNode.id)))\n                );\n\n                if(!edge){\n                    continue;\n                }\n\n                setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n\n                if(!visitedEdgeSet.has(edge)){\n                    stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if(isStepModeRef.current){\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n                }\n\n                if (!visitedNodeSet.has(neighborId)) {\n                    visitedNodeSet.add(neighborId);\n                    queue.push(neighborNode);\n\n                    setVisitedEdges(prev => [\n                        ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                        { ...edge, color: treeEdgeColor }\n                    ]);\n                    setVisitedNodes(prev => [...prev, { id: neighborId, color: treeEdgeColor }]);\n\n                } else{\n                    setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color !== treeEdgeColor)));\n                }\n                \n            }\n        }\n\n        setCurrentNode(null);\n        setAlgorithmStarted(false);\n        setText(\"BFS Done!\");\n        setTimeout(resetEdges, 1000); \n    };\n\n    // Function to start Prim's algorithm\n    const startPrim = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        setRunningAlgorithm(\"Prim\");\n        setIsPrim(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Node to begin Prim's Algorithm\");\n    }\n\n    // Function to animate Prim's algorithm\n    const animatePrimsAlgorithm = async (startNode) => {\n        setAlgorithmStarted(true);\n        setIsDirected(false);\n        setText(\"Prim's Algorithm in progress...\");\n        const visitedNodeSet = new Set();\n        const edgeQueue = [];\n        let stepIndex = 0;\n\n        const addEdges = (node) => {\n            visitedNodeSet.add(node.id);\n            setVisitedNodes(prev => [...prev, { id: node.id, color: treeEdgeColor }]);\n            (adjList[node.id] || []).forEach(neighborId => {\n                if (!visitedNodeSet.has(neighborId)) {\n                    const edge = edges.find(e => \n                        (e.from.id === node.id && e.to.id === neighborId) ||\n                        (e.from.id === neighborId && e.to.id === node.id)\n                    );\n                    if (edge) {\n                        edgeQueue.push({ ...edge, length: calculateEdgeLength(edge) });\n                    }\n                }\n            });\n            edgeQueue.sort((a, b) => a.length - b.length); \n        };\n\n        const animateStep = async () => {\n            if (visitedNodeSet.size === nodes.length || edgeQueue.length === 0) {\n                setAlgorithmStarted(false);\n                setText(\"Prim's Algorithm Done!\");\n                setTimeout(resetEdges, 1000);\n                return;\n            }\n\n            const edgesToHighlight = edgeQueue.slice(0, 1); \n            edgesToHighlight.forEach(edge => {\n                setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n            });\n\n            stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if(isStepModeRef.current){\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n\n            const edge = edgeQueue.shift();\n            const { from, to } = edge;\n            const fromInMST = visitedNodeSet.has(from.id);\n            const toInMST = visitedNodeSet.has(to.id);\n\n            if ((fromInMST && !toInMST) || (!fromInMST && toInMST)) {\n                setVisitedEdges(prev => [\n                    ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                    { ...edge, color: treeEdgeColor }\n                ]);\n\n                if (fromInMST && !toInMST) {\n                    addEdges(to);\n                } else if (!fromInMST && toInMST) {\n                    addEdges(from);\n                }\n            } else {\n                setVisitedEdges(prev => [\n                    ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                    { ...edge, color: defaultEdgeColor }\n                ]);\n            }\n\n            animateStep();\n        };\n\n        addEdges(startNode);\n        animateStep();\n    };\n\n    // Function to animate Kruskall's algorithm\n    const animateKruskalsAlgorithm = () => {\n        if (algorithmRunning || isRemovingEdge) {\n            return;\n        }\n        setIsDirected(false);\n        setRunningAlgorithm(\"Kruskall\");\n        setDisablePause(true);\n        setAlgorithmRunning(true);\n        setText(\"Kruskall's Algorithm in progress...\");\n\n        const sortedEdges = [...edges].sort((a, b) => calculateEdgeLength(a) - calculateEdgeLength(b));\n        let componentIndex = 0;\n        let currentComponentEdges = [];\n        let currentComponentNodes = [];\n        let uf;\n\n        const visitedNodeSet = new Set();\n        const foundComponents = [];\n\n        const dfsComponent = (currentNode, component) => {\n            if (visitedNodeSet.has(currentNode.id)) {\n                return;\n            }\n            visitedNodeSet.add(currentNode.id);\n            component.push(currentNode);\n            adjList[currentNode.id].forEach(neighborId => {\n                const neighborNode = nodes.find(node => node.id === neighborId);\n                if (!visitedNodeSet.has(neighborId)) {\n                    dfsComponent(neighborNode, component);\n                }\n            });\n        };\n\n        nodes.forEach(node => {\n            if (!visitedNodeSet.has(node.id)) {\n                const component = [];\n                dfsComponent(node, component);\n                foundComponents.push(component);\n            }\n        });\n\n        setComponents(foundComponents);\n\n        const animateComponentMST = (component) => {\n            uf = new UnionFind(nodeCount); \n            currentComponentEdges = [];\n            currentComponentNodes = component.map(node => node.id);\n            let edgeIndex = 0;\n            const color = componentColors[componentIndex % componentColors.length];\n\n            const highlightNodesAndEdges = (index) => {\n                if (index < currentComponentEdges.length) {\n                    const { from, to } = currentComponentEdges[index];\n                    setVisitedNodes(prev => [...prev, { id: from.id, color }, { id: to.id, color }]);\n                    setVisitedEdges(prev => [...prev, currentComponentEdges[index]]);\n                    setTimeout(() => highlightNodesAndEdges(index + 1), totalSliderCount - sliderValueRef.current); \n                } else {\n                    componentIndex++;\n                    if (componentIndex < foundComponents.length) {\n                        setTimeout(() => animateComponentMST(foundComponents[componentIndex]), 0); \n                    } else {\n                        setTimeout(resetEdges, 1000);\n                        setText(\"Kruskall's Algorithm Done!\");\n                    }\n                }\n            };\n\n            const animateStep = () => {\n                if (currentComponentEdges.length === component.length - 1 || edgeIndex >= sortedEdges.length) {\n                    highlightNodesAndEdges(0);\n                    return;\n                }\n\n                const edge = sortedEdges[edgeIndex];\n                edgeIndex++;\n\n                if (currentComponentNodes.includes(edge.from.id) && currentComponentNodes.includes(edge.to.id) &&\n                    uf.find(edge.from.id) !== uf.find(edge.to.id)) {\n                    uf.union(edge.from.id, edge.to.id);\n                    currentComponentEdges.push({ ...edge, color });\n                }\n\n                animateStep();\n            };\n\n            animateStep();\n        };\n\n        if (foundComponents.length > 0) {\n            animateComponentMST(foundComponents[0]);\n        } else {\n            console.log(\"No components found.\");\n            setAlgorithmRunning(false);\n        }\n    };\n\n    // Function to start shortest path algorithm\n    const startShortestPath = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        setRunningAlgorithm(\"SP\");\n\n        setIsShortestPath(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Start Node for Shortest Path\");\n    }\n\n    // Function to find the shortest path between two nodes\n    const findShortestPath = async (startNode, targetNode) => {\n        setAlgorithmStarted(true);\n        setText(\"Shortest Path Algorithm in progress...\");\n        const dist = {};\n        const prev = {};\n        const visitedEdgeSet = new Set();\n        const visitedNodeSet = new Set();\n        const priorityQueue = new Set(nodes.map(node => node.id)); \n        let stepIndex = 0;\n\n        nodes.forEach(node => {\n            dist[node.id] = Infinity;\n            prev[node.id] = null;\n        });\n        dist[startNode.id] = 0;\n\n        const getMinDistNode = () => {\n            let minNode = null;\n            priorityQueue.forEach(nodeId => {\n                if (minNode === null || dist[nodeId] < dist[minNode]) {\n                    minNode = nodeId;\n                }\n            });\n            return minNode;\n        };\n\n        while (priorityQueue.size > 0) {\n            const currentNodeId = getMinDistNode();\n            const currentNode = nodes.find(node => node.id === currentNodeId);\n\n            if (dist[currentNodeId] === Infinity) break;\n\n            priorityQueue.delete(currentNodeId);\n\n            if (currentNodeId === targetNode.id) {\n                break;\n            }\n\n            for (let neighborId of adjList[currentNode.id]) {\n                const edge = edges.find(e => \n                    (isDirected && e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (!isDirected && ((e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNode.id)))\n                );\n\n                if(!edge){\n                    continue;\n                }\n\n                setCurrentNode(currentNode);\n                setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n\n                if (!visitedEdgeSet.has(edge)) {\n                    stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if(isStepModeRef.current){\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n                    visitedEdgeSet.add(edge);\n                }\n\n                const alt = dist[currentNode.id] + calculateEdgeLength(edge);\n\n                if (alt < dist[neighborId]) {\n                    dist[neighborId] = alt;\n                    prev[neighborId] = currentNode.id;\n\n                    setVisitedEdges(prev => [\n                        ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                        { ...edge, color: treeEdgeColor }\n                    ]);\n\n                    visitedEdgeSet.add(edge);\n                } else {\n                    setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id && e.color === currentEdgeColor)));\n                }\n            }\n\n            visitedNodeSet.add(currentNode.id);\n            setVisitedNodes(prev => {\n                const updatedNodes = [...prev, { id: currentNode.id, color: treeEdgeColor }];\n                return updatedNodes;\n            });\n        }\n\n        setStartNode(null);\n        setEndNode(null);\n        setAlgorithmStarted(false);\n        setCurrentNode(null);\n        setText(\"Shortest Path Done!\");\n\n        const path = [];\n\n        let currentNodeId = targetNode.id;\n        while (currentNodeId !== null) {\n            path.unshift(currentNodeId);\n            currentNodeId = prev[currentNodeId];\n        }\n\n        if(path.length === 1){\n            setText(\"No path Found!\");\n            setTimeout(resetEdges, 1000);\n            return;\n        }\n\n        setVisitedEdges(prev => {\n            return prev.map(e => {\n                if (path.includes(e.from.id) && path.includes(e.to.id)) {\n                    return { ...e, color: treeEdgeColor };\n                } else {\n                    return { ...e, color: defaultEdgeColor };\n                }\n            });\n        });\n\n        setVisitedNodes(prev => {\n            return nodes.map(node => {\n                if (path.includes(node.id)) {\n                    return { id: node.id, color: treeEdgeColor };\n                } else {\n                    return { id: node.id, color: \"black\" };\n                }\n            });\n        });\n\n        setTimeout(resetEdges, 1000);\n    };\n\n    // Function to start TSP\n    const startTSP = async () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        setRunningAlgorithm(\"TSP\");\n        setIsTSP(true);\n        setAlgorithmRunning(true);\n        setText(\"Select Node to begin TSP\");\n    }\n\n    // Function to animate TSP\n    const tsp = async (node) => {\n        setAlgorithmStarted(true);\n        setText(\"TSP in progress...\");\n        const startNode = node;\n        const unvisited = new Set(nodes.map(node => node.id));\n        const visited = [];\n        const stack = [];\n        let currentNode = startNode;\n        let stepIndex = 0;\n\n        unvisited.delete(currentNode.id);\n        visited.push(currentNode);\n        setVisitedNodes([{ id: currentNode.id, color: treeEdgeColor }]);\n\n        while (unvisited.size > 0) {\n            let nearestNode = null;\n            let shortestDistance = Infinity;\n            let currentEdge = null;\n\n            for (let neighborId of unvisited) {\n                setCurrentNode(currentNode);\n                const neighborNode = nodes.find(node => node.id === neighborId);\n                // eslint-disable-next-line\n                const edge = edges.find(e => \n                    (isDirected && e && e.from && e.to && e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (!isDirected && e && e.from && e.to && ((e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNode.id)))\n                );\n\n                if (!edge) {\n                    continue;\n                }\n                \n                setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n                stepIndex++;\n                if (isPausedRef.current) {\n                    await new Promise(resolve => {\n                        const checkStep = () => {\n                            if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                resolve();\n                            } else {\n                                setTimeout(checkStep, 50);\n                            }\n                        };\n                        checkStep();\n                    });\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n                } else {\n                    await sleep(totalSliderCount - sliderValueRef.current);\n                }\n\n                if(isStepModeRef.current){\n                    setIsPaused(true);\n                    isPausedRef.current = true;\n                }\n                const distance = calculateEdgeLength({ from: currentNode, to: neighborNode });\n                setVisitedEdges(prev => prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)));\n                if (distance < shortestDistance) {\n                    shortestDistance = distance;\n                    nearestNode = neighborNode;\n                    currentEdge = edge;\n                }\n                \n            }\n\n            if (nearestNode && currentEdge) {\n                stack.push({ currentNode, nearestNode, shortestDistance });\n\n                setVisitedEdges(prev => [...prev, { ...currentEdge, color: treeEdgeColor }]);\n                setVisitedNodes(prev => [...prev, { id: nearestNode.id, color: treeEdgeColor }]);\n\n                stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if(isStepModeRef.current){\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n\n                currentNode = nearestNode;\n                unvisited.delete(currentNode.id);\n                visited.push(currentNode);\n            } else {\n                const previousState = stack.pop();\n                if (previousState) {\n                    currentNode = previousState.currentNode;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        setCurrentNode(null);\n        setAlgorithmStarted(false);\n        setText(\"TSP Done!\");\n        setTimeout(resetEdges, 1000);\n    };\n\n    // Function to color graph\n    const graphColoring = async () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n        setRunningAlgorithm(\"Color\");\n        setDisablePause(true);\n        setAlgorithmRunning(true);\n        setText(\"Graph Coloring in progress...\");\n\n        const availableColors = componentColors;\n        const colors = {};\n\n        const colorGraph = (node) => {\n            const neighborColors = adjList[node.id].map(neighborId => colors[neighborId]);\n            for(let color of availableColors){\n                if(!neighborColors.includes(color)){\n                    colors[node.id] = color;\n                    break;\n                }\n            }\n        }\n\n        for(let node of nodes){\n            colorGraph(node);\n            setVisitedNodes(prev => [...prev, {id: node.id, color: colors[node.id]}]);\n            await new Promise(resolve => setTimeout(resolve, totalSliderCount - sliderValueRef.current));\n        }\n\n        setText(\"Graph Coloring Done!\");\n        setTimeout(resetEdges, 1000);\n    }\n\n    // Function to find connected components in a graph\n    const findConnectedComponents = async () => {\n        console.log(\"hhihi\");\n        setRunningAlgorithm(\"Connected\");\n        setAlgorithmStarted(true);\n        setText(\"Connected Components in progress...\");\n        setAlgorithmRunning(true);\n        const visitedNodeSet = new Set();\n        const visitedEdgeSet = new Set();\n        let componentIndex = 0;\n        let stepIndex = 0;\n\n        const dfsRecursive = async (currentNode, componentColor) => {\n            if (visitedNodeSet.has(currentNode.id)) {\n                return;\n            }\n\n            visitedNodeSet.add(currentNode.id);\n            setVisitedNodes(prev => { \n                const updatedNodes = [...prev, { id: currentNode.id, color: componentColor }];\n                return updatedNodes;\n            });\n\n            for (let neighborId of adjList[currentNode.id]) {\n                setCurrentNode(currentNode);     \n                const neighborNode = nodes.find(node => node.id === neighborId); \n                const edge = edges.find(e =>                                     \n                    (e.from.id === currentNode.id && e.to.id === neighborId) ||\n                    (e.from.id === neighborId && e.to.id === currentNode.id)\n                );\n\n                setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n\n                if (!visitedEdgeSet.has(edge)) {\n                    stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if(isStepModeRef.current){\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n\n                    if(isStepModeRef.current){\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n                }\n\n                if (!visitedNodeSet.has(neighborId)) { \n                    setVisitedEdges(prev => [\n                        ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                        { ...edge, color: componentColor }\n                    ]);\n                    visitedEdgeSet.add(edge);\n\n                    await dfsRecursive(neighborNode, componentColor);\n                } else {\n                    setVisitedEdges(prev => [\n                        ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                        { ...edge, color: componentColor }\n                    ]);\n                }\n            }\n        };\n\n        for (let node of nodes) {\n            if (!visitedNodeSet.has(node.id)) {\n                const componentColor = componentColors[componentIndex % componentColors.length];\n                componentIndex++;\n                await dfsRecursive(node, componentColor);\n            }\n        }\n\n        setCurrentNode(null);\n        setAlgorithmStarted(false);\n        setText(\"Connected Components Done!\");\n        setTimeout(resetEdges, 1000); \n    };\n\n    // Function to find strong components\n    const findStrongComponents = async () => {\n        setRunningAlgorithm(\"Connected\");\n        setAlgorithmStarted(true);\n        setText(\"Strong Components in progress...\");\n        setAlgorithmRunning(true);\n\n        const stack = [];\n        const visitedNodeSet = new Set();\n        const visitedEdgeSet = new Set();\n        const reverseAdjList = {};\n        let stepIndex = 0;\n\n        const dfs1 = async (node) => {\n            if (visitedNodeSet.has(node.id)) {\n                return;\n            }\n\n            visitedNodeSet.add(node.id);\n            \n            for (let neighborId of adjList[node.id]) {\n                if (!visitedNodeSet.has(neighborId)) {\n                    const neighborNode = nodes.find(n => n.id === neighborId);\n                    await dfs1(neighborNode);\n                }\n            }\n            \n            stack.push(node);\n        };\n\n        const reverseGraph = () => {\n            nodes.forEach(node => {\n                reverseAdjList[node.id] = [];\n            });\n            edges.forEach(edge => {\n                reverseAdjList[edge.to.id].push(edge.from.id);\n            });\n        };\n\n        const dfs2 = async (node, componentColor) => {\n            if (visitedNodeSet.has(node.id)) {\n                return;\n            }\n            \n            visitedNodeSet.add(node.id);\n            setVisitedNodes(prev => { \n                const updatedNodes = [...prev, { id: node.id, color: componentColor }];\n                return updatedNodes;\n            });\n        \n            for (let neighborId of reverseAdjList[node.id]) {\n                setCurrentNode(node);\n                const neighborNode = nodes.find(n => n.id === neighborId);\n                const edge = edges.find(e => e.from.id === node.id && e.to.id === neighborId);\n                \n                if (!edge) {\n                    continue;\n                }\n        \n                setVisitedEdges(prev => [...prev, { ...edge, color: currentEdgeColor }]);\n        \n                if (!visitedEdgeSet.has(edge)) {\n                    stepIndex++;\n                    if (isPausedRef.current) {\n                        await new Promise(resolve => {\n                            const checkStep = () => {\n                                if (!isPausedRef.current || currentStepRef.current > stepIndex) {\n                                    resolve();\n                                } else {\n                                    setTimeout(checkStep, 50);\n                                }\n                            };\n                            checkStep();\n                        });\n                        if (isStepModeRef.current) {\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }\n                    } else {\n                        await sleep(totalSliderCount - sliderValueRef.current);\n                    }\n        \n                    if (isStepModeRef.current) {\n                        setIsPaused(true);\n                        isPausedRef.current = true;\n                    }\n                }\n                \n                if (!visitedNodeSet.has(neighborId)) { \n                    setVisitedEdges(prev => [\n                        ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                        { ...edge, color: componentColor }\n                    ]);\n                    visitedEdgeSet.add(edge);\n\n                    await dfs2(neighborNode, componentColor);\n                } else {\n                    setVisitedEdges(prev => [\n                        ...prev.filter(e => !(e.from.id === edge.from.id && e.to.id === edge.to.id)),\n                        { ...edge, color: componentColor }\n                    ]);\n                }\n            }\n        };\n\n        reverseGraph();\n\n        for (let node of nodes) {\n            if (!visitedNodeSet.has(node.id)) {\n                await dfs1(node);\n            }\n        }\n\n        visitedNodeSet.clear();\n        visitedEdgeSet.clear();\n\n        let componentIndex = 0;\n        while (stack.length > 0) {\n            const node = stack.pop();\n            if (!visitedNodeSet.has(node.id)) {\n                const componentColor = componentColors[componentIndex % componentColors.length];\n                componentIndex++;\n                await dfs2(node, componentColor);\n            }\n        }\n\n        setCurrentNode(null);\n        setAlgorithmStarted(false);\n        setText(\"Strong Components Done!\");\n        setTimeout(resetEdges, 1000);\n    };\n    \n    /*\n        Graph (non-button) Function\n    */\n\n    // Function to add a new node to the graph\n    const addNode = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        if(nodes.length >= 20){\n            alert(\"too many nodes\");\n            return;\n        }\n\n        setText(startingText);\n        const newNode = {\n            id: nodeCount,\n            x: Math.random() * 480,\n            y: Math.random() * 480,\n        };\n        setNodes([...nodes, newNode]);\n        setAdjList(prevAdjList => ({ ...prevAdjList, [newNode.id]: [] }));\n        setNodeCount(nodeCount + 1);\n    };\n\n    // Function to generate a random graph\n    const generateGraph = () => {\n        if(algorithmRunning || isRemovingEdge){\n            return;\n        }\n\n        var numNodes = 0;\n        var numEdges = -1;\n\n        do{\n            const response = prompt(\"Enter the number of nodes for the graph:\", \"\");\n            if(response === null){\n                return;\n            }\n            if(isNaN(response)){\n                alert(\"Invalid input. Please enter numbers only\");\n                continue;\n            }\n\n            if(response <= 0 || response > 20){\n                alert(\"Invalid input. Number of nodes must be between 1 and 20\");\n                continue;\n            }\n\n            numNodes = response;\n\n        }while(numNodes === 0);\n\n        do{\n            const response = prompt(\"Enter the number of edges for the graph:\", \"\");\n            if(response === null){\n                return;\n            }\n\n            if(isNaN(response)){\n                alert(\"Invalid input. Please enter numbers only\");\n                continue;\n            }\n\n            if(!isDirected){\n                if(response > ((numNodes * (numNodes - 1)) / 2)){\n                    alert(\"Invalid input. Too many edges for the undirected graph\");\n                    continue;\n                }\n            }else{\n                if(response > ((numNodes * (numNodes - 1)))){\n                    alert(\"Invalid input. Too many edges for the directed graph\");\n                    continue;\n                }\n            }\n            \n            if(response < 0){\n                alert(\"Invalid input. Not enough edges\");\n                continue;\n            }\n\n            numEdges = response;\n\n        }while(numEdges === -1);\n\n        setNodes([]);\n        setEdges([]);\n        setAdjList({});\n        setNodeCount(0);\n        setVisitedNodes([]);\n        setVisitedEdges([]);\n        setSelectedNode(null);\n        setText(startingText);\n\n        const newNodes = [];\n        const newEdges = [];\n        const newAdjList = {};\n\n\n        const gridSize = Math.ceil(Math.sqrt(numNodes));\n        const areaWidth = 500; \n        const areaHeight = 500; \n        const margin = 10;\n        const gridSpacingX = (areaWidth - 2 * margin) / gridSize;\n        const gridSpacingY = (areaHeight - 2 * margin) / gridSize;\n\n        for (let i = 0; i < numNodes; i++) {\n            const row = Math.floor(i / gridSize);\n            const col = i % gridSize;\n            const x = margin + col * gridSpacingX + Math.random() * gridSpacingX * 0.9;\n            const y = margin + row * gridSpacingY + Math.random() * gridSpacingY * 0.9;\n\n            const newNode = {\n                id: i,\n                x: x,\n                y: y,\n            };\n            newNodes.push(newNode);\n            newAdjList[i] = [];\n        }\n\n        while (newEdges.length < numEdges) {\n            const from = newNodes[Math.floor(Math.random() * numNodes)];\n            const to = newNodes[Math.floor(Math.random() * numNodes)];\n            if (from.id !== to.id) {\n                const edgeExists = newEdges.some(edge => \n                    (edge.from.id === from.id && edge.to.id === to.id) ||\n                    (!isDirected && edge.from.id === to.id && edge.to.id === from.id)\n                );\n                if (!edgeExists) {\n                    const newEdge = { from, to, color: defaultEdgeColor };\n                    newEdges.push(newEdge);\n                    newAdjList[from.id].push(to.id);\n                    if(!isDirected){\n                        newAdjList[to.id].push(from.id);\n                    }\n                }\n            }\n        }\n\n        setNodes(newNodes);\n        setEdges(newEdges);\n        setAdjList(newAdjList);\n        setNodeCount(newNodes.length);\n    };\n\n    // Function to reset the graph\n    const resetGraph = () => {\n        if(algorithmRunning){\n            return;\n        }\n        setNodes([]);\n        setEdges([]);\n        setClickedMST(false);\n        setClickedTraversal(false);\n        setIsRemovingEdge(false);\n        setText(startingText);\n    };\n\n    // Function to remove a selected node form the graph\n    const removeNode = () => {\n        if (selectedNode == null) return;\n\n        setNodes(nodes.filter(node => node.id !== selectedNode.id));\n        setEdges(edges.filter(edge => edge.from.id !== selectedNode.id && edge.to.id !== selectedNode.id));\n        setAdjList(prevAdjList => {\n            const newAdjList = { ...prevAdjList };\n            delete newAdjList[selectedNode.id];\n            for (const key in newAdjList) {\n                newAdjList[key] = newAdjList[key].filter(id => id !== selectedNode.id);\n            }\n            return newAdjList;\n        });\n        setSelectedNode(null);\n    };\n\n    // Function to handle clicking on a node\n    const handleNodeClick = (node) => {\n        if (dragging) {\n            return;\n        }\n\n        if (isAddingEdge) {\n            if (selectedNode && selectedNode.id !== node.id) {\n                const edgeExists = edges.some(edge =>\n                    (edge.from.id === selectedNode.id && edge.to.id === node.id) ||\n                    (!isDirected && edge.from.id === node.id && edge.to.id === selectedNode.id)\n                );\n\n                if(!edgeExists){\n                    const newEdge = { from: selectedNode, to: node, color: defaultEdgeColor };\n                    setEdges(prevEdges => [...prevEdges, newEdge]);\n\n                    setAdjList(prevAdjList => {\n                        const newAdjList = { ...prevAdjList };\n                        if (!newAdjList[selectedNode.id]) newAdjList[selectedNode.id] = [];\n                        if (!newAdjList[node.id]) newAdjList[node.id] = [];\n                        newAdjList[selectedNode.id].push(node.id);\n                        if (!isDirected) {\n                            newAdjList[node.id].push(selectedNode.id);\n                        }\n                        return newAdjList;\n                    })\n                }\n                \n                setIsAddingEdge(false);\n                setSelectedNode(null);\n            } else if (selectedNode && selectedNode.id === node.id) {\n                setSelectedNode(null);\n                setIsAddingEdge(false);\n            }\n            setText(startingText);\n        } else if(isDFS){\n            setVisitedNodes([]);\n            setVisitedEdges([]);\n            dfs(node);\n            setIsDFS(false);\n        } else if(isBFS){\n            setVisitedNodes([]);\n            setVisitedEdges([]);\n            bfs(node);\n            setIsBFS(false);\n        }else if(isPrim){\n            setIsPrim(false);\n            animatePrimsAlgorithm(node);\n        }else if(isShortestPath){\n            if(!startNode){\n                setStartNode(node);\n                setText(\"Select End Node for Shortest Path\");\n            }else if(!endNode){\n                setEndNode(node);\n                setText(\"Finding Shortest Path...\");\n                findShortestPath(startNode, node);\n                setIsShortestPath(false);\n            }\n        }else if(isTSP){\n            setVisitedNodes([]);\n            setVisitedEdges([]);\n            tsp(node);\n            setIsTSP(false);\n        }else{\n            if (selectedNode && selectedNode.id === node.id) {\n                setSelectedNode(null); \n                setText(startingText);\n            } else {\n                if(!algorithmRunning){\n                    setSelectedNode(node);\n                }\n                \n            }\n        }\n    }\n\n    // Function to handle mouse down event for dragging\n    const handleMouseDown = () => {\n        setDragging(false);\n    };\n\n    // Function to handle slider change\n    const handleSliderChange = (event) => {\n        const newValue = event.target.value;\n        setSliderValue(newValue);\n        sliderValueRef.current = newValue;\n    }\n\n    // Function to start removing an edge\n    const startRemovingEdge = () => {\n        if(algorithmRunning){\n            return;\n        }\n\n        if(isRemovingEdge){\n            setIsRemovingEdge(false);\n            setText(\"\");\n            return;\n        }\n\n        if(edges.length < 1){\n            alert(\"must be at least one edge\");\n            return;\n        }\n        setText(\"Click on an edge to remove it\");\n        setIsRemovingEdge(true);\n    }\n\n    // Function to initiate adding an edge\n    const handleAddEdge = () => {\n        if (selectedNode === null) return;\n\n        if(!isDirected){\n            if(((nodes.length * (nodes.length - 1)) / 2) === edges.length){\n                alert(\"cannot add another edge\");\n                return;\n            }\n        }else{\n            if(((nodes.length * (nodes.length - 1))) === edges.length){\n                alert(\"cannot add another edge\");\n                return;\n            }\n        }\n        \n\n        if (nodes.length < 2) {\n            alert(\"You need at least two nodes to add an edge.\");\n            return;\n        }\n        setIsAddingEdge(true);\n        setText(\"Click another node to add edge\");\n    };\n\n    // Function to handle clicking on an edge\n    const handleEdgeClick = (edge) => {\n        if (isRemovingEdge) {\n            setEdges(edges.filter(e => e !== edge));\n            setIsRemovingEdge(false);\n\n            setAdjList(prevAdjList => {\n                const newAdjList = { ...prevAdjList };\n                newAdjList[edge.from.id] = newAdjList[edge.from.id].filter(id => id !== edge.to.id);\n                newAdjList[edge.to.id] = newAdjList[edge.to.id].filter(id => id !== edge.from.id);\n                return newAdjList;\n            });\n            setText(startingText);\n        }\n    }\n\n    // Function to handle dragging a node\n    const handleDrag = (e, data, node) => {\n        setDragging(true);\n        node.x = data.x;\n        node.y = data.y;\n        setNodes([...nodes]);\n    };\n\n    // Function to handle stopping the drag of a node\n    const handleDragStop = () => {\n        setTimeout(() => {\n            setDragging(false);\n        }, 0);\n    };\n\n    // Function to sleep and check for pausing\n    const sleep = (duration) => {\n        return new Promise((resolve) => {\n            const interval = 50;\n            let elapsed = 0;\n\n            const checkPauseAndSleep = () => {\n                if (isPausedRef.current) {\n                    const checkPause = () => {\n                        if(isStepModeRef.current){\n                            setIsStepMode(true);\n                            resolve();\n                        }else if (!isPausedRef.current){\n                            resolve();\n                        }else {\n                            setTimeout(checkPause, interval);\n                        }\n                    };\n                    checkPause();\n                } else {\n                    if (elapsed < duration) {\n                        elapsed += interval;\n                        setTimeout(checkPauseAndSleep, interval);\n                    } else {\n                        resolve();\n                    }\n                }\n            };\n\n            checkPauseAndSleep();\n        });\n    };\n\n    // JSX for rendering the component\n    return (\n        <div className=\"main-container\">\n            <div className=\"button-container\">\n                <h3>Graph Creation</h3>\n\n                {/* Graph Creation and Updating when node selected */}\n                {selectedNode && (\n                <button className=\"graph-button\" onClick={handleAddEdge}>Add Edge</button>)}\n                {selectedNode && (\n                <button className=\"graph-button\" onClick={removeNode}>Remove Node</button>)}\n\n                {/* Graph Creation and Updating */}\n                {!selectedNode && (\n                <button className=\"graph-button\" onClick={addNode}>Add Node</button>)}\n                {!selectedNode && (\n                <button className=\"graph-button\" onClick={generateGraph}>Generate Graph</button>)}\n                {!selectedNode && nodes.length > 0 && (\n                <button className=\"graph-button\" onClick={resetGraph}>Reset Graph</button>)}\n\n                {/* Edge Editing */}\n                {!selectedNode && (\n                    <h3>Edge Editing</h3>)}\n                {!selectedNode && (\n                    <button className=\"graph-button\" onClick={toggleGraphType}>\n                        {isDirected ? 'Set Undirected' : 'Set Directed'}\n                    </button>)}\n                {!selectedNode && edges.length > 0 && (\n                    <button className=\"graph-button\" onClick={() => {if(edges.length>0){setShowWeights(!showWeights)}}}>\n                        {showWeights ? 'Hide Weights' : 'Show Weights'}\n                    </button>)}\n                {!selectedNode && edges.length > 0 && (\n                <button className=\"graph-button\" onClick={startRemovingEdge}>Remove Edge</button>)}\n\n                \n                {algorithmStarted && !disablePause && (\n                    <>\n                        <h3>Control</h3>\n                        <button className=\"graph-button\" onClick={nextStep}>Next Step</button>\n                        <button className=\"graph-button\" onClick={togglePlayPause}>\n                            {((isPaused || isStepMode) && !disablePause) ? \"Play\" : \"Pause\"}\n                        </button>\n                    </>\n                )}\n\n            </div>\n                \n            <div className=\"graph-content\">\n                <div className=\"slider-container\">\n                    <h4 className=\"slider-label\">Algorithm Speed</h4>\n                    <div className=\"slider-content\">\n                        <h4>Slow</h4>\n                        <input \n                            type=\"range\" \n                            min=\"100\" \n                            max=\"2000\" \n                            step=\"100\" \n                            value={sliderValue} \n                            onChange={handleSliderChange}\n                        />\n                        <h4>Fast</h4>\n                    </div>\n                </div>\n                <div className=\"graph-box\">\n                <svg className=\"edges-svg\" style={{ position: 'absolute', width: '100%', height: '100%' }}>\n                    {edges.map((edge, index) => {\n                        const midpoint = calculateMidpoint(edge);\n                        const { angle, flipped } = calculateAngle(edge);\n                        const arrowLength = 15;\n                        const arrowAngle = 30;\n                        const nodeRadius = 10;\n                \n                        \n                        const dx = edge.to.x - edge.from.x;\n                        const dy = edge.to.y - edge.from.y;\n                        const length = Math.sqrt(dx * dx + dy * dy);\n                        const unitDx = dx / length;\n                        const unitDy = dy / length;\n                        \n                        const baseX = edge.to.x - nodeRadius * unitDx;\n                        const baseY = edge.to.y - nodeRadius * unitDy;\n                        \n                        const edgeCount = edges.filter(e => \n                            (e.from.id === edge.from.id && e.to.id === edge.to.id) || \n                            (e.from.id === edge.to.id && e.to.id === edge.from.id)\n                        ).length;\n\n                        let offsetX = 0;\n                        let offsetY = 0;\n\n                        if (edgeCount > 1) {\n                            offsetX = 5 * unitDy; \n                            offsetY = -5 * unitDx;\n                        }\n\n                        const adjustedFromX = edge.from.x + 10 + offsetX;\n                        const adjustedFromY = edge.from.y + 10 + offsetY;\n                        const adjustedToX = baseX + 10 + offsetX ;\n                        const adjustedToY = baseY + 10 + offsetY;\n\n                        const arrowBaseX = baseX + offsetX + 10;\n                        const arrowBaseY = baseY + offsetY + 10;\n                \n                        let arrowX1, arrowY1, arrowX2, arrowY2;\n                        if (flipped) {\n                            arrowX1 = arrowBaseX + arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                            arrowY1 = arrowBaseY + arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n                            arrowX2 = arrowBaseX + arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                            arrowY2 = arrowBaseY + arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n                        } else {\n                            arrowX1 = arrowBaseX - arrowLength * Math.cos((angle - arrowAngle) * Math.PI / 180);\n                            arrowY1 = arrowBaseY - arrowLength * Math.sin((angle - arrowAngle) * Math.PI / 180);\n                            arrowX2 = arrowBaseX - arrowLength * Math.cos((angle + arrowAngle) * Math.PI / 180);\n                            arrowY2 = arrowBaseY - arrowLength * Math.sin((angle + arrowAngle) * Math.PI / 180);\n                        }\n\n\n                        return (\n                            <React.Fragment key={index}>\n                                <line\n                                    x1={adjustedFromX}\n                                    y1={adjustedFromY}\n                                    x2={adjustedToX}\n                                    y2={adjustedToY}\n                                    stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                    strokeWidth={isRemovingEdge ? 8 : 4}\n                                    onClick={() => handleEdgeClick(edge)}\n                                />\n                                {isDirected && (\n                                   <>\n                                        <line\n                                            x1={adjustedToX}\n                                            y1={adjustedToY}\n                                            x2={arrowX1}\n                                            y2={arrowY1}\n                                            stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                            strokeWidth={isRemovingEdge ? 8 : 4}\n                                        />\n                                        <line\n                                           x1={adjustedToX}\n                                           y1={adjustedToY}\n                                           x2={arrowX2}\n                                           y2={arrowY2}\n                                            stroke={visitedEdges.find(e => e.from.id === edge.from.id && e.to.id === edge.to.id)?.color || (isRemovingEdge ? \"red\" : \"grey\")}\n                                            strokeWidth={isRemovingEdge ? 8 : 4}\n                                        />\n                                    </>\n                                )}\n                                {showWeights && (\n                                    <text\n                                        x={midpoint.x + 10}\n                                        y={edgeCount > 1 ? midpoint.y + 2 : midpoint.y + 7}\n                                        fill=\"black\"\n                                        fontSize=\"12\"\n                                        transform={`rotate(${angle}, ${midpoint.x + 10}, ${midpoint.y + 10})`}\n                                        textAnchor=\"middle\"\n                                    >\n                                        {Math.round(calculateEdgeLength(edge))}\n                                    </text>)}\n                            </React.Fragment>\n                        );\n                    })}\n                </svg>\n                    {nodes.map(node => (\n                        <Draggable\n                            key={node.id}\n                            position={{ x: node.x, y: node.y }}\n                            bounds=\"parent\"\n                            onStart={handleMouseDown}\n                            onDrag={(e, data) => handleDrag(e, data, node)}\n                            onStop={handleDragStop}\n                        >\n                            <div\n                                className=\"graph-node\"\n                                onClick={() => handleNodeClick(node)}\n                                style={{\n                                    border: (isTSP || isBFS || isPrim || isDFS || isShortestPath) ? (startNode && startNode.id === node.id ? 'none' : '2px solid red') : (selectedNode && selectedNode.id === node.id ? '2px solid red' : 'none'),\n                                    backgroundColor: \n                                    node.id === currentNode?.id ? 'red' : \n                                    visitedNodes.some(vn => vn.id === node.id) ? \n                                        (visitedNodes.find(vn => vn.id === node.id)?.color || componentColors[components.findIndex(comp => comp.some(n => n.id === node.id)) % componentColors.length] || \"blue\") \n                                        : 'black',\n                                    pointerEvents: 'auto',\n                                    position: 'absolute'\n                                }}\n                            >\n                            </div>\n                        </Draggable>\n                    ))}\n                </div>\n                <h3 class-name=\"status-text\">{text}</h3>\n            </div>\n\n            <div className=\"button-container\">    \n                {/* Traversal and MST and Path*/}\n                {edges.length > 0 && !selectedNode &&(\n                <h3>Algorithms</h3>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickTraversal}>Traversals →</button>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickMST}>MSTs →</button>)}\n                {edges.length > 0 && !selectedNode && !clickedTraversal && !clickedMST && !clickedPaths && (\n                <button className=\"graph-button\" onClick={setClickPath}>Paths →</button>)}\n\n\n                {/* Specific Algorithms */}\n                {clickedMST && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Kruskall\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={animateKruskalsAlgorithm}>Kruskall</button>)}\n                {clickedMST && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Prim\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startPrim}>Prim</button>)}\n\n                {clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\", backgroundColor: runningAlgorithm === \"DFS\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startDFS}>DFS</button>)}\n                {clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"BFS\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startBFS}>BFS</button>)}\n\n                {clickedPaths && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"SP\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startShortestPath}>Shortest Path</button>)}\n                {clickedPaths && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"TSP\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={startTSP}>TSP</button>)}\n                \n                {!clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Color\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={graphColoring}>Graph Coloring</button>)}\n                {!isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={findConnectedComponents}>Connected Components</button>)}\n                {isDirected && !clickedPaths && !clickedMST && !clickedTraversal && !selectedNode && edges.length > 0 && (\n                <button style={{border:runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\",  backgroundColor: runningAlgorithm === \"Connected\" ? highlightedButtonColor : \"\" }}className=\"graph-button\" onClick={findStrongComponents}>Strong Components</button>)}\n\n                {/* Back Button */}\n                {(clickedTraversal || clickedMST || clickedPaths) && !selectedNode && (\n                <button className=\"graph-button\" onClick={goBack}>← Back</button>)} \n                \n            </div>\n        </div>\n    );\n    \n}\n\nexport default Graphs;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}